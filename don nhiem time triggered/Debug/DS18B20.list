
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007470  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007580  08007580  00008580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007940  08007940  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007940  08007940  00008940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007948  08007948  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007948  08007948  00008948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800794c  0800794c  0000894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007950  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d8  08007b28  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08007b28  00009448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105b0  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002653  00000000  00000000  000197b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001be08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf7  00000000  00000000  0001ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001920f  00000000  00000000  0001db7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139a1  00000000  00000000  00036d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecd2  00000000  00000000  0004a72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  000d9444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000deb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007568 	.word	0x08007568

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007568 	.word	0x08007568

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_f2iz>:
 8000ca4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cac:	d30f      	bcc.n	8000cce <__aeabi_f2iz+0x2a>
 8000cae:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cb6:	d90d      	bls.n	8000cd4 <__aeabi_f2iz+0x30>
 8000cb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cc0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000cc8:	bf18      	it	ne
 8000cca:	4240      	negne	r0, r0
 8000ccc:	4770      	bx	lr
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	4770      	bx	lr
 8000cd4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000cd8:	d101      	bne.n	8000cde <__aeabi_f2iz+0x3a>
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	d105      	bne.n	8000cea <__aeabi_f2iz+0x46>
 8000cde:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000ce2:	bf08      	it	eq
 8000ce4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	4770      	bx	lr

08000cf0 <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f98a 	bl	8001016 <DELAY_TIM_Init>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f984 	bl	800102c <DELAY_TIM_Us>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	887a      	ldrh	r2, [r7, #2]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f98a 	bl	800105a <DELAY_TIM_Ms>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f107 0208 	add.w	r2, r7, #8
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fa11 	bl	80021a4 <HAL_GPIO_Init>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	889b      	ldrh	r3, [r3, #4]
 8000da4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f107 0208 	add.w	r2, r7, #8
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f9f3 	bl	80021a4 <HAL_GPIO_Init>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6898      	ldr	r0, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	889b      	ldrh	r3, [r3, #4]
 8000dda:	78fa      	ldrb	r2, [r7, #3]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f001 fb7c 	bl	80024da <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	f001 fb55 	bl	80024ac <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);  
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff98 	bl	8000d4e <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffd0 	bl	8000dc6 <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);   
 8000e26:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff6d 	bl	8000d0a <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);    
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ffaa 	bl	8000d8a <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80); 
 8000e36:	2150      	movs	r1, #80	@ 0x50
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff66 	bl	8000d0a <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;   
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffd3 	bl	8000dea <DS18B20_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <DS18B20_Start+0x44>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e001      	b.n	8000e54 <DS18B20_Start+0x48>
	else Response = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8000e54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff56 	bl	8000d0a <DS18B20_DelayUs>

	return Response;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff6a 	bl	8000d4e <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e02b      	b.n	8000ed8 <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 8000e80:	78fa      	ldrb	r2, [r7, #3]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	fa42 f303 	asr.w	r3, r2, r3
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d012      	beq.n	8000eb6 <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff5c 	bl	8000d4e <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000e96:	2100      	movs	r1, #0
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff94 	bl	8000dc6 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff32 	bl	8000d0a <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff6f 	bl	8000d8a <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8000eac:	2132      	movs	r1, #50	@ 0x32
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff2b 	bl	8000d0a <DS18B20_DelayUs>
 8000eb4:	e00d      	b.n	8000ed2 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff49 	bl	8000d4e <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff81 	bl	8000dc6 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8000ec4:	2132      	movs	r1, #50	@ 0x32
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff1f 	bl	8000d0a <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff5c 	bl	8000d8a <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	ddd0      	ble.n	8000e80 <DS18B20_Write+0x18>
		}
	}
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff48 	bl	8000d8a <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	e024      	b.n	8000f4a <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff24 	bl	8000d4e <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff5c 	bl	8000dc6 <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 8000f0e:	2101      	movs	r1, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fefa 	bl	8000d0a <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff37 	bl	8000d8a <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff64 	bl	8000dea <DS18B20_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d009      	beq.n	8000f3c <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 8000f3c:	2132      	movs	r1, #50	@ 0x32
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fee3 	bl	8000d0a <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	ddd7      	ble.n	8000f00 <DS18B20_Read+0x18>
	}
	return Value;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff feb8 	bl	8000cf0 <DS18B20_DelayInit>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	uint16_t Temp;
	DS18B20_Start(DS18B20);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff3b 	bl	8000e0c <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000f96:	2101      	movs	r1, #1
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff fec7 	bl	8000d2c <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8000f9e:	21cc      	movs	r1, #204	@ 0xcc
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff61 	bl	8000e68 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 8000fa6:	2144      	movs	r1, #68	@ 0x44
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff5d 	bl	8000e68 <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 8000fae:	21c8      	movs	r1, #200	@ 0xc8
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff febb 	bl	8000d2c <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff28 	bl	8000e0c <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff feb4 	bl	8000d2c <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8000fc4:	21cc      	movs	r1, #204	@ 0xcc
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff4e 	bl	8000e68 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 8000fcc:	21be      	movs	r1, #190	@ 0xbe
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff4a 	bl	8000e68 <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff87 	bl	8000ee8 <DS18B20_Read>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff82 	bl	8000ee8 <DS18B20_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	81bb      	strh	r3, [r7, #12]
	DS18B20->Temp = (float)(Temp/16);
 8000ff8:	89bb      	ldrh	r3, [r7, #12]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fdfc 	bl	8000bfc <__aeabi_i2f>
 8001004:	4602      	mov	r2, r0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f002 fb70 	bl	8003704 <HAL_TIM_Base_Start>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8001040:	bf00      	nop
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	429a      	cmp	r2, r3
 800104c:	d3f9      	bcc.n	8001042 <DELAY_TIM_Us+0x16>
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <DELAY_TIM_Ms>:
void DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t Time)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(Time--)
 800106e:	e006      	b.n	800107e <DELAY_TIM_Ms+0x24>
	{
		while(__HAL_TIM_GET_COUNTER(htim)<1000){}
 8001070:	bf00      	nop
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800107c:	d3f9      	bcc.n	8001072 <DELAY_TIM_Ms+0x18>
	while(Time--)
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	807a      	strh	r2, [r7, #2]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f3      	bne.n	8001070 <DELAY_TIM_Ms+0x16>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f023 030f 	bic.w	r3, r3, #15
 80010a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	f043 030c 	orr.w	r3, r3, #12
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	f043 030c 	orr.w	r3, r3, #12
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2304      	movs	r3, #4
 80010de:	214e      	movs	r1, #78	@ 0x4e
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <lcd_send_cmd+0x5c>)
 80010e2:	f001 fb57 	bl	8002794 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000258 	.word	0x20000258

080010f4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f023 030f 	bic.w	r3, r3, #15
 8001104:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	f043 030d 	orr.w	r3, r3, #13
 8001112:	b2db      	uxtb	r3, r3
 8001114:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f043 0309 	orr.w	r3, r3, #9
 800111c:	b2db      	uxtb	r3, r3
 800111e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	f043 030d 	orr.w	r3, r3, #13
 8001126:	b2db      	uxtb	r3, r3
 8001128:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	f043 0309 	orr.w	r3, r3, #9
 8001130:	b2db      	uxtb	r3, r3
 8001132:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001134:	f107 0208 	add.w	r2, r7, #8
 8001138:	2364      	movs	r3, #100	@ 0x64
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2304      	movs	r3, #4
 800113e:	214e      	movs	r1, #78	@ 0x4e
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <lcd_send_data+0x5c>)
 8001142:	f001 fb27 	bl	8002794 <HAL_I2C_Master_Transmit>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000258 	.word	0x20000258

08001154 <lcd_send_string>:
	HAL_Delay(50);
	lcd_send_cmd (0x80);
}

void lcd_send_string (char *str)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800115c:	e006      	b.n	800116c <lcd_send_string+0x18>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ffc4 	bl	80010f4 <lcd_send_data>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f4      	bne.n	800115e <lcd_send_string+0xa>
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	337f      	adds	r3, #127	@ 0x7f
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e008      	b.n	80011b2 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3340      	adds	r3, #64	@ 0x40
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff6d 	bl	8001094 <lcd_send_cmd>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <read_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char read_keypad (void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 80011c8:	2200      	movs	r2, #0
 80011ca:	2180      	movs	r1, #128	@ 0x80
 80011cc:	48b0      	ldr	r0, [pc, #704]	@ (8001490 <read_keypad+0x2cc>)
 80011ce:	f001 f984 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80011d2:	2201      	movs	r2, #1
 80011d4:	2140      	movs	r1, #64	@ 0x40
 80011d6:	48ae      	ldr	r0, [pc, #696]	@ (8001490 <read_keypad+0x2cc>)
 80011d8:	f001 f97f 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80011dc:	2201      	movs	r2, #1
 80011de:	2120      	movs	r1, #32
 80011e0:	48ab      	ldr	r0, [pc, #684]	@ (8001490 <read_keypad+0x2cc>)
 80011e2:	f001 f97a 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80011e6:	2201      	movs	r2, #1
 80011e8:	2110      	movs	r1, #16
 80011ea:	48a9      	ldr	r0, [pc, #676]	@ (8001490 <read_keypad+0x2cc>)
 80011ec:	f001 f975 	bl	80024da <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80011f0:	2108      	movs	r1, #8
 80011f2:	48a7      	ldr	r0, [pc, #668]	@ (8001490 <read_keypad+0x2cc>)
 80011f4:	f001 f95a 	bl	80024ac <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <read_keypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 80011fe:	bf00      	nop
 8001200:	2108      	movs	r1, #8
 8001202:	48a3      	ldr	r0, [pc, #652]	@ (8001490 <read_keypad+0x2cc>)
 8001204:	f001 f952 	bl	80024ac <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f8      	beq.n	8001200 <read_keypad+0x3c>
		return '1';
 800120e:	2331      	movs	r3, #49	@ 0x31
 8001210:	e13b      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8001212:	2104      	movs	r1, #4
 8001214:	489e      	ldr	r0, [pc, #632]	@ (8001490 <read_keypad+0x2cc>)
 8001216:	f001 f949 	bl	80024ac <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <read_keypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8001220:	bf00      	nop
 8001222:	2104      	movs	r1, #4
 8001224:	489a      	ldr	r0, [pc, #616]	@ (8001490 <read_keypad+0x2cc>)
 8001226:	f001 f941 	bl	80024ac <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f8      	beq.n	8001222 <read_keypad+0x5e>
		return '2';
 8001230:	2332      	movs	r3, #50	@ 0x32
 8001232:	e12a      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8001234:	2102      	movs	r1, #2
 8001236:	4896      	ldr	r0, [pc, #600]	@ (8001490 <read_keypad+0x2cc>)
 8001238:	f001 f938 	bl	80024ac <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <read_keypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 8001242:	bf00      	nop
 8001244:	2102      	movs	r1, #2
 8001246:	4892      	ldr	r0, [pc, #584]	@ (8001490 <read_keypad+0x2cc>)
 8001248:	f001 f930 	bl	80024ac <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f8      	beq.n	8001244 <read_keypad+0x80>
		return '3';
 8001252:	2333      	movs	r3, #51	@ 0x33
 8001254:	e119      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8001256:	2101      	movs	r1, #1
 8001258:	488d      	ldr	r0, [pc, #564]	@ (8001490 <read_keypad+0x2cc>)
 800125a:	f001 f927 	bl	80024ac <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d109      	bne.n	8001278 <read_keypad+0xb4>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 8001264:	bf00      	nop
 8001266:	2101      	movs	r1, #1
 8001268:	4889      	ldr	r0, [pc, #548]	@ (8001490 <read_keypad+0x2cc>)
 800126a:	f001 f91f 	bl	80024ac <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f8      	beq.n	8001266 <read_keypad+0xa2>
		return 'A';
 8001274:	2341      	movs	r3, #65	@ 0x41
 8001276:	e108      	b.n	800148a <read_keypad+0x2c6>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8001278:	2201      	movs	r2, #1
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	4884      	ldr	r0, [pc, #528]	@ (8001490 <read_keypad+0x2cc>)
 800127e:	f001 f92c 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 8001282:	2200      	movs	r2, #0
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4882      	ldr	r0, [pc, #520]	@ (8001490 <read_keypad+0x2cc>)
 8001288:	f001 f927 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 800128c:	2201      	movs	r2, #1
 800128e:	2120      	movs	r1, #32
 8001290:	487f      	ldr	r0, [pc, #508]	@ (8001490 <read_keypad+0x2cc>)
 8001292:	f001 f922 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8001296:	2201      	movs	r2, #1
 8001298:	2110      	movs	r1, #16
 800129a:	487d      	ldr	r0, [pc, #500]	@ (8001490 <read_keypad+0x2cc>)
 800129c:	f001 f91d 	bl	80024da <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80012a0:	2108      	movs	r1, #8
 80012a2:	487b      	ldr	r0, [pc, #492]	@ (8001490 <read_keypad+0x2cc>)
 80012a4:	f001 f902 	bl	80024ac <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <read_keypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 80012ae:	bf00      	nop
 80012b0:	2108      	movs	r1, #8
 80012b2:	4877      	ldr	r0, [pc, #476]	@ (8001490 <read_keypad+0x2cc>)
 80012b4:	f001 f8fa 	bl	80024ac <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f8      	beq.n	80012b0 <read_keypad+0xec>
		return '4';
 80012be:	2334      	movs	r3, #52	@ 0x34
 80012c0:	e0e3      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 80012c2:	2104      	movs	r1, #4
 80012c4:	4872      	ldr	r0, [pc, #456]	@ (8001490 <read_keypad+0x2cc>)
 80012c6:	f001 f8f1 	bl	80024ac <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <read_keypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 80012d0:	bf00      	nop
 80012d2:	2104      	movs	r1, #4
 80012d4:	486e      	ldr	r0, [pc, #440]	@ (8001490 <read_keypad+0x2cc>)
 80012d6:	f001 f8e9 	bl	80024ac <HAL_GPIO_ReadPin>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f8      	beq.n	80012d2 <read_keypad+0x10e>
		return '5';
 80012e0:	2335      	movs	r3, #53	@ 0x35
 80012e2:	e0d2      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80012e4:	2102      	movs	r1, #2
 80012e6:	486a      	ldr	r0, [pc, #424]	@ (8001490 <read_keypad+0x2cc>)
 80012e8:	f001 f8e0 	bl	80024ac <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <read_keypad+0x142>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80012f2:	bf00      	nop
 80012f4:	2102      	movs	r1, #2
 80012f6:	4866      	ldr	r0, [pc, #408]	@ (8001490 <read_keypad+0x2cc>)
 80012f8:	f001 f8d8 	bl	80024ac <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f8      	beq.n	80012f4 <read_keypad+0x130>
		return '6';
 8001302:	2336      	movs	r3, #54	@ 0x36
 8001304:	e0c1      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8001306:	2101      	movs	r1, #1
 8001308:	4861      	ldr	r0, [pc, #388]	@ (8001490 <read_keypad+0x2cc>)
 800130a:	f001 f8cf 	bl	80024ac <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <read_keypad+0x164>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 8001314:	bf00      	nop
 8001316:	2101      	movs	r1, #1
 8001318:	485d      	ldr	r0, [pc, #372]	@ (8001490 <read_keypad+0x2cc>)
 800131a:	f001 f8c7 	bl	80024ac <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f8      	beq.n	8001316 <read_keypad+0x152>
		return 'B';
 8001324:	2342      	movs	r3, #66	@ 0x42
 8001326:	e0b0      	b.n	800148a <read_keypad+0x2c6>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8001328:	2201      	movs	r2, #1
 800132a:	2180      	movs	r1, #128	@ 0x80
 800132c:	4858      	ldr	r0, [pc, #352]	@ (8001490 <read_keypad+0x2cc>)
 800132e:	f001 f8d4 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8001332:	2201      	movs	r2, #1
 8001334:	2140      	movs	r1, #64	@ 0x40
 8001336:	4856      	ldr	r0, [pc, #344]	@ (8001490 <read_keypad+0x2cc>)
 8001338:	f001 f8cf 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 800133c:	2200      	movs	r2, #0
 800133e:	2120      	movs	r1, #32
 8001340:	4853      	ldr	r0, [pc, #332]	@ (8001490 <read_keypad+0x2cc>)
 8001342:	f001 f8ca 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8001346:	2201      	movs	r2, #1
 8001348:	2110      	movs	r1, #16
 800134a:	4851      	ldr	r0, [pc, #324]	@ (8001490 <read_keypad+0x2cc>)
 800134c:	f001 f8c5 	bl	80024da <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8001350:	2108      	movs	r1, #8
 8001352:	484f      	ldr	r0, [pc, #316]	@ (8001490 <read_keypad+0x2cc>)
 8001354:	f001 f8aa 	bl	80024ac <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <read_keypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 800135e:	bf00      	nop
 8001360:	2108      	movs	r1, #8
 8001362:	484b      	ldr	r0, [pc, #300]	@ (8001490 <read_keypad+0x2cc>)
 8001364:	f001 f8a2 	bl	80024ac <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f8      	beq.n	8001360 <read_keypad+0x19c>
		return '7';
 800136e:	2337      	movs	r3, #55	@ 0x37
 8001370:	e08b      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8001372:	2104      	movs	r1, #4
 8001374:	4846      	ldr	r0, [pc, #280]	@ (8001490 <read_keypad+0x2cc>)
 8001376:	f001 f899 	bl	80024ac <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <read_keypad+0x1d0>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8001380:	bf00      	nop
 8001382:	2104      	movs	r1, #4
 8001384:	4842      	ldr	r0, [pc, #264]	@ (8001490 <read_keypad+0x2cc>)
 8001386:	f001 f891 	bl	80024ac <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f8      	beq.n	8001382 <read_keypad+0x1be>
		return '8';
 8001390:	2338      	movs	r3, #56	@ 0x38
 8001392:	e07a      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8001394:	2102      	movs	r1, #2
 8001396:	483e      	ldr	r0, [pc, #248]	@ (8001490 <read_keypad+0x2cc>)
 8001398:	f001 f888 	bl	80024ac <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <read_keypad+0x1f2>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80013a2:	bf00      	nop
 80013a4:	2102      	movs	r1, #2
 80013a6:	483a      	ldr	r0, [pc, #232]	@ (8001490 <read_keypad+0x2cc>)
 80013a8:	f001 f880 	bl	80024ac <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f8      	beq.n	80013a4 <read_keypad+0x1e0>
		return '9';
 80013b2:	2339      	movs	r3, #57	@ 0x39
 80013b4:	e069      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80013b6:	2101      	movs	r1, #1
 80013b8:	4835      	ldr	r0, [pc, #212]	@ (8001490 <read_keypad+0x2cc>)
 80013ba:	f001 f877 	bl	80024ac <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <read_keypad+0x214>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 80013c4:	bf00      	nop
 80013c6:	2101      	movs	r1, #1
 80013c8:	4831      	ldr	r0, [pc, #196]	@ (8001490 <read_keypad+0x2cc>)
 80013ca:	f001 f86f 	bl	80024ac <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f8      	beq.n	80013c6 <read_keypad+0x202>
		return 'C';
 80013d4:	2343      	movs	r3, #67	@ 0x43
 80013d6:	e058      	b.n	800148a <read_keypad+0x2c6>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80013d8:	2201      	movs	r2, #1
 80013da:	2180      	movs	r1, #128	@ 0x80
 80013dc:	482c      	ldr	r0, [pc, #176]	@ (8001490 <read_keypad+0x2cc>)
 80013de:	f001 f87c 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80013e2:	2201      	movs	r2, #1
 80013e4:	2140      	movs	r1, #64	@ 0x40
 80013e6:	482a      	ldr	r0, [pc, #168]	@ (8001490 <read_keypad+0x2cc>)
 80013e8:	f001 f877 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80013ec:	2201      	movs	r2, #1
 80013ee:	2120      	movs	r1, #32
 80013f0:	4827      	ldr	r0, [pc, #156]	@ (8001490 <read_keypad+0x2cc>)
 80013f2:	f001 f872 	bl	80024da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 80013f6:	2200      	movs	r2, #0
 80013f8:	2110      	movs	r1, #16
 80013fa:	4825      	ldr	r0, [pc, #148]	@ (8001490 <read_keypad+0x2cc>)
 80013fc:	f001 f86d 	bl	80024da <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8001400:	2108      	movs	r1, #8
 8001402:	4823      	ldr	r0, [pc, #140]	@ (8001490 <read_keypad+0x2cc>)
 8001404:	f001 f852 	bl	80024ac <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <read_keypad+0x25e>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 800140e:	bf00      	nop
 8001410:	2108      	movs	r1, #8
 8001412:	481f      	ldr	r0, [pc, #124]	@ (8001490 <read_keypad+0x2cc>)
 8001414:	f001 f84a 	bl	80024ac <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f8      	beq.n	8001410 <read_keypad+0x24c>
		return '*';
 800141e:	232a      	movs	r3, #42	@ 0x2a
 8001420:	e033      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8001422:	2104      	movs	r1, #4
 8001424:	481a      	ldr	r0, [pc, #104]	@ (8001490 <read_keypad+0x2cc>)
 8001426:	f001 f841 	bl	80024ac <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d109      	bne.n	8001444 <read_keypad+0x280>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8001430:	bf00      	nop
 8001432:	2104      	movs	r1, #4
 8001434:	4816      	ldr	r0, [pc, #88]	@ (8001490 <read_keypad+0x2cc>)
 8001436:	f001 f839 	bl	80024ac <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f8      	beq.n	8001432 <read_keypad+0x26e>
		return '0';
 8001440:	2330      	movs	r3, #48	@ 0x30
 8001442:	e022      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8001444:	2102      	movs	r1, #2
 8001446:	4812      	ldr	r0, [pc, #72]	@ (8001490 <read_keypad+0x2cc>)
 8001448:	f001 f830 	bl	80024ac <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <read_keypad+0x2a2>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 8001452:	bf00      	nop
 8001454:	2102      	movs	r1, #2
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <read_keypad+0x2cc>)
 8001458:	f001 f828 	bl	80024ac <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f8      	beq.n	8001454 <read_keypad+0x290>
		return '#';
 8001462:	2323      	movs	r3, #35	@ 0x23
 8001464:	e011      	b.n	800148a <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8001466:	2101      	movs	r1, #1
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <read_keypad+0x2cc>)
 800146a:	f001 f81f 	bl	80024ac <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <read_keypad+0x2c4>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 8001474:	bf00      	nop
 8001476:	2101      	movs	r1, #1
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <read_keypad+0x2cc>)
 800147a:	f001 f817 	bl	80024ac <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f8      	beq.n	8001476 <read_keypad+0x2b2>
		return 'D';
 8001484:	2344      	movs	r3, #68	@ 0x44
 8001486:	e000      	b.n	800148a <read_keypad+0x2c6>
	}

	return 0x01;  // /if nothing is pressed
 8001488:	2301      	movs	r3, #1

}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40010800 	.word	0x40010800

08001494 <read_temperature_DS18B20>:
float read_temperature_DS18B20(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
    float Temp = DS18B20_ReadTemp(&DS1); // Đọc nhiệt độ từ cảm biến
 800149a:	4804      	ldr	r0, [pc, #16]	@ (80014ac <read_temperature_DS18B20+0x18>)
 800149c:	f7ff fd74 	bl	8000f88 <DS18B20_ReadTemp>
 80014a0:	6078      	str	r0, [r7, #4]

    return Temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000248 	.word	0x20000248

080014b0 <send_temperature_via_UART>:
void send_temperature_via_UART(float Temp) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    char buffer[20];
    sprintf(buffer, "Nhiet do %.1f C", Temp);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	f107 000c 	add.w	r0, r7, #12
 80014c6:	490a      	ldr	r1, [pc, #40]	@ (80014f0 <send_temperature_via_UART+0x40>)
 80014c8:	f003 ff18 	bl	80052fc <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100); // Gửi qua UART
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe fe3d 	bl	8000150 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f107 010c 	add.w	r1, r7, #12
 80014de:	2364      	movs	r3, #100	@ 0x64
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <send_temperature_via_UART+0x44>)
 80014e2:	f002 fbd3 	bl	8003c8c <HAL_UART_Transmit>
}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08007584 	.word	0x08007584
 80014f4:	20000200 	.word	0x20000200

080014f8 <display_temperature_on_LCD>:
void display_temperature_on_LCD(float Temp) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    char buffer[20];
    int chuc = (int)Temp / 10;
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fbcf 	bl	8000ca4 <__aeabi_f2iz>
 8001506:	4603      	mov	r3, r0
 8001508:	4a15      	ldr	r2, [pc, #84]	@ (8001560 <display_temperature_on_LCD+0x68>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1092      	asrs	r2, r2, #2
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
    int dvi = (int)Temp % 10;
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fbc4 	bl	8000ca4 <__aeabi_f2iz>
 800151c:	4602      	mov	r2, r0
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <display_temperature_on_LCD+0x68>)
 8001520:	fb83 1302 	smull	r1, r3, r3, r2
 8001524:	1099      	asrs	r1, r3, #2
 8001526:	17d3      	asrs	r3, r2, #31
 8001528:	1ac9      	subs	r1, r1, r3
 800152a:	460b      	mov	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	623b      	str	r3, [r7, #32]

    // Format lại chuỗi
    sprintf(buffer, "Nhiet do %d%d○C", chuc, dvi);
 8001536:	f107 000c 	add.w	r0, r7, #12
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800153e:	4909      	ldr	r1, [pc, #36]	@ (8001564 <display_temperature_on_LCD+0x6c>)
 8001540:	f003 fedc 	bl	80052fc <siprintf>

    // Hiển thị lên LCD
    lcd_goto_XY(2, 1);
 8001544:	2101      	movs	r1, #1
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff fe19 	bl	800117e <lcd_goto_XY>
    lcd_send_string(buffer);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fdff 	bl	8001154 <lcd_send_string>
}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	66666667 	.word	0x66666667
 8001564:	08007594 	.word	0x08007594

08001568 <handle_keypad_input>:

void handle_keypad_input(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
    lcd_goto_XY(1, 3);
 800156e:	2103      	movs	r1, #3
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fe04 	bl	800117e <lcd_goto_XY>
    char key = read_keypad(); // Đọc phím
 8001576:	f7ff fe25 	bl	80011c4 <read_keypad>
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
    if (key != 0x01) {
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d007      	beq.n	8001594 <handle_keypad_input+0x2c>
        char str[2] = { key, '\0' };
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	713b      	strb	r3, [r7, #4]
 8001588:	2300      	movs	r3, #0
 800158a:	717b      	strb	r3, [r7, #5]
        lcd_send_string(str); // Hiển thị phím bấm lên LCD
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fde0 	bl	8001154 <lcd_send_string>
    }
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
int main(void)
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f000 fbb6 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f850 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f000 f93a 	bl	8001828 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015b4:	f000 f892 	bl	80016dc <MX_I2C1_Init>
  MX_TIM4_Init();
 80015b8:	f000 f8be 	bl	8001738 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80015bc:	f000 f90a 	bl	80017d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, 12);
 80015c0:	220c      	movs	r2, #12
 80015c2:	4912      	ldr	r1, [pc, #72]	@ (800160c <main+0x70>)
 80015c4:	4812      	ldr	r0, [pc, #72]	@ (8001610 <main+0x74>)
 80015c6:	f002 fbec 	bl	8003da2 <HAL_UART_Receive_IT>
  DS18B20_Init(&DS1, &htim4, DS18B20_GPIO_Port, DS18B20_Pin); // khoi tao ds18b20 timer4,....
 80015ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015ce:	4a11      	ldr	r2, [pc, #68]	@ (8001614 <main+0x78>)
 80015d0:	4911      	ldr	r1, [pc, #68]	@ (8001618 <main+0x7c>)
 80015d2:	4812      	ldr	r0, [pc, #72]	@ (800161c <main+0x80>)
 80015d4:	f7ff fcc1 	bl	8000f5a <DS18B20_Init>

  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 12);
 80015d8:	220c      	movs	r2, #12
 80015da:	490c      	ldr	r1, [pc, #48]	@ (800160c <main+0x70>)
 80015dc:	480c      	ldr	r0, [pc, #48]	@ (8001610 <main+0x74>)
 80015de:	f002 fbe0 	bl	8003da2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int SysTicks=0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 float Temp = read_temperature_DS18B20();
 80015e6:	f7ff ff55 	bl	8001494 <read_temperature_DS18B20>
 80015ea:	60f8      	str	r0, [r7, #12]

        // Gửi nhiệt độ qua UART
        send_temperature_via_UART(Temp);
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff ff5f 	bl	80014b0 <send_temperature_via_UART>

        // Hiển thị nhiệt độ lên LCD
        display_temperature_on_LCD(Temp);
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff ff80 	bl	80014f8 <display_temperature_on_LCD>

        // Xử lý phím bấm từ bàn phím
        handle_keypad_input();
 80015f8:	f7ff ffb6 	bl	8001568 <handle_keypad_input>

        HAL_Delay(period); //Set the repeating period
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <main+0x84>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fbeb 	bl	8001ddc <HAL_Delay>
  {
 8001606:	bf00      	nop
 8001608:	e7ed      	b.n	80015e6 <main+0x4a>
 800160a:	bf00      	nop
 800160c:	200001f4 	.word	0x200001f4
 8001610:	20000200 	.word	0x20000200
 8001614:	40010c00 	.word	0x40010c00
 8001618:	200002ac 	.word	0x200002ac
 800161c:	20000248 	.word	0x20000248
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_UART_RxCpltCallback>:
    }
  /* USER CODE END 3 */
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]


	period = UART1_rxBuffer;
 800162c:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <HAL_UART_RxCpltCallback+0x20>)
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_UART_RxCpltCallback+0x24>)
 8001630:	601a      	str	r2, [r3, #0]
     HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 12);
 8001632:	220c      	movs	r2, #12
 8001634:	4903      	ldr	r1, [pc, #12]	@ (8001644 <HAL_UART_RxCpltCallback+0x20>)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <HAL_UART_RxCpltCallback+0x28>)
 8001638:	f002 fbb3 	bl	8003da2 <HAL_UART_Receive_IT>


 }
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200001f4 	.word	0x200001f4
 8001648:	20000000 	.word	0x20000000
 800164c:	20000200 	.word	0x20000200

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	@ 0x40
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	2228      	movs	r2, #40	@ 0x28
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fec9 	bl	80053f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001676:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800167a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001680:	2301      	movs	r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001684:	2302      	movs	r3, #2
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800168e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fbd3 	bl	8002e44 <HAL_RCC_OscConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016a4:	f000 f92c 	bl	8001900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a8:	230f      	movs	r3, #15
 80016aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ac:	2302      	movs	r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2102      	movs	r1, #2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 fe40 	bl	8003348 <HAL_RCC_ClockConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016ce:	f000 f917 	bl	8001900 <Error_Handler>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3740      	adds	r7, #64	@ 0x40
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <MX_I2C1_Init+0x50>)
 80016e2:	4a13      	ldr	r2, [pc, #76]	@ (8001730 <MX_I2C1_Init+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_I2C1_Init+0x50>)
 80016e8:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <MX_I2C1_Init+0x58>)
 80016ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <MX_I2C1_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_I2C1_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_I2C1_Init+0x50>)
 80016fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <MX_I2C1_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_I2C1_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <MX_I2C1_Init+0x50>)
 800171a:	f000 fef7 	bl	800250c <HAL_I2C_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001724:	f000 f8ec 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000258 	.word	0x20000258
 8001730:	40005400 	.word	0x40005400
 8001734:	000186a0 	.word	0x000186a0

08001738 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	463b      	mov	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001754:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <MX_TIM4_Init+0x94>)
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <MX_TIM4_Init+0x98>)
 8001758:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <MX_TIM4_Init+0x94>)
 800175c:	2247      	movs	r2, #71	@ 0x47
 800175e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_TIM4_Init+0x94>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <MX_TIM4_Init+0x94>)
 8001768:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800176c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <MX_TIM4_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <MX_TIM4_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800177a:	4814      	ldr	r0, [pc, #80]	@ (80017cc <MX_TIM4_Init+0x94>)
 800177c:	f001 ff72 	bl	8003664 <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001786:	f000 f8bb 	bl	8001900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <MX_TIM4_Init+0x94>)
 8001798:	f001 fffe 	bl	8003798 <HAL_TIM_ConfigClockSource>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017a2:	f000 f8ad 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ae:	463b      	mov	r3, r7
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	@ (80017cc <MX_TIM4_Init+0x94>)
 80017b4:	f002 f9bc 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80017be:	f000 f89f 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200002ac 	.word	0x200002ac
 80017d0:	40000800 	.word	0x40000800

080017d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <MX_USART1_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_USART1_UART_Init+0x4c>)
 800180c:	f002 f9ee 	bl	8003bec <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001816:	f000 f873 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000200 	.word	0x20000200
 8001824:	40013800 	.word	0x40013800

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a2c      	ldr	r2, [pc, #176]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a26      	ldr	r2, [pc, #152]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a20      	ldr	r2, [pc, #128]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <MX_GPIO_Init+0xcc>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	21f0      	movs	r1, #240	@ 0xf0
 8001888:	481b      	ldr	r0, [pc, #108]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 800188a:	f000 fe26 	bl	80024da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001894:	4819      	ldr	r0, [pc, #100]	@ (80018fc <MX_GPIO_Init+0xd4>)
 8001896:	f000 fe20 	bl	80024da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 800189a:	230f      	movs	r3, #15
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	4619      	mov	r1, r3
 80018ac:	4812      	ldr	r0, [pc, #72]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 80018ae:	f000 fc79 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 80018b2:	23f0      	movs	r3, #240	@ 0xf0
 80018b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	480b      	ldr	r0, [pc, #44]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 80018ca:	f000 fc6b 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 80018ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018d4:	2311      	movs	r3, #17
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2302      	movs	r3, #2
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_GPIO_Init+0xd4>)
 80018e8:	f000 fc5c 	bl	80021a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010800 	.word	0x40010800
 80018fc:	40010c00 	.word	0x40010c00

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <Error_Handler+0x8>

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_MspInit+0x5c>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <HAL_MspInit+0x5c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_MspInit+0x5c>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_MspInit+0x5c>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <HAL_MspInit+0x5c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <HAL_MspInit+0x5c>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_MspInit+0x60>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_MspInit+0x60>)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000

08001970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a15      	ldr	r2, [pc, #84]	@ (80019e0 <HAL_I2C_MspInit+0x70>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d123      	bne.n	80019d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <HAL_I2C_MspInit+0x74>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a13      	ldr	r2, [pc, #76]	@ (80019e4 <HAL_I2C_MspInit+0x74>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <HAL_I2C_MspInit+0x74>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a8:	23c0      	movs	r3, #192	@ 0xc0
 80019aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4619      	mov	r1, r3
 80019ba:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <HAL_I2C_MspInit+0x78>)
 80019bc:	f000 fbf2 	bl	80021a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <HAL_I2C_MspInit+0x74>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	4a07      	ldr	r2, [pc, #28]	@ (80019e4 <HAL_I2C_MspInit+0x74>)
 80019c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ca:	61d3      	str	r3, [r2, #28]
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_I2C_MspInit+0x74>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010c00 	.word	0x40010c00

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a09      	ldr	r2, [pc, #36]	@ (8001a20 <HAL_TIM_Base_MspInit+0x34>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10b      	bne.n	8001a16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_TIM_Base_MspInit+0x38>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <HAL_TIM_Base_MspInit+0x38>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_TIM_Base_MspInit+0x38>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40000800 	.word	0x40000800
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <HAL_UART_MspInit+0x9c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d139      	bne.n	8001abc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a18      	ldr	r2, [pc, #96]	@ (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480f      	ldr	r0, [pc, #60]	@ (8001acc <HAL_UART_MspInit+0xa4>)
 8001a8e:	f000 fb89 	bl	80021a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4809      	ldr	r0, [pc, #36]	@ (8001acc <HAL_UART_MspInit+0xa4>)
 8001aa8:	f000 fb7c 	bl	80021a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2025      	movs	r0, #37	@ 0x25
 8001ab2:	f000 fa8e 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ab6:	2025      	movs	r0, #37	@ 0x25
 8001ab8:	f000 faa7 	bl	800200a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010800 	.word	0x40010800

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b20:	f000 f940 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <USART1_IRQHandler+0x10>)
 8001b2e:	f002 f95d 	bl	8003dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000200 	.word	0x20000200

08001b3c <_getpid>:
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	2301      	movs	r3, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <_kill>:
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
 8001b54:	f003 fca2 	bl	800549c <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2216      	movs	r2, #22
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_exit>:
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	f04f 31ff 	mov.w	r1, #4294967295
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffe7 	bl	8001b4a <_kill>
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <_exit+0x12>

08001b80 <_read>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00a      	b.n	8001ba8 <_read+0x28>
 8001b92:	f3af 8000 	nop.w
 8001b96:	4601      	mov	r1, r0
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	b2ca      	uxtb	r2, r1
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbf0      	blt.n	8001b92 <_read+0x12>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_write>:
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e009      	b.n	8001be0 <_write+0x26>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f3af 8000 	nop.w
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf1      	blt.n	8001bcc <_write+0x12>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_close>:
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <_fstat>:
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <_lseek>:
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	2300      	movs	r3, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
	...

08001c54 <_sbrk>:
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
 8001c84:	f003 fc0a 	bl	800549c <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20005000 	.word	0x20005000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	200002f4 	.word	0x200002f4
 8001cbc:	20000448 	.word	0x20000448

08001cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <Reset_Handler>:
 8001ccc:	f7ff fff8 	bl	8001cc0 <SystemInit>
 8001cd0:	480b      	ldr	r0, [pc, #44]	@ (8001d00 <LoopFillZerobss+0xe>)
 8001cd2:	490c      	ldr	r1, [pc, #48]	@ (8001d04 <LoopFillZerobss+0x12>)
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x16>)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:
 8001cda:	58d4      	ldr	r4, [r2, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:
 8001ce0:	18c4      	adds	r4, r0, r3
 8001ce2:	428c      	cmp	r4, r1
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
 8001ce6:	4a09      	ldr	r2, [pc, #36]	@ (8001d0c <LoopFillZerobss+0x1a>)
 8001ce8:	4c09      	ldr	r4, [pc, #36]	@ (8001d10 <LoopFillZerobss+0x1e>)
 8001cea:	2300      	movs	r3, #0
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:
 8001cf2:	42a2      	cmp	r2, r4
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>
 8001cf6:	f003 fbd7 	bl	80054a8 <__libc_init_array>
 8001cfa:	f7ff fc4f 	bl	800159c <main>
 8001cfe:	4770      	bx	lr
 8001d00:	20000000 	.word	0x20000000
 8001d04:	200001d8 	.word	0x200001d8
 8001d08:	08007950 	.word	0x08007950
 8001d0c:	200001d8 	.word	0x200001d8
 8001d10:	20000448 	.word	0x20000448

08001d14 <ADC1_2_IRQHandler>:
 8001d14:	e7fe      	b.n	8001d14 <ADC1_2_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_Init+0x28>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_Init+0x28>)
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 f947 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 f808 	bl	8001d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fdea 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_InitTick+0x54>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0x58>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f95f 	bl	8002026 <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00e      	b.n	8001d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d80a      	bhi.n	8001d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f000 f927 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d84:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_InitTick+0x5c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_IncTick+0x1c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a03      	ldr	r2, [pc, #12]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	200002f8 	.word	0x200002f8

08001dc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b02      	ldr	r3, [pc, #8]	@ (8001dd8 <HAL_GetTick+0x10>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	200002f8 	.word	0x200002f8

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff fff0 	bl	8001dc8 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_Delay+0x44>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffe0 	bl	8001dc8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000000c 	.word	0x2000000c

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4906      	ldr	r1, [pc, #24]	@ (8001ebc <__NVIC_EnableIRQ+0x34>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff90 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff2d 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff42 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff90 	bl	8001f14 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5f 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff35 	bl	8001e88 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d008      	beq.n	8002068 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e020      	b.n	80020aa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 020e 	bic.w	r2, r2, #14
 8002076:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d005      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2204      	movs	r2, #4
 80020d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e051      	b.n	800217c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020e 	bic.w	r2, r2, #14
 80020e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	@ (8002188 <HAL_DMA_Abort_IT+0xd4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d029      	beq.n	8002156 <HAL_DMA_Abort_IT+0xa2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	@ (800218c <HAL_DMA_Abort_IT+0xd8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMA_Abort_IT+0x9e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <HAL_DMA_Abort_IT+0xdc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01a      	beq.n	800214c <HAL_DMA_Abort_IT+0x98>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <HAL_DMA_Abort_IT+0xe0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d012      	beq.n	8002146 <HAL_DMA_Abort_IT+0x92>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_DMA_Abort_IT+0xe4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00a      	beq.n	8002140 <HAL_DMA_Abort_IT+0x8c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <HAL_DMA_Abort_IT+0xe8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d102      	bne.n	800213a <HAL_DMA_Abort_IT+0x86>
 8002134:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002138:	e00e      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 800213a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800213e:	e00b      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002140:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002144:	e008      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214a:	e005      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 800214c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002150:	e002      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002152:	2310      	movs	r3, #16
 8002154:	e000      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002156:	2301      	movs	r3, #1
 8002158:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <HAL_DMA_Abort_IT+0xec>)
 800215a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
    } 
  }
  return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40020008 	.word	0x40020008
 800218c:	4002001c 	.word	0x4002001c
 8002190:	40020030 	.word	0x40020030
 8002194:	40020044 	.word	0x40020044
 8002198:	40020058 	.word	0x40020058
 800219c:	4002006c 	.word	0x4002006c
 80021a0:	40020000 	.word	0x40020000

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b08b      	sub	sp, #44	@ 0x2c
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	e169      	b.n	800248c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b8:	2201      	movs	r2, #1
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8158 	bne.w	8002486 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a9a      	ldr	r2, [pc, #616]	@ (8002444 <HAL_GPIO_Init+0x2a0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d05e      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021e0:	4a98      	ldr	r2, [pc, #608]	@ (8002444 <HAL_GPIO_Init+0x2a0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d875      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021e6:	4a98      	ldr	r2, [pc, #608]	@ (8002448 <HAL_GPIO_Init+0x2a4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d058      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021ec:	4a96      	ldr	r2, [pc, #600]	@ (8002448 <HAL_GPIO_Init+0x2a4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d86f      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021f2:	4a96      	ldr	r2, [pc, #600]	@ (800244c <HAL_GPIO_Init+0x2a8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d052      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021f8:	4a94      	ldr	r2, [pc, #592]	@ (800244c <HAL_GPIO_Init+0x2a8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d869      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021fe:	4a94      	ldr	r2, [pc, #592]	@ (8002450 <HAL_GPIO_Init+0x2ac>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04c      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002204:	4a92      	ldr	r2, [pc, #584]	@ (8002450 <HAL_GPIO_Init+0x2ac>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d863      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800220a:	4a92      	ldr	r2, [pc, #584]	@ (8002454 <HAL_GPIO_Init+0x2b0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d046      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002210:	4a90      	ldr	r2, [pc, #576]	@ (8002454 <HAL_GPIO_Init+0x2b0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d85d      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 8002216:	2b12      	cmp	r3, #18
 8002218:	d82a      	bhi.n	8002270 <HAL_GPIO_Init+0xcc>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d859      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800221e:	a201      	add	r2, pc, #4	@ (adr r2, 8002224 <HAL_GPIO_Init+0x80>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	0800229f 	.word	0x0800229f
 8002228:	08002279 	.word	0x08002279
 800222c:	0800228b 	.word	0x0800228b
 8002230:	080022cd 	.word	0x080022cd
 8002234:	080022d3 	.word	0x080022d3
 8002238:	080022d3 	.word	0x080022d3
 800223c:	080022d3 	.word	0x080022d3
 8002240:	080022d3 	.word	0x080022d3
 8002244:	080022d3 	.word	0x080022d3
 8002248:	080022d3 	.word	0x080022d3
 800224c:	080022d3 	.word	0x080022d3
 8002250:	080022d3 	.word	0x080022d3
 8002254:	080022d3 	.word	0x080022d3
 8002258:	080022d3 	.word	0x080022d3
 800225c:	080022d3 	.word	0x080022d3
 8002260:	080022d3 	.word	0x080022d3
 8002264:	080022d3 	.word	0x080022d3
 8002268:	08002281 	.word	0x08002281
 800226c:	08002295 	.word	0x08002295
 8002270:	4a79      	ldr	r2, [pc, #484]	@ (8002458 <HAL_GPIO_Init+0x2b4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002276:	e02c      	b.n	80022d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e029      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	3304      	adds	r3, #4
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e024      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	3308      	adds	r3, #8
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e01f      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	330c      	adds	r3, #12
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e01a      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022a6:	2304      	movs	r3, #4
 80022a8:	623b      	str	r3, [r7, #32]
          break;
 80022aa:	e013      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	611a      	str	r2, [r3, #16]
          break;
 80022be:	e009      	b.n	80022d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c0:	2308      	movs	r3, #8
 80022c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	615a      	str	r2, [r3, #20]
          break;
 80022ca:	e003      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          break;
 80022d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2bff      	cmp	r3, #255	@ 0xff
 80022d8:	d801      	bhi.n	80022de <HAL_GPIO_Init+0x13a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_Init+0x13e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2bff      	cmp	r3, #255	@ 0xff
 80022e8:	d802      	bhi.n	80022f0 <HAL_GPIO_Init+0x14c>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x152>
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	3b08      	subs	r3, #8
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	210f      	movs	r1, #15
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80b1 	beq.w	8002486 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002324:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <HAL_GPIO_Init+0x2b8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a4c      	ldr	r2, [pc, #304]	@ (800245c <HAL_GPIO_Init+0x2b8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_GPIO_Init+0x2b8>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800233c:	4a48      	ldr	r2, [pc, #288]	@ (8002460 <HAL_GPIO_Init+0x2bc>)
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a40      	ldr	r2, [pc, #256]	@ (8002464 <HAL_GPIO_Init+0x2c0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <HAL_GPIO_Init+0x1ec>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3f      	ldr	r2, [pc, #252]	@ (8002468 <HAL_GPIO_Init+0x2c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00d      	beq.n	800238c <HAL_GPIO_Init+0x1e8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3e      	ldr	r2, [pc, #248]	@ (800246c <HAL_GPIO_Init+0x2c8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <HAL_GPIO_Init+0x1e4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3d      	ldr	r2, [pc, #244]	@ (8002470 <HAL_GPIO_Init+0x2cc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_GPIO_Init+0x1e0>
 8002380:	2303      	movs	r3, #3
 8002382:	e006      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 8002384:	2304      	movs	r3, #4
 8002386:	e004      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 8002388:	2302      	movs	r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 8002390:	2300      	movs	r3, #0
 8002392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002394:	f002 0203 	and.w	r2, r2, #3
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	4093      	lsls	r3, r2
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a2:	492f      	ldr	r1, [pc, #188]	@ (8002460 <HAL_GPIO_Init+0x2bc>)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	492c      	ldr	r1, [pc, #176]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4928      	ldr	r1, [pc, #160]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e4:	4b23      	ldr	r3, [pc, #140]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	4922      	ldr	r1, [pc, #136]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60cb      	str	r3, [r1, #12]
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	491e      	ldr	r1, [pc, #120]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800240c:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4918      	ldr	r1, [pc, #96]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	43db      	mvns	r3, r3
 8002422:	4914      	ldr	r1, [pc, #80]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 8002424:	4013      	ands	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d021      	beq.n	8002478 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002434:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	490e      	ldr	r1, [pc, #56]	@ (8002474 <HAL_GPIO_Init+0x2d0>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e021      	b.n	8002486 <HAL_GPIO_Init+0x2e2>
 8002442:	bf00      	nop
 8002444:	10320000 	.word	0x10320000
 8002448:	10310000 	.word	0x10310000
 800244c:	10220000 	.word	0x10220000
 8002450:	10210000 	.word	0x10210000
 8002454:	10120000 	.word	0x10120000
 8002458:	10110000 	.word	0x10110000
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000
 8002464:	40010800 	.word	0x40010800
 8002468:	40010c00 	.word	0x40010c00
 800246c:	40011000 	.word	0x40011000
 8002470:	40011400 	.word	0x40011400
 8002474:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_GPIO_Init+0x304>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	43db      	mvns	r3, r3
 8002480:	4909      	ldr	r1, [pc, #36]	@ (80024a8 <HAL_GPIO_Init+0x304>)
 8002482:	4013      	ands	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	3301      	adds	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	f47f ae8e 	bne.w	80021b8 <HAL_GPIO_Init+0x14>
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	372c      	adds	r7, #44	@ 0x2c
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e001      	b.n	80024ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	807b      	strh	r3, [r7, #2]
 80024e6:	4613      	mov	r3, r2
 80024e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ea:	787b      	ldrb	r3, [r7, #1]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024f6:	e003      	b.n	8002500 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	041a      	lsls	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	611a      	str	r2, [r3, #16]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
	...

0800250c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e12b      	b.n	8002776 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fa1c 	bl	8001970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2224      	movs	r2, #36	@ 0x24
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800255e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800256e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002570:	f001 f832 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8002574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a81      	ldr	r2, [pc, #516]	@ (8002780 <HAL_I2C_Init+0x274>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d807      	bhi.n	8002590 <HAL_I2C_Init+0x84>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a80      	ldr	r2, [pc, #512]	@ (8002784 <HAL_I2C_Init+0x278>)
 8002584:	4293      	cmp	r3, r2
 8002586:	bf94      	ite	ls
 8002588:	2301      	movls	r3, #1
 800258a:	2300      	movhi	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e006      	b.n	800259e <HAL_I2C_Init+0x92>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a7d      	ldr	r2, [pc, #500]	@ (8002788 <HAL_I2C_Init+0x27c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	bf94      	ite	ls
 8002598:	2301      	movls	r3, #1
 800259a:	2300      	movhi	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0e7      	b.n	8002776 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a78      	ldr	r2, [pc, #480]	@ (800278c <HAL_I2C_Init+0x280>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002780 <HAL_I2C_Init+0x274>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d802      	bhi.n	80025e0 <HAL_I2C_Init+0xd4>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	3301      	adds	r3, #1
 80025de:	e009      	b.n	80025f4 <HAL_I2C_Init+0xe8>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	4a69      	ldr	r2, [pc, #420]	@ (8002790 <HAL_I2C_Init+0x284>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	3301      	adds	r3, #1
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002606:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	495c      	ldr	r1, [pc, #368]	@ (8002780 <HAL_I2C_Init+0x274>)
 8002610:	428b      	cmp	r3, r1
 8002612:	d819      	bhi.n	8002648 <HAL_I2C_Init+0x13c>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e59      	subs	r1, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002622:	1c59      	adds	r1, r3, #1
 8002624:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002628:	400b      	ands	r3, r1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_I2C_Init+0x138>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e59      	subs	r1, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fbb1 f3f3 	udiv	r3, r1, r3
 800263c:	3301      	adds	r3, #1
 800263e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002642:	e051      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 8002644:	2304      	movs	r3, #4
 8002646:	e04f      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d111      	bne.n	8002674 <HAL_I2C_Init+0x168>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e58      	subs	r0, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e012      	b.n	800269a <HAL_I2C_Init+0x18e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1e58      	subs	r0, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	0099      	lsls	r1, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	fbb0 f3f3 	udiv	r3, r0, r3
 800268a:	3301      	adds	r3, #1
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Init+0x196>
 800269e:	2301      	movs	r3, #1
 80026a0:	e022      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10e      	bne.n	80026c8 <HAL_I2C_Init+0x1bc>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e58      	subs	r0, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	440b      	add	r3, r1
 80026b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026c6:	e00f      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	0099      	lsls	r1, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	6809      	ldr	r1, [r1, #0]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002716:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6911      	ldr	r1, [r2, #16]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68d2      	ldr	r2, [r2, #12]
 8002722:	4311      	orrs	r1, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	430b      	orrs	r3, r1
 800272a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	000186a0 	.word	0x000186a0
 8002784:	001e847f 	.word	0x001e847f
 8002788:	003d08ff 	.word	0x003d08ff
 800278c:	431bde83 	.word	0x431bde83
 8002790:	10624dd3 	.word	0x10624dd3

08002794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	460b      	mov	r3, r1
 80027a2:	817b      	strh	r3, [r7, #10]
 80027a4:	4613      	mov	r3, r2
 80027a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff fb0e 	bl	8001dc8 <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	f040 80e0 	bne.w	800297c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2319      	movs	r3, #25
 80027c2:	2201      	movs	r2, #1
 80027c4:	4970      	ldr	r1, [pc, #448]	@ (8002988 <HAL_I2C_Master_Transmit+0x1f4>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f964 	bl	8002a94 <I2C_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	e0d3      	b.n	800297e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x50>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0cc      	b.n	800297e <HAL_I2C_Master_Transmit+0x1ea>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d007      	beq.n	800280a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002818:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2221      	movs	r2, #33	@ 0x21
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2210      	movs	r2, #16
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a50      	ldr	r2, [pc, #320]	@ (800298c <HAL_I2C_Master_Transmit+0x1f8>)
 800284a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f89c 	bl	8002990 <I2C_MasterRequestWrite>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e08d      	b.n	800297e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002878:	e066      	b.n	8002948 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	6a39      	ldr	r1, [r7, #32]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fa22 	bl	8002cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	2b04      	cmp	r3, #4
 8002890:	d107      	bne.n	80028a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06b      	b.n	800297e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d11b      	bne.n	800291c <HAL_I2C_Master_Transmit+0x188>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	6a39      	ldr	r1, [r7, #32]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fa19 	bl	8002d58 <I2C_WaitOnBTFFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	2b04      	cmp	r3, #4
 8002932:	d107      	bne.n	8002944 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002942:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e01a      	b.n	800297e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d194      	bne.n	800287a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	00100002 	.word	0x00100002
 800298c:	ffff0000 	.word	0xffff0000

08002990 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	460b      	mov	r3, r1
 800299e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d006      	beq.n	80029ba <I2C_MasterRequestWrite+0x2a>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d003      	beq.n	80029ba <I2C_MasterRequestWrite+0x2a>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029b8:	d108      	bne.n	80029cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e00b      	b.n	80029e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	2b12      	cmp	r3, #18
 80029d2:	d107      	bne.n	80029e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f84f 	bl	8002a94 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0a:	d103      	bne.n	8002a14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e035      	b.n	8002a84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a20:	d108      	bne.n	8002a34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	e01b      	b.n	8002a6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a34:	897b      	ldrh	r3, [r7, #10]
 8002a36:	11db      	asrs	r3, r3, #7
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 0306 	and.w	r3, r3, #6
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f063 030f 	orn	r3, r3, #15
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	490e      	ldr	r1, [pc, #56]	@ (8002a8c <I2C_MasterRequestWrite+0xfc>)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f898 	bl	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e010      	b.n	8002a84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4907      	ldr	r1, [pc, #28]	@ (8002a90 <I2C_MasterRequestWrite+0x100>)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f888 	bl	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	00010008 	.word	0x00010008
 8002a90:	00010002 	.word	0x00010002

08002a94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa4:	e048      	b.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d044      	beq.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aae:	f7ff f98b 	bl	8001dc8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d139      	bne.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10d      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	e00c      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d116      	bne.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e023      	b.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d10d      	bne.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	e00c      	b.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d093      	beq.n	8002aa6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b96:	e071      	b.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba6:	d123      	bne.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f043 0204 	orr.w	r2, r3, #4
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e067      	b.n	8002cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf6:	d041      	beq.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf8:	f7ff f8e6 	bl	8001dc8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d302      	bcc.n	8002c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d136      	bne.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10c      	bne.n	8002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4013      	ands	r3, r2
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf14      	ite	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	2300      	moveq	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	e00b      	b.n	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e021      	b.n	8002cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10c      	bne.n	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e00b      	b.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4013      	ands	r3, r2
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f47f af6d 	bne.w	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd4:	e034      	b.n	8002d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f886 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e034      	b.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d028      	beq.n	8002d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7ff f86b 	bl	8001dc8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d11d      	bne.n	8002d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0e:	2b80      	cmp	r3, #128	@ 0x80
 8002d10:	d016      	beq.n	8002d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e007      	b.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	2b80      	cmp	r3, #128	@ 0x80
 8002d4c:	d1c3      	bne.n	8002cd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d64:	e034      	b.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f83e 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e034      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d028      	beq.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7ff f823 	bl	8001dc8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11d      	bne.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d016      	beq.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d1c3      	bne.n	8002d66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfe:	d11b      	bne.n	8002e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f043 0204 	orr.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_RCC_OscConfig>:
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x12>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e272      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8087 	beq.w	8002f72 <HAL_RCC_OscConfig+0x12e>
 8002e64:	4b92      	ldr	r3, [pc, #584]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d00c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x46>
 8002e70:	4b8f      	ldr	r3, [pc, #572]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d112      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x5e>
 8002e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x5e>
 8002e8a:	4b89      	ldr	r3, [pc, #548]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d06c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x12c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d168      	bne.n	8002f70 <HAL_RCC_OscConfig+0x12c>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e24c      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x76>
 8002eac:	4b80      	ldr	r3, [pc, #512]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a7f      	ldr	r2, [pc, #508]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	e02e      	b.n	8002f18 <HAL_RCC_OscConfig+0xd4>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x98>
 8002ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7a      	ldr	r2, [pc, #488]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b78      	ldr	r3, [pc, #480]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a77      	ldr	r2, [pc, #476]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e01d      	b.n	8002f18 <HAL_RCC_OscConfig+0xd4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0xbc>
 8002ee6:	4b72      	ldr	r3, [pc, #456]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a71      	ldr	r2, [pc, #452]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6e      	ldr	r2, [pc, #440]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0xd4>
 8002f00:	4b6b      	ldr	r3, [pc, #428]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6a      	ldr	r2, [pc, #424]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b68      	ldr	r3, [pc, #416]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a67      	ldr	r2, [pc, #412]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_RCC_OscConfig+0x104>
 8002f20:	f7fe ff52 	bl	8001dc8 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xf6>
 8002f28:	f7fe ff4e 	bl	8001dc8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	@ 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xf6>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e200      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0xe4>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x12e>
 8002f48:	f7fe ff3e 	bl	8001dc8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x11e>
 8002f50:	f7fe ff3a 	bl	8001dc8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x11e>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1ec      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8002f62:	4b53      	ldr	r3, [pc, #332]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x10c>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x12e>
 8002f70:	bf00      	nop
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d063      	beq.n	8003046 <HAL_RCC_OscConfig+0x202>
 8002f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x15e>
 8002f8a:	4b49      	ldr	r3, [pc, #292]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d11c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x18c>
 8002f96:	4b46      	ldr	r3, [pc, #280]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x18c>
 8002fa2:	4b43      	ldr	r3, [pc, #268]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x176>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x176>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1c0      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8002fba:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4939      	ldr	r1, [pc, #228]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	e03a      	b.n	8003046 <HAL_RCC_OscConfig+0x202>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_OscConfig+0x1d6>
 8002fd8:	4b36      	ldr	r3, [pc, #216]	@ (80030b4 <HAL_RCC_OscConfig+0x270>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f7fe fef3 	bl	8001dc8 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1b4>
 8002fe6:	f7fe feef 	bl	8001dc8 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x1b4>
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1a1      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1a2>
 8003004:	4b2a      	ldr	r3, [pc, #168]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4927      	ldr	r1, [pc, #156]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x202>
 800301a:	4b26      	ldr	r3, [pc, #152]	@ (80030b4 <HAL_RCC_OscConfig+0x270>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f7fe fed2 	bl	8001dc8 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x1f6>
 8003028:	f7fe fece 	bl	8001dc8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x1f6>
 8003036:	2303      	movs	r3, #3
 8003038:	e180      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 800303a:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x1e4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d03a      	beq.n	80030c8 <HAL_RCC_OscConfig+0x284>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d019      	beq.n	800308e <HAL_RCC_OscConfig+0x24a>
 800305a:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <HAL_RCC_OscConfig+0x274>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f7fe feb2 	bl	8001dc8 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x236>
 8003068:	f7fe feae 	bl	8001dc8 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x236>
 8003076:	2303      	movs	r3, #3
 8003078:	e160      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x224>
 8003086:	2001      	movs	r0, #1
 8003088:	f000 face 	bl	8003628 <RCC_Delay>
 800308c:	e01c      	b.n	80030c8 <HAL_RCC_OscConfig+0x284>
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_RCC_OscConfig+0x274>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f7fe fe98 	bl	8001dc8 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]
 800309a:	e00f      	b.n	80030bc <HAL_RCC_OscConfig+0x278>
 800309c:	f7fe fe94 	bl	8001dc8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d908      	bls.n	80030bc <HAL_RCC_OscConfig+0x278>
 80030aa:	2303      	movs	r3, #3
 80030ac:	e146      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	42420000 	.word	0x42420000
 80030b8:	42420480 	.word	0x42420480
 80030bc:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e9      	bne.n	800309c <HAL_RCC_OscConfig+0x258>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a6 	beq.w	8003222 <HAL_RCC_OscConfig+0x3de>
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
 80030da:	4b8b      	ldr	r3, [pc, #556]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_RCC_OscConfig+0x2be>
 80030e6:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a87      	ldr	r2, [pc, #540]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	61d3      	str	r3, [r2, #28]
 80030f2:	4b85      	ldr	r3, [pc, #532]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
 8003102:	4b82      	ldr	r3, [pc, #520]	@ (800330c <HAL_RCC_OscConfig+0x4c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x2fc>
 800310e:	4b7f      	ldr	r3, [pc, #508]	@ (800330c <HAL_RCC_OscConfig+0x4c8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7e      	ldr	r2, [pc, #504]	@ (800330c <HAL_RCC_OscConfig+0x4c8>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	f7fe fe55 	bl	8001dc8 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2f0>
 8003122:	f7fe fe51 	bl	8001dc8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b64      	cmp	r3, #100	@ 0x64
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2f0>
 8003130:	2303      	movs	r3, #3
 8003132:	e103      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8003134:	4b75      	ldr	r3, [pc, #468]	@ (800330c <HAL_RCC_OscConfig+0x4c8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2de>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x312>
 8003148:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e02d      	b.n	80031b2 <HAL_RCC_OscConfig+0x36e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x334>
 800315e:	4b6a      	ldr	r3, [pc, #424]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a69      	ldr	r2, [pc, #420]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	4b67      	ldr	r3, [pc, #412]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a66      	ldr	r2, [pc, #408]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6213      	str	r3, [r2, #32]
 8003176:	e01c      	b.n	80031b2 <HAL_RCC_OscConfig+0x36e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d10c      	bne.n	800319a <HAL_RCC_OscConfig+0x356>
 8003180:	4b61      	ldr	r3, [pc, #388]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a60      	ldr	r2, [pc, #384]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	4b5e      	ldr	r3, [pc, #376]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a5d      	ldr	r2, [pc, #372]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e00b      	b.n	80031b2 <HAL_RCC_OscConfig+0x36e>
 800319a:	4b5b      	ldr	r3, [pc, #364]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a5a      	ldr	r2, [pc, #360]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	4b58      	ldr	r3, [pc, #352]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a57      	ldr	r2, [pc, #348]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d015      	beq.n	80031e6 <HAL_RCC_OscConfig+0x3a2>
 80031ba:	f7fe fe05 	bl	8001dc8 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x394>
 80031c2:	f7fe fe01 	bl	8001dc8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x394>
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0b1      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 80031d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ee      	beq.n	80031c2 <HAL_RCC_OscConfig+0x37e>
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x3cc>
 80031e6:	f7fe fdef 	bl	8001dc8 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x3c0>
 80031ee:	f7fe fdeb 	bl	8001dc8 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x3c0>
 8003200:	2303      	movs	r3, #3
 8003202:	e09b      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8003204:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ee      	bne.n	80031ee <HAL_RCC_OscConfig+0x3aa>
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x3de>
 8003216:	4b3c      	ldr	r3, [pc, #240]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4a3b      	ldr	r2, [pc, #236]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003220:	61d3      	str	r3, [r2, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8087 	beq.w	800333a <HAL_RCC_OscConfig+0x4f6>
 800322c:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d061      	beq.n	80032fc <HAL_RCC_OscConfig+0x4b8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d146      	bne.n	80032ce <HAL_RCC_OscConfig+0x48a>
 8003240:	4b33      	ldr	r3, [pc, #204]	@ (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f7fe fdbf 	bl	8001dc8 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x41c>
 800324e:	f7fe fdbb 	bl	8001dc8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x41c>
 800325c:	2303      	movs	r3, #3
 800325e:	e06d      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8003260:	4b29      	ldr	r3, [pc, #164]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x40a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d108      	bne.n	8003288 <HAL_RCC_OscConfig+0x444>
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	4921      	ldr	r1, [pc, #132]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a19      	ldr	r1, [r3, #32]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	430b      	orrs	r3, r1
 800329a:	491b      	ldr	r1, [pc, #108]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f7fe fd8f 	bl	8001dc8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x47c>
 80032ae:	f7fe fd8b 	bl	8001dc8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x47c>
 80032bc:	2303      	movs	r3, #3
 80032be:	e03d      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 80032c0:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x46a>
 80032cc:	e035      	b.n	800333a <HAL_RCC_OscConfig+0x4f6>
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f7fe fd78 	bl	8001dc8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x4aa>
 80032dc:	f7fe fd74 	bl	8001dc8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x4aa>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e026      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x498>
 80032fa:	e01e      	b.n	800333a <HAL_RCC_OscConfig+0x4f6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x4d0>
 8003304:	2301      	movs	r3, #1
 8003306:	e019      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
 8003310:	42420060 	.word	0x42420060
 8003314:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <HAL_RCC_OscConfig+0x500>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	429a      	cmp	r2, r3
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x4f2>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x4f6>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x4f8>
 800333a:	2300      	movs	r3, #0
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000

08003348 <HAL_RCC_ClockConfig>:
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
 8003358:	2301      	movs	r3, #1
 800335a:	e0d0      	b.n	80034fe <HAL_RCC_ClockConfig+0x1b6>
 800335c:	4b6a      	ldr	r3, [pc, #424]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d910      	bls.n	800338c <HAL_RCC_ClockConfig+0x44>
 800336a:	4b67      	ldr	r3, [pc, #412]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 0207 	bic.w	r2, r3, #7
 8003372:	4965      	ldr	r1, [pc, #404]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
 800337a:	4b63      	ldr	r3, [pc, #396]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x44>
 8003388:	2301      	movs	r3, #1
 800338a:	e0b8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1b6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_ClockConfig+0x92>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x68>
 80033a4:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a58      	ldr	r2, [pc, #352]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ae:	6053      	str	r3, [r2, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x80>
 80033bc:	4b53      	ldr	r3, [pc, #332]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a52      	ldr	r2, [pc, #328]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033c6:	6053      	str	r3, [r2, #4]
 80033c8:	4b50      	ldr	r3, [pc, #320]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	494d      	ldr	r1, [pc, #308]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d040      	beq.n	8003468 <HAL_RCC_ClockConfig+0x120>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xb6>
 80033ee:	4b47      	ldr	r3, [pc, #284]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d115      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1b6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xce>
 8003406:	4b41      	ldr	r3, [pc, #260]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
 8003412:	2301      	movs	r3, #1
 8003414:	e073      	b.n	80034fe <HAL_RCC_ClockConfig+0x1b6>
 8003416:	4b3d      	ldr	r3, [pc, #244]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <HAL_RCC_ClockConfig+0x1b6>
 8003426:	4b39      	ldr	r3, [pc, #228]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4936      	ldr	r1, [pc, #216]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
 8003438:	f7fe fcc6 	bl	8001dc8 <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	e00a      	b.n	8003456 <HAL_RCC_ClockConfig+0x10e>
 8003440:	f7fe fcc2 	bl	8001dc8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x10e>
 8003452:	2303      	movs	r3, #3
 8003454:	e053      	b.n	80034fe <HAL_RCC_ClockConfig+0x1b6>
 8003456:	4b2d      	ldr	r3, [pc, #180]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 020c 	and.w	r2, r3, #12
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	429a      	cmp	r2, r3
 8003466:	d1eb      	bne.n	8003440 <HAL_RCC_ClockConfig+0xf8>
 8003468:	4b27      	ldr	r3, [pc, #156]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d210      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x150>
 8003476:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	4922      	ldr	r1, [pc, #136]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
 8003486:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x150>
 8003494:	2301      	movs	r3, #1
 8003496:	e032      	b.n	80034fe <HAL_RCC_ClockConfig+0x1b6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x16e>
 80034a4:	4b19      	ldr	r3, [pc, #100]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4916      	ldr	r1, [pc, #88]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x18e>
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490e      	ldr	r1, [pc, #56]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
 80034d6:	f000 f821 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	@ (8003510 <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a09      	ldr	r2, [pc, #36]	@ (8003514 <HAL_RCC_ClockConfig+0x1cc>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <HAL_RCC_ClockConfig+0x1d0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fc24 	bl	8001d44 <HAL_InitTick>
 80034fc:	2300      	movs	r3, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40022000 	.word	0x40022000
 800350c:	40021000 	.word	0x40021000
 8003510:	080075a8 	.word	0x080075a8
 8003514:	20000004 	.word	0x20000004
 8003518:	20000008 	.word	0x20000008

0800351c <HAL_RCC_GetSysClockFreq>:
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	4b1e      	ldr	r3, [pc, #120]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b04      	cmp	r3, #4
 8003544:	d002      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x30>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d003      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x36>
 800354a:	e027      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x80>
 800354c:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	e027      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x86>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	0c9b      	lsrs	r3, r3, #18
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800355c:	5cd3      	ldrb	r3, [r2, r3]
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x70>
 800356a:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	0c5b      	lsrs	r3, r3, #17
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	4a11      	ldr	r2, [pc, #68]	@ (80035bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003576:	5cd3      	ldrb	r3, [r2, r3]
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a0d      	ldr	r2, [pc, #52]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800357e:	fb03 f202 	mul.w	r2, r3, r2
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e004      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x7a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a0c      	ldr	r2, [pc, #48]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x86>
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	bf00      	nop
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4618      	mov	r0, r3
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	007a1200 	.word	0x007a1200
 80035b8:	080075c0 	.word	0x080075c0
 80035bc:	080075d0 	.word	0x080075d0
 80035c0:	003d0900 	.word	0x003d0900

080035c4 <HAL_RCC_GetHCLKFreq>:
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4b02      	ldr	r3, [pc, #8]	@ (80035d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	20000004 	.word	0x20000004

080035d8 <HAL_RCC_GetPCLK1Freq>:
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
 80035dc:	f7ff fff2 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	080075b8 	.word	0x080075b8

08003600 <HAL_RCC_GetPCLK2Freq>:
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
 8003604:	f7ff ffde 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	0adb      	lsrs	r3, r3, #11
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4903      	ldr	r1, [pc, #12]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	080075b8 	.word	0x080075b8

08003628 <RCC_Delay>:
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <RCC_Delay+0x34>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <RCC_Delay+0x38>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	0a5b      	lsrs	r3, r3, #9
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	bf00      	nop
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1e5a      	subs	r2, r3, #1
 800364a:	60fa      	str	r2, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <RCC_Delay+0x1c>
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	20000004 	.word	0x20000004
 8003660:	10624dd3 	.word	0x10624dd3

08003664 <HAL_TIM_Base_Init>:
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_TIM_Base_Init+0x12>
 8003672:	2301      	movs	r3, #1
 8003674:	e041      	b.n	80036fa <HAL_TIM_Base_Init+0x96>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_TIM_Base_Init+0x2c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe f9ae 	bl	80019ec <HAL_TIM_Base_MspInit>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 f940 	bl	8003928 <TIM_Base_SetConfig>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036f8:	2300      	movs	r3, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_TIM_Base_Start>:
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d001      	beq.n	800371c <HAL_TIM_Base_Start+0x18>
 8003718:	2301      	movs	r3, #1
 800371a:	e032      	b.n	8003782 <HAL_TIM_Base_Start+0x7e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <HAL_TIM_Base_Start+0x88>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_Base_Start+0x48>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003736:	d009      	beq.n	800374c <HAL_TIM_Base_Start+0x48>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a14      	ldr	r2, [pc, #80]	@ (8003790 <HAL_TIM_Base_Start+0x8c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_Base_Start+0x48>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a13      	ldr	r2, [pc, #76]	@ (8003794 <HAL_TIM_Base_Start+0x90>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_TIM_Base_Start+0x6c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d010      	beq.n	8003780 <HAL_TIM_Base_Start+0x7c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e007      	b.n	8003780 <HAL_TIM_Base_Start+0x7c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	2300      	movs	r3, #0
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800

08003798 <HAL_TIM_ConfigClockSource>:
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_TIM_ConfigClockSource+0x1c>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e0b4      	b.n	800391e <HAL_TIM_ConfigClockSource+0x186>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ec:	d03e      	beq.n	800386c <HAL_TIM_ConfigClockSource+0xd4>
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f2:	f200 8087 	bhi.w	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fa:	f000 8086 	beq.w	800390a <HAL_TIM_ConfigClockSource+0x172>
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003802:	d87f      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b70      	cmp	r3, #112	@ 0x70
 8003806:	d01a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0xa6>
 8003808:	2b70      	cmp	r3, #112	@ 0x70
 800380a:	d87b      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b60      	cmp	r3, #96	@ 0x60
 800380e:	d050      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003810:	2b60      	cmp	r3, #96	@ 0x60
 8003812:	d877      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b50      	cmp	r3, #80	@ 0x50
 8003816:	d03c      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0xfa>
 8003818:	2b50      	cmp	r3, #80	@ 0x50
 800381a:	d873      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d058      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d86f      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b30      	cmp	r3, #48	@ 0x30
 8003826:	d064      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b30      	cmp	r3, #48	@ 0x30
 800382a:	d86b      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d060      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003830:	2b20      	cmp	r3, #32
 8003832:	d867      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d05c      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003838:	2b10      	cmp	r3, #16
 800383a:	d05a      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	e062      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x16c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f000 f950 	bl	8003af2 <TIM_ETR_SetConfig>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	e04f      	b.n	800390c <HAL_TIM_ConfigClockSource+0x174>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f000 f939 	bl	8003af2 <TIM_ETR_SetConfig>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	e03c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x174>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 f8b0 	bl	8003a04 <TIM_TI1_ConfigInputStage>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2150      	movs	r1, #80	@ 0x50
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f907 	bl	8003abe <TIM_ITRx_SetConfig>
 80038b0:	e02c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x174>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	461a      	mov	r2, r3
 80038c0:	f000 f8ce 	bl	8003a60 <TIM_TI2_ConfigInputStage>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2160      	movs	r1, #96	@ 0x60
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f8f7 	bl	8003abe <TIM_ITRx_SetConfig>
 80038d0:	e01c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x174>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 f890 	bl	8003a04 <TIM_TI1_ConfigInputStage>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2140      	movs	r1, #64	@ 0x40
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f8e7 	bl	8003abe <TIM_ITRx_SetConfig>
 80038f0:	e00c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x174>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 f8de 	bl	8003abe <TIM_ITRx_SetConfig>
 8003902:	e003      	b.n	800390c <HAL_TIM_ConfigClockSource+0x174>
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e000      	b.n	800390c <HAL_TIM_ConfigClockSource+0x174>
 800390a:	bf00      	nop
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <TIM_Base_SetConfig>:
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a2f      	ldr	r2, [pc, #188]	@ (80039f8 <TIM_Base_SetConfig+0xd0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00b      	beq.n	8003958 <TIM_Base_SetConfig+0x30>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0x30>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2c      	ldr	r2, [pc, #176]	@ (80039fc <TIM_Base_SetConfig+0xd4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0x30>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a2b      	ldr	r2, [pc, #172]	@ (8003a00 <TIM_Base_SetConfig+0xd8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d108      	bne.n	800396a <TIM_Base_SetConfig+0x42>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a22      	ldr	r2, [pc, #136]	@ (80039f8 <TIM_Base_SetConfig+0xd0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00b      	beq.n	800398a <TIM_Base_SetConfig+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003978:	d007      	beq.n	800398a <TIM_Base_SetConfig+0x62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a1f      	ldr	r2, [pc, #124]	@ (80039fc <TIM_Base_SetConfig+0xd4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <TIM_Base_SetConfig+0x62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <TIM_Base_SetConfig+0xd8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d108      	bne.n	800399c <TIM_Base_SetConfig+0x74>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	629a      	str	r2, [r3, #40]	@ 0x28
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a0d      	ldr	r2, [pc, #52]	@ (80039f8 <TIM_Base_SetConfig+0xd0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d103      	bne.n	80039d0 <TIM_Base_SetConfig+0xa8>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	615a      	str	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <TIM_Base_SetConfig+0xc6>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800

08003a04 <TIM_TI1_ConfigInputStage>:
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 030a 	bic.w	r3, r3, #10
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	619a      	str	r2, [r3, #24]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <TIM_TI2_ConfigInputStage>:
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	031b      	lsls	r3, r3, #12
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	619a      	str	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <TIM_ITRx_SetConfig>:
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <TIM_ETR_SetConfig>:
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e046      	b.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b94:	d009      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a10      	ldr	r2, [pc, #64]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800

08003bec <HAL_UART_Init>:
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e042      	b.n	8003c84 <HAL_UART_Init+0x98>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x2c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd ff08 	bl	8001a28 <HAL_UART_MspInit>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	@ 0x24
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fdb7 	bl	80047a4 <UART_SetConfig>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c44:	611a      	str	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c54:	615a      	str	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c82:	2300      	movs	r3, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_UART_Transmit>:
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	80fb      	strh	r3, [r7, #6]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d175      	bne.n	8003d98 <HAL_UART_Transmit+0x10c>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_UART_Transmit+0x2c>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_Transmit+0x30>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e06e      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2221      	movs	r2, #33	@ 0x21
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cca:	f7fe f87d 	bl	8001dc8 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	88fa      	ldrh	r2, [r7, #6]
 8003cda:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce4:	d108      	bne.n	8003cf8 <HAL_UART_Transmit+0x6c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <HAL_UART_Transmit+0x6c>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e003      	b.n	8003d00 <HAL_UART_Transmit+0x74>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e02e      	b.n	8003d60 <HAL_UART_Transmit+0xd4>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2180      	movs	r1, #128	@ 0x80
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fb1c 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_Transmit+0x98>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d20:	2303      	movs	r3, #3
 8003d22:	e03a      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <HAL_UART_Transmit+0xb6>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e007      	b.n	8003d52 <HAL_UART_Transmit+0xc6>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1cb      	bne.n	8003d02 <HAL_UART_Transmit+0x76>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2140      	movs	r1, #64	@ 0x40
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fae8 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_UART_Transmit+0x100>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e006      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Receive_IT>:
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	4613      	mov	r3, r2
 8003dae:	80fb      	strh	r3, [r7, #6]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d112      	bne.n	8003de2 <HAL_UART_Receive_IT+0x40>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_UART_Receive_IT+0x26>
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Receive_IT+0x2a>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e00b      	b.n	8003de4 <HAL_UART_Receive_IT+0x42>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fb0f 	bl	80043fc <UART_Start_Receive_IT>
 8003dde:	4603      	mov	r3, r0
 8003de0:	e000      	b.n	8003de4 <HAL_UART_Receive_IT+0x42>
 8003de2:	2302      	movs	r3, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_UART_IRQHandler>:
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b0ba      	sub	sp, #232	@ 0xe8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <HAL_UART_IRQHandler+0x66>
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_UART_IRQHandler+0x66>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_UART_IRQHandler+0x66>
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fbec 	bl	8004628 <UART_Receive_IT>
 8003e50:	e25b      	b.n	800430a <HAL_UART_IRQHandler+0x51e>
 8003e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80de 	beq.w	8004018 <HAL_UART_IRQHandler+0x22c>
 8003e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_UART_IRQHandler+0x8a>
 8003e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80d1 	beq.w	8004018 <HAL_UART_IRQHandler+0x22c>
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_UART_IRQHandler+0xae>
 8003e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0xae>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_UART_IRQHandler+0xd2>
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0xd2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xf6>
 8003eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xf6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f043 0204 	orr.w	r2, r3, #4
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <HAL_UART_IRQHandler+0x126>
 8003eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_UART_IRQHandler+0x11a>
 8003efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0x126>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f043 0208 	orr.w	r2, r3, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 81f2 	beq.w	8004300 <HAL_UART_IRQHandler+0x514>
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_UART_IRQHandler+0x14e>
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_IRQHandler+0x14e>
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb77 	bl	8004628 <UART_Receive_IT>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_UART_IRQHandler+0x17a>
 8003f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d04f      	beq.n	8004006 <HAL_UART_IRQHandler+0x21a>
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa81 	bl	800446e <UART_EndRxTransfer>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d041      	beq.n	8003ffe <HAL_UART_IRQHandler+0x212>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3314      	adds	r3, #20
 8003f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1d9      	bne.n	8003f7a <HAL_UART_IRQHandler+0x18e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d013      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x20a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80041cc <HAL_UART_IRQHandler+0x3e0>)
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe f86a 	bl	80020b4 <HAL_DMA_Abort_IT>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_UART_IRQHandler+0x228>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4798      	blx	r3
 8003ff4:	e00e      	b.n	8004014 <HAL_UART_IRQHandler+0x228>
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f993 	bl	8004322 <HAL_UART_ErrorCallback>
 8003ffc:	e00a      	b.n	8004014 <HAL_UART_IRQHandler+0x228>
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f98f 	bl	8004322 <HAL_UART_ErrorCallback>
 8004004:	e006      	b.n	8004014 <HAL_UART_IRQHandler+0x228>
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f98b 	bl	8004322 <HAL_UART_ErrorCallback>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	645a      	str	r2, [r3, #68]	@ 0x44
 8004012:	e175      	b.n	8004300 <HAL_UART_IRQHandler+0x514>
 8004014:	bf00      	nop
 8004016:	e173      	b.n	8004300 <HAL_UART_IRQHandler+0x514>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	2b01      	cmp	r3, #1
 800401e:	f040 814f 	bne.w	80042c0 <HAL_UART_IRQHandler+0x4d4>
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8148 	beq.w	80042c0 <HAL_UART_IRQHandler+0x4d4>
 8004030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8141 	beq.w	80042c0 <HAL_UART_IRQHandler+0x4d4>
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80b6 	beq.w	80041d0 <HAL_UART_IRQHandler+0x3e4>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8004070:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8145 	beq.w	8004304 <HAL_UART_IRQHandler+0x518>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800407e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004082:	429a      	cmp	r2, r3
 8004084:	f080 813e 	bcs.w	8004304 <HAL_UART_IRQHandler+0x518>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800408e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b20      	cmp	r3, #32
 8004098:	f000 8088 	beq.w	80041ac <HAL_UART_IRQHandler+0x3c0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1d9      	bne.n	800409c <HAL_UART_IRQHandler+0x2b0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80040f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80040f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800410c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004110:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004112:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004114:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800411e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e1      	bne.n	80040e8 <HAL_UART_IRQHandler+0x2fc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	663b      	str	r3, [r7, #96]	@ 0x60
 800412c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800413a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3314      	adds	r3, #20
 8004144:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004148:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800414a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800414c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800414e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	667b      	str	r3, [r7, #100]	@ 0x64
 8004156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e3      	bne.n	8004124 <HAL_UART_IRQHandler+0x338>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800417c:	f023 0310 	bic.w	r3, r3, #16
 8004180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800418e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004190:	657b      	str	r3, [r7, #84]	@ 0x54
 8004192:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	653b      	str	r3, [r7, #80]	@ 0x50
 800419c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e3      	bne.n	800416a <HAL_UART_IRQHandler+0x37e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd ff49 	bl	800203e <HAL_DMA_Abort>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8b6 	bl	8004334 <HAL_UARTEx_RxEventCallback>
 80041c8:	e09c      	b.n	8004304 <HAL_UART_IRQHandler+0x518>
 80041ca:	bf00      	nop
 80041cc:	08004533 	.word	0x08004533
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 808e 	beq.w	8004308 <HAL_UART_IRQHandler+0x51c>
 80041ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8089 	beq.w	8004308 <HAL_UART_IRQHandler+0x51c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800420c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800421a:	647a      	str	r2, [r7, #68]	@ 0x44
 800421c:	643b      	str	r3, [r7, #64]	@ 0x40
 800421e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e3      	bne.n	80041f6 <HAL_UART_IRQHandler+0x40a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3314      	adds	r3, #20
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004252:	633a      	str	r2, [r7, #48]	@ 0x30
 8004254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e3      	bne.n	800422e <HAL_UART_IRQHandler+0x442>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0310 	bic.w	r3, r3, #16
 800428a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004298:	61fa      	str	r2, [r7, #28]
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e3      	bne.n	8004274 <HAL_UART_IRQHandler+0x488>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80042b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f83b 	bl	8004334 <HAL_UARTEx_RxEventCallback>
 80042be:	e023      	b.n	8004308 <HAL_UART_IRQHandler+0x51c>
 80042c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <HAL_UART_IRQHandler+0x4f4>
 80042cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_UART_IRQHandler+0x4f4>
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f93e 	bl	800455a <UART_Transmit_IT>
 80042de:	e014      	b.n	800430a <HAL_UART_IRQHandler+0x51e>
 80042e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00e      	beq.n	800430a <HAL_UART_IRQHandler+0x51e>
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_UART_IRQHandler+0x51e>
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f97d 	bl	80045f8 <UART_EndTransmit_IT>
 80042fe:	e004      	b.n	800430a <HAL_UART_IRQHandler+0x51e>
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <HAL_UART_IRQHandler+0x51e>
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <HAL_UART_IRQHandler+0x51e>
 8004308:	bf00      	nop
 800430a:	37e8      	adds	r7, #232	@ 0xe8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_TxCpltCallback>:
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <HAL_UART_ErrorCallback>:
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <HAL_UARTEx_RxEventCallback>:
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <UART_WaitOnFlagUntilTimeout>:
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	71fb      	strb	r3, [r7, #7]
 800435a:	e03b      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d037      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004364:	f7fd fd30 	bl	8001dc8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <UART_WaitOnFlagUntilTimeout+0x30>
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x34>
 800437a:	2303      	movs	r3, #3
 800437c:	e03a      	b.n	80043f4 <UART_WaitOnFlagUntilTimeout+0xaa>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d023      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b80      	cmp	r3, #128	@ 0x80
 8004390:	d020      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b40      	cmp	r3, #64	@ 0x40
 8004396:	d01d      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d116      	bne.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f856 	bl	800446e <UART_EndRxTransfer>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2208      	movs	r2, #8
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d0:	2301      	movs	r3, #1
 80043d2:	e00f      	b.n	80043f4 <UART_WaitOnFlagUntilTimeout+0xaa>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4013      	ands	r3, r2
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d0b4      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0x12>
 80043f2:	2300      	movs	r3, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <UART_Start_Receive_IT>:
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	88fa      	ldrh	r2, [r7, #6]
 800441a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	645a      	str	r2, [r3, #68]	@ 0x44
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2222      	movs	r2, #34	@ 0x22
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <UART_Start_Receive_IT+0x46>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	615a      	str	r2, [r3, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0220 	orr.w	r2, r2, #32
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	2300      	movs	r3, #0
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <UART_EndRxTransfer>:
 800446e:	b480      	push	{r7}
 8004470:	b095      	sub	sp, #84	@ 0x54
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	637b      	str	r3, [r7, #52]	@ 0x34
 800447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800448c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004496:	643a      	str	r2, [r7, #64]	@ 0x40
 8004498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800449a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800449c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e5      	bne.n	8004476 <UART_EndRxTransfer+0x8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <UART_EndRxTransfer+0x3c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d119      	bne.n	800451a <UART_EndRxTransfer+0xac>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f023 0310 	bic.w	r3, r3, #16
 80044fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004506:	61ba      	str	r2, [r7, #24]
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <UART_EndRxTransfer+0x78>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
 8004528:	bf00      	nop
 800452a:	3754      	adds	r7, #84	@ 0x54
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <UART_DMAAbortOnError>:
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	84da      	strh	r2, [r3, #38]	@ 0x26
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fee8 	bl	8004322 <HAL_UART_ErrorCallback>
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <UART_Transmit_IT>:
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b21      	cmp	r3, #33	@ 0x21
 800456c:	d13e      	bne.n	80045ec <UART_Transmit_IT+0x92>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004576:	d114      	bne.n	80045a2 <UART_Transmit_IT+0x48>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d110      	bne.n	80045a2 <UART_Transmit_IT+0x48>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]
 80045a0:	e008      	b.n	80045b4 <UART_Transmit_IT+0x5a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	1c59      	adds	r1, r3, #1
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6211      	str	r1, [r2, #32]
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4619      	mov	r1, r3
 80045c2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10f      	bne.n	80045e8 <UART_Transmit_IT+0x8e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045d6:	60da      	str	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <UART_Transmit_IT+0x94>
 80045ec:	2302      	movs	r3, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr

080045f8 <UART_EndTransmit_IT>:
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fe79 	bl	8004310 <HAL_UART_TxCpltCallback>
 800461e:	2300      	movs	r3, #0
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_Receive_IT>:
 8004628:	b580      	push	{r7, lr}
 800462a:	b08c      	sub	sp, #48	@ 0x30
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b22      	cmp	r3, #34	@ 0x22
 800463a:	f040 80ae 	bne.w	800479a <UART_Receive_IT+0x172>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004646:	d117      	bne.n	8004678 <UART_Receive_IT+0x50>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d113      	bne.n	8004678 <UART_Receive_IT+0x50>
 8004650:	2300      	movs	r3, #0
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	b29a      	uxth	r2, r3
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	629a      	str	r2, [r3, #40]	@ 0x28
 8004676:	e026      	b.n	80046c6 <UART_Receive_IT+0x9e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800467e:	2300      	movs	r3, #0
 8004680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468a:	d007      	beq.n	800469c <UART_Receive_IT+0x74>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <UART_Receive_IT+0x82>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d106      	bne.n	80046aa <UART_Receive_IT+0x82>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e008      	b.n	80046bc <UART_Receive_IT+0x94>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4619      	mov	r1, r3
 80046d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d15d      	bne.n	8004796 <UART_Receive_IT+0x16e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0220 	bic.w	r2, r2, #32
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	615a      	str	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	635a      	str	r2, [r3, #52]	@ 0x34
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	2b01      	cmp	r3, #1
 800471e:	d135      	bne.n	800478c <UART_Receive_IT+0x164>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f023 0310 	bic.w	r3, r3, #16
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004746:	623a      	str	r2, [r7, #32]
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	69f9      	ldr	r1, [r7, #28]
 800474c:	6a3a      	ldr	r2, [r7, #32]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_Receive_IT+0xfe>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d10a      	bne.n	800477e <UART_Receive_IT+0x156>
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004782:	4619      	mov	r1, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fdd5 	bl	8004334 <HAL_UARTEx_RxEventCallback>
 800478a:	e002      	b.n	8004792 <UART_Receive_IT+0x16a>
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fc ff49 	bl	8001624 <HAL_UART_RxCpltCallback>
 8004792:	2300      	movs	r3, #0
 8004794:	e002      	b.n	800479c <UART_Receive_IT+0x174>
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <UART_Receive_IT+0x174>
 800479a:	2302      	movs	r3, #2
 800479c:	4618      	mov	r0, r3
 800479e:	3730      	adds	r7, #48	@ 0x30
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_SetConfig>:
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	611a      	str	r2, [r3, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047de:	f023 030c 	bic.w	r3, r3, #12
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	60d3      	str	r3, [r2, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	615a      	str	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2c      	ldr	r2, [pc, #176]	@ (80048b8 <UART_SetConfig+0x114>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d103      	bne.n	8004814 <UART_SetConfig+0x70>
 800480c:	f7fe fef8 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	e002      	b.n	800481a <UART_SetConfig+0x76>
 8004814:	f7fe fee0 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009a      	lsls	r2, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	4a22      	ldr	r2, [pc, #136]	@ (80048bc <UART_SetConfig+0x118>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	0119      	lsls	r1, r3, #4
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004850:	4b1a      	ldr	r3, [pc, #104]	@ (80048bc <UART_SetConfig+0x118>)
 8004852:	fba3 0302 	umull	r0, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2064      	movs	r0, #100	@ 0x64
 800485a:	fb00 f303 	mul.w	r3, r0, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	3332      	adds	r3, #50	@ 0x32
 8004864:	4a15      	ldr	r2, [pc, #84]	@ (80048bc <UART_SetConfig+0x118>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004870:	4419      	add	r1, r3
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009a      	lsls	r2, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	fbb2 f2f3 	udiv	r2, r2, r3
 8004888:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <UART_SetConfig+0x118>)
 800488a:	fba3 0302 	umull	r0, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2064      	movs	r0, #100	@ 0x64
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	@ 0x32
 800489c:	4a07      	ldr	r2, [pc, #28]	@ (80048bc <UART_SetConfig+0x118>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	440a      	add	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40013800 	.word	0x40013800
 80048bc:	51eb851f 	.word	0x51eb851f

080048c0 <__cvt>:
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c6:	461d      	mov	r5, r3
 80048c8:	bfbb      	ittet	lt
 80048ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80048ce:	461d      	movlt	r5, r3
 80048d0:	2300      	movge	r3, #0
 80048d2:	232d      	movlt	r3, #45	@ 0x2d
 80048d4:	b088      	sub	sp, #32
 80048d6:	4614      	mov	r4, r2
 80048d8:	bfb8      	it	lt
 80048da:	4614      	movlt	r4, r2
 80048dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80048de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80048e0:	7013      	strb	r3, [r2, #0]
 80048e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80048e8:	f023 0820 	bic.w	r8, r3, #32
 80048ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048f0:	d005      	beq.n	80048fe <__cvt+0x3e>
 80048f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048f6:	d100      	bne.n	80048fa <__cvt+0x3a>
 80048f8:	3601      	adds	r6, #1
 80048fa:	2302      	movs	r3, #2
 80048fc:	e000      	b.n	8004900 <__cvt+0x40>
 80048fe:	2303      	movs	r3, #3
 8004900:	aa07      	add	r2, sp, #28
 8004902:	9204      	str	r2, [sp, #16]
 8004904:	aa06      	add	r2, sp, #24
 8004906:	e9cd a202 	strd	sl, r2, [sp, #8]
 800490a:	e9cd 3600 	strd	r3, r6, [sp]
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	f000 fe89 	bl	8005628 <_dtoa_r>
 8004916:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800491a:	4607      	mov	r7, r0
 800491c:	d119      	bne.n	8004952 <__cvt+0x92>
 800491e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004920:	07db      	lsls	r3, r3, #31
 8004922:	d50e      	bpl.n	8004942 <__cvt+0x82>
 8004924:	eb00 0906 	add.w	r9, r0, r6
 8004928:	2200      	movs	r2, #0
 800492a:	2300      	movs	r3, #0
 800492c:	4620      	mov	r0, r4
 800492e:	4629      	mov	r1, r5
 8004930:	f7fc f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8004934:	b108      	cbz	r0, 800493a <__cvt+0x7a>
 8004936:	f8cd 901c 	str.w	r9, [sp, #28]
 800493a:	2230      	movs	r2, #48	@ 0x30
 800493c:	9b07      	ldr	r3, [sp, #28]
 800493e:	454b      	cmp	r3, r9
 8004940:	d31e      	bcc.n	8004980 <__cvt+0xc0>
 8004942:	4638      	mov	r0, r7
 8004944:	9b07      	ldr	r3, [sp, #28]
 8004946:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004948:	1bdb      	subs	r3, r3, r7
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	b008      	add	sp, #32
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004952:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004956:	eb00 0906 	add.w	r9, r0, r6
 800495a:	d1e5      	bne.n	8004928 <__cvt+0x68>
 800495c:	7803      	ldrb	r3, [r0, #0]
 800495e:	2b30      	cmp	r3, #48	@ 0x30
 8004960:	d10a      	bne.n	8004978 <__cvt+0xb8>
 8004962:	2200      	movs	r2, #0
 8004964:	2300      	movs	r3, #0
 8004966:	4620      	mov	r0, r4
 8004968:	4629      	mov	r1, r5
 800496a:	f7fc f81d 	bl	80009a8 <__aeabi_dcmpeq>
 800496e:	b918      	cbnz	r0, 8004978 <__cvt+0xb8>
 8004970:	f1c6 0601 	rsb	r6, r6, #1
 8004974:	f8ca 6000 	str.w	r6, [sl]
 8004978:	f8da 3000 	ldr.w	r3, [sl]
 800497c:	4499      	add	r9, r3
 800497e:	e7d3      	b.n	8004928 <__cvt+0x68>
 8004980:	1c59      	adds	r1, r3, #1
 8004982:	9107      	str	r1, [sp, #28]
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e7d9      	b.n	800493c <__cvt+0x7c>

08004988 <__exponent>:
 8004988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800498a:	2900      	cmp	r1, #0
 800498c:	bfb6      	itet	lt
 800498e:	232d      	movlt	r3, #45	@ 0x2d
 8004990:	232b      	movge	r3, #43	@ 0x2b
 8004992:	4249      	neglt	r1, r1
 8004994:	2909      	cmp	r1, #9
 8004996:	7002      	strb	r2, [r0, #0]
 8004998:	7043      	strb	r3, [r0, #1]
 800499a:	dd29      	ble.n	80049f0 <__exponent+0x68>
 800499c:	f10d 0307 	add.w	r3, sp, #7
 80049a0:	461d      	mov	r5, r3
 80049a2:	270a      	movs	r7, #10
 80049a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80049a8:	461a      	mov	r2, r3
 80049aa:	fb07 1416 	mls	r4, r7, r6, r1
 80049ae:	3430      	adds	r4, #48	@ 0x30
 80049b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049b4:	460c      	mov	r4, r1
 80049b6:	2c63      	cmp	r4, #99	@ 0x63
 80049b8:	4631      	mov	r1, r6
 80049ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80049be:	dcf1      	bgt.n	80049a4 <__exponent+0x1c>
 80049c0:	3130      	adds	r1, #48	@ 0x30
 80049c2:	1e94      	subs	r4, r2, #2
 80049c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049c8:	4623      	mov	r3, r4
 80049ca:	1c41      	adds	r1, r0, #1
 80049cc:	42ab      	cmp	r3, r5
 80049ce:	d30a      	bcc.n	80049e6 <__exponent+0x5e>
 80049d0:	f10d 0309 	add.w	r3, sp, #9
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	42ac      	cmp	r4, r5
 80049d8:	bf88      	it	hi
 80049da:	2300      	movhi	r3, #0
 80049dc:	3302      	adds	r3, #2
 80049de:	4403      	add	r3, r0
 80049e0:	1a18      	subs	r0, r3, r0
 80049e2:	b003      	add	sp, #12
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80049ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80049ee:	e7ed      	b.n	80049cc <__exponent+0x44>
 80049f0:	2330      	movs	r3, #48	@ 0x30
 80049f2:	3130      	adds	r1, #48	@ 0x30
 80049f4:	7083      	strb	r3, [r0, #2]
 80049f6:	70c1      	strb	r1, [r0, #3]
 80049f8:	1d03      	adds	r3, r0, #4
 80049fa:	e7f1      	b.n	80049e0 <__exponent+0x58>

080049fc <_printf_float>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	b091      	sub	sp, #68	@ 0x44
 8004a02:	460c      	mov	r4, r1
 8004a04:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004a08:	4616      	mov	r6, r2
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	f000 fcfb 	bl	8005408 <_localeconv_r>
 8004a12:	6803      	ldr	r3, [r0, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	9308      	str	r3, [sp, #32]
 8004a18:	f7fb fb9a 	bl	8000150 <strlen>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a20:	f8d8 3000 	ldr.w	r3, [r8]
 8004a24:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a26:	3307      	adds	r3, #7
 8004a28:	f023 0307 	bic.w	r3, r3, #7
 8004a2c:	f103 0208 	add.w	r2, r3, #8
 8004a30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a34:	f8d4 b000 	ldr.w	fp, [r4]
 8004a38:	f8c8 2000 	str.w	r2, [r8]
 8004a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a46:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a56:	4b9c      	ldr	r3, [pc, #624]	@ (8004cc8 <_printf_float+0x2cc>)
 8004a58:	f7fb ffd8 	bl	8000a0c <__aeabi_dcmpun>
 8004a5c:	bb70      	cbnz	r0, 8004abc <_printf_float+0xc0>
 8004a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	4b98      	ldr	r3, [pc, #608]	@ (8004cc8 <_printf_float+0x2cc>)
 8004a68:	f7fb ffb2 	bl	80009d0 <__aeabi_dcmple>
 8004a6c:	bb30      	cbnz	r0, 8004abc <_printf_float+0xc0>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2300      	movs	r3, #0
 8004a72:	4640      	mov	r0, r8
 8004a74:	4649      	mov	r1, r9
 8004a76:	f7fb ffa1 	bl	80009bc <__aeabi_dcmplt>
 8004a7a:	b110      	cbz	r0, 8004a82 <_printf_float+0x86>
 8004a7c:	232d      	movs	r3, #45	@ 0x2d
 8004a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a82:	4a92      	ldr	r2, [pc, #584]	@ (8004ccc <_printf_float+0x2d0>)
 8004a84:	4b92      	ldr	r3, [pc, #584]	@ (8004cd0 <_printf_float+0x2d4>)
 8004a86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a8a:	bf94      	ite	ls
 8004a8c:	4690      	movls	r8, r2
 8004a8e:	4698      	movhi	r8, r3
 8004a90:	2303      	movs	r3, #3
 8004a92:	f04f 0900 	mov.w	r9, #0
 8004a96:	6123      	str	r3, [r4, #16]
 8004a98:	f02b 0304 	bic.w	r3, fp, #4
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	4633      	mov	r3, r6
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	9700      	str	r7, [sp, #0]
 8004aa6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004aa8:	f000 f9d4 	bl	8004e54 <_printf_common>
 8004aac:	3001      	adds	r0, #1
 8004aae:	f040 8090 	bne.w	8004bd2 <_printf_float+0x1d6>
 8004ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab6:	b011      	add	sp, #68	@ 0x44
 8004ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abc:	4642      	mov	r2, r8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	f7fb ffa2 	bl	8000a0c <__aeabi_dcmpun>
 8004ac8:	b148      	cbz	r0, 8004ade <_printf_float+0xe2>
 8004aca:	464b      	mov	r3, r9
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bfb8      	it	lt
 8004ad0:	232d      	movlt	r3, #45	@ 0x2d
 8004ad2:	4a80      	ldr	r2, [pc, #512]	@ (8004cd4 <_printf_float+0x2d8>)
 8004ad4:	bfb8      	it	lt
 8004ad6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ada:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd8 <_printf_float+0x2dc>)
 8004adc:	e7d3      	b.n	8004a86 <_printf_float+0x8a>
 8004ade:	6863      	ldr	r3, [r4, #4]
 8004ae0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	d13f      	bne.n	8004b68 <_printf_float+0x16c>
 8004ae8:	2306      	movs	r3, #6
 8004aea:	6063      	str	r3, [r4, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	9206      	str	r2, [sp, #24]
 8004af6:	aa0e      	add	r2, sp, #56	@ 0x38
 8004af8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004afc:	aa0d      	add	r2, sp, #52	@ 0x34
 8004afe:	9203      	str	r2, [sp, #12]
 8004b00:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004b04:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b08:	6863      	ldr	r3, [r4, #4]
 8004b0a:	4642      	mov	r2, r8
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4628      	mov	r0, r5
 8004b10:	464b      	mov	r3, r9
 8004b12:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b14:	f7ff fed4 	bl	80048c0 <__cvt>
 8004b18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	2947      	cmp	r1, #71	@ 0x47
 8004b1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b20:	d128      	bne.n	8004b74 <_printf_float+0x178>
 8004b22:	1cc8      	adds	r0, r1, #3
 8004b24:	db02      	blt.n	8004b2c <_printf_float+0x130>
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	dd40      	ble.n	8004bae <_printf_float+0x1b2>
 8004b2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b30:	fa5f fa8a 	uxtb.w	sl, sl
 8004b34:	4652      	mov	r2, sl
 8004b36:	3901      	subs	r1, #1
 8004b38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b3c:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b3e:	f7ff ff23 	bl	8004988 <__exponent>
 8004b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b44:	4681      	mov	r9, r0
 8004b46:	1813      	adds	r3, r2, r0
 8004b48:	2a01      	cmp	r2, #1
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	dc02      	bgt.n	8004b54 <_printf_float+0x158>
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	07d2      	lsls	r2, r2, #31
 8004b52:	d501      	bpl.n	8004b58 <_printf_float+0x15c>
 8004b54:	3301      	adds	r3, #1
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d09e      	beq.n	8004a9e <_printf_float+0xa2>
 8004b60:	232d      	movs	r3, #45	@ 0x2d
 8004b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b66:	e79a      	b.n	8004a9e <_printf_float+0xa2>
 8004b68:	2947      	cmp	r1, #71	@ 0x47
 8004b6a:	d1bf      	bne.n	8004aec <_printf_float+0xf0>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1bd      	bne.n	8004aec <_printf_float+0xf0>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e7ba      	b.n	8004aea <_printf_float+0xee>
 8004b74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b78:	d9dc      	bls.n	8004b34 <_printf_float+0x138>
 8004b7a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b7e:	d118      	bne.n	8004bb2 <_printf_float+0x1b6>
 8004b80:	2900      	cmp	r1, #0
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	dd0b      	ble.n	8004b9e <_printf_float+0x1a2>
 8004b86:	6121      	str	r1, [r4, #16]
 8004b88:	b913      	cbnz	r3, 8004b90 <_printf_float+0x194>
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	07d0      	lsls	r0, r2, #31
 8004b8e:	d502      	bpl.n	8004b96 <_printf_float+0x19a>
 8004b90:	3301      	adds	r3, #1
 8004b92:	440b      	add	r3, r1
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	f04f 0900 	mov.w	r9, #0
 8004b9a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b9c:	e7dc      	b.n	8004b58 <_printf_float+0x15c>
 8004b9e:	b913      	cbnz	r3, 8004ba6 <_printf_float+0x1aa>
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	07d2      	lsls	r2, r2, #31
 8004ba4:	d501      	bpl.n	8004baa <_printf_float+0x1ae>
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	e7f4      	b.n	8004b94 <_printf_float+0x198>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e7f2      	b.n	8004b94 <_printf_float+0x198>
 8004bae:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	db05      	blt.n	8004bc4 <_printf_float+0x1c8>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	6121      	str	r1, [r4, #16]
 8004bbc:	07d8      	lsls	r0, r3, #31
 8004bbe:	d5ea      	bpl.n	8004b96 <_printf_float+0x19a>
 8004bc0:	1c4b      	adds	r3, r1, #1
 8004bc2:	e7e7      	b.n	8004b94 <_printf_float+0x198>
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	bfcc      	ite	gt
 8004bc8:	2201      	movgt	r2, #1
 8004bca:	f1c1 0202 	rsble	r2, r1, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	e7e0      	b.n	8004b94 <_printf_float+0x198>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	055a      	lsls	r2, r3, #21
 8004bd6:	d407      	bmi.n	8004be8 <_printf_float+0x1ec>
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	4642      	mov	r2, r8
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	d12b      	bne.n	8004c3e <_printf_float+0x242>
 8004be6:	e764      	b.n	8004ab2 <_printf_float+0xb6>
 8004be8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bec:	f240 80dc 	bls.w	8004da8 <_printf_float+0x3ac>
 8004bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7fb fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d033      	beq.n	8004c68 <_printf_float+0x26c>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	4a35      	ldr	r2, [pc, #212]	@ (8004cdc <_printf_float+0x2e0>)
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	f43f af51 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c10:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004c14:	4543      	cmp	r3, r8
 8004c16:	db02      	blt.n	8004c1e <_printf_float+0x222>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07d8      	lsls	r0, r3, #31
 8004c1c:	d50f      	bpl.n	8004c3e <_printf_float+0x242>
 8004c1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f af42 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c2e:	f04f 0900 	mov.w	r9, #0
 8004c32:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c36:	f104 0a1a 	add.w	sl, r4, #26
 8004c3a:	45c8      	cmp	r8, r9
 8004c3c:	dc09      	bgt.n	8004c52 <_printf_float+0x256>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	079b      	lsls	r3, r3, #30
 8004c42:	f100 8102 	bmi.w	8004e4a <_printf_float+0x44e>
 8004c46:	68e0      	ldr	r0, [r4, #12]
 8004c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	bfb8      	it	lt
 8004c4e:	4618      	movlt	r0, r3
 8004c50:	e731      	b.n	8004ab6 <_printf_float+0xba>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4652      	mov	r2, sl
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f af28 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c62:	f109 0901 	add.w	r9, r9, #1
 8004c66:	e7e8      	b.n	8004c3a <_printf_float+0x23e>
 8004c68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	dc38      	bgt.n	8004ce0 <_printf_float+0x2e4>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <_printf_float+0x2e0>)
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f af1a 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c7e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c82:	ea59 0303 	orrs.w	r3, r9, r3
 8004c86:	d102      	bne.n	8004c8e <_printf_float+0x292>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	07d9      	lsls	r1, r3, #31
 8004c8c:	d5d7      	bpl.n	8004c3e <_printf_float+0x242>
 8004c8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f43f af0a 	beq.w	8004ab2 <_printf_float+0xb6>
 8004c9e:	f04f 0a00 	mov.w	sl, #0
 8004ca2:	f104 0b1a 	add.w	fp, r4, #26
 8004ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ca8:	425b      	negs	r3, r3
 8004caa:	4553      	cmp	r3, sl
 8004cac:	dc01      	bgt.n	8004cb2 <_printf_float+0x2b6>
 8004cae:	464b      	mov	r3, r9
 8004cb0:	e793      	b.n	8004bda <_printf_float+0x1de>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	465a      	mov	r2, fp
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f aef8 	beq.w	8004ab2 <_printf_float+0xb6>
 8004cc2:	f10a 0a01 	add.w	sl, sl, #1
 8004cc6:	e7ee      	b.n	8004ca6 <_printf_float+0x2aa>
 8004cc8:	7fefffff 	.word	0x7fefffff
 8004ccc:	080075d2 	.word	0x080075d2
 8004cd0:	080075d6 	.word	0x080075d6
 8004cd4:	080075da 	.word	0x080075da
 8004cd8:	080075de 	.word	0x080075de
 8004cdc:	080075e2 	.word	0x080075e2
 8004ce0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ce2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ce6:	4553      	cmp	r3, sl
 8004ce8:	bfa8      	it	ge
 8004cea:	4653      	movge	r3, sl
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	4699      	mov	r9, r3
 8004cf0:	dc36      	bgt.n	8004d60 <_printf_float+0x364>
 8004cf2:	f04f 0b00 	mov.w	fp, #0
 8004cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cfa:	f104 021a 	add.w	r2, r4, #26
 8004cfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d02:	eba3 0309 	sub.w	r3, r3, r9
 8004d06:	455b      	cmp	r3, fp
 8004d08:	dc31      	bgt.n	8004d6e <_printf_float+0x372>
 8004d0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d0c:	459a      	cmp	sl, r3
 8004d0e:	dc3a      	bgt.n	8004d86 <_printf_float+0x38a>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	07da      	lsls	r2, r3, #31
 8004d14:	d437      	bmi.n	8004d86 <_printf_float+0x38a>
 8004d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d18:	ebaa 0903 	sub.w	r9, sl, r3
 8004d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d1e:	ebaa 0303 	sub.w	r3, sl, r3
 8004d22:	4599      	cmp	r9, r3
 8004d24:	bfa8      	it	ge
 8004d26:	4699      	movge	r9, r3
 8004d28:	f1b9 0f00 	cmp.w	r9, #0
 8004d2c:	dc33      	bgt.n	8004d96 <_printf_float+0x39a>
 8004d2e:	f04f 0800 	mov.w	r8, #0
 8004d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d36:	f104 0b1a 	add.w	fp, r4, #26
 8004d3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8004d40:	eba3 0309 	sub.w	r3, r3, r9
 8004d44:	4543      	cmp	r3, r8
 8004d46:	f77f af7a 	ble.w	8004c3e <_printf_float+0x242>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	465a      	mov	r2, fp
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f aeac 	beq.w	8004ab2 <_printf_float+0xb6>
 8004d5a:	f108 0801 	add.w	r8, r8, #1
 8004d5e:	e7ec      	b.n	8004d3a <_printf_float+0x33e>
 8004d60:	4642      	mov	r2, r8
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d1c2      	bne.n	8004cf2 <_printf_float+0x2f6>
 8004d6c:	e6a1      	b.n	8004ab2 <_printf_float+0xb6>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4631      	mov	r1, r6
 8004d72:	4628      	mov	r0, r5
 8004d74:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f43f ae9a 	beq.w	8004ab2 <_printf_float+0xb6>
 8004d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d80:	f10b 0b01 	add.w	fp, fp, #1
 8004d84:	e7bb      	b.n	8004cfe <_printf_float+0x302>
 8004d86:	4631      	mov	r1, r6
 8004d88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b8      	blx	r7
 8004d90:	3001      	adds	r0, #1
 8004d92:	d1c0      	bne.n	8004d16 <_printf_float+0x31a>
 8004d94:	e68d      	b.n	8004ab2 <_printf_float+0xb6>
 8004d96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d98:	464b      	mov	r3, r9
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	4442      	add	r2, r8
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	d1c3      	bne.n	8004d2e <_printf_float+0x332>
 8004da6:	e684      	b.n	8004ab2 <_printf_float+0xb6>
 8004da8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004dac:	f1ba 0f01 	cmp.w	sl, #1
 8004db0:	dc01      	bgt.n	8004db6 <_printf_float+0x3ba>
 8004db2:	07db      	lsls	r3, r3, #31
 8004db4:	d536      	bpl.n	8004e24 <_printf_float+0x428>
 8004db6:	2301      	movs	r3, #1
 8004db8:	4642      	mov	r2, r8
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	f43f ae76 	beq.w	8004ab2 <_printf_float+0xb6>
 8004dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae6e 	beq.w	8004ab2 <_printf_float+0xb6>
 8004dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004de2:	f7fb fde1 	bl	80009a8 <__aeabi_dcmpeq>
 8004de6:	b9c0      	cbnz	r0, 8004e1a <_printf_float+0x41e>
 8004de8:	4653      	mov	r3, sl
 8004dea:	f108 0201 	add.w	r2, r8, #1
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	d10c      	bne.n	8004e12 <_printf_float+0x416>
 8004df8:	e65b      	b.n	8004ab2 <_printf_float+0xb6>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	465a      	mov	r2, fp
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae54 	beq.w	8004ab2 <_printf_float+0xb6>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	45d0      	cmp	r8, sl
 8004e10:	dbf3      	blt.n	8004dfa <_printf_float+0x3fe>
 8004e12:	464b      	mov	r3, r9
 8004e14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e18:	e6e0      	b.n	8004bdc <_printf_float+0x1e0>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	f104 0b1a 	add.w	fp, r4, #26
 8004e22:	e7f4      	b.n	8004e0e <_printf_float+0x412>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4642      	mov	r2, r8
 8004e28:	e7e1      	b.n	8004dee <_printf_float+0x3f2>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	464a      	mov	r2, r9
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	f43f ae3c 	beq.w	8004ab2 <_printf_float+0xb6>
 8004e3a:	f108 0801 	add.w	r8, r8, #1
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e42:	1a5b      	subs	r3, r3, r1
 8004e44:	4543      	cmp	r3, r8
 8004e46:	dcf0      	bgt.n	8004e2a <_printf_float+0x42e>
 8004e48:	e6fd      	b.n	8004c46 <_printf_float+0x24a>
 8004e4a:	f04f 0800 	mov.w	r8, #0
 8004e4e:	f104 0919 	add.w	r9, r4, #25
 8004e52:	e7f4      	b.n	8004e3e <_printf_float+0x442>

08004e54 <_printf_common>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	4616      	mov	r6, r2
 8004e5a:	4698      	mov	r8, r3
 8004e5c:	688a      	ldr	r2, [r1, #8]
 8004e5e:	690b      	ldr	r3, [r1, #16]
 8004e60:	4607      	mov	r7, r0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bfb8      	it	lt
 8004e66:	4613      	movlt	r3, r2
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e6e:	460c      	mov	r4, r1
 8004e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e74:	b10a      	cbz	r2, 8004e7a <_printf_common+0x26>
 8004e76:	3301      	adds	r3, #1
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0699      	lsls	r1, r3, #26
 8004e7e:	bf42      	ittt	mi
 8004e80:	6833      	ldrmi	r3, [r6, #0]
 8004e82:	3302      	addmi	r3, #2
 8004e84:	6033      	strmi	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	f015 0506 	ands.w	r5, r5, #6
 8004e8c:	d106      	bne.n	8004e9c <_printf_common+0x48>
 8004e8e:	f104 0a19 	add.w	sl, r4, #25
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	dc2b      	bgt.n	8004ef4 <_printf_common+0xa0>
 8004e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ea0:	6822      	ldr	r2, [r4, #0]
 8004ea2:	3b00      	subs	r3, #0
 8004ea4:	bf18      	it	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	0692      	lsls	r2, r2, #26
 8004eaa:	d430      	bmi.n	8004f0e <_printf_common+0xba>
 8004eac:	4641      	mov	r1, r8
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004eb4:	47c8      	blx	r9
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d023      	beq.n	8004f02 <_printf_common+0xae>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf14      	ite	ne
 8004ec6:	2500      	movne	r5, #0
 8004ec8:	6833      	ldreq	r3, [r6, #0]
 8004eca:	f04f 0600 	mov.w	r6, #0
 8004ece:	bf08      	it	eq
 8004ed0:	68e5      	ldreq	r5, [r4, #12]
 8004ed2:	f104 041a 	add.w	r4, r4, #26
 8004ed6:	bf08      	it	eq
 8004ed8:	1aed      	subeq	r5, r5, r3
 8004eda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ede:	bf08      	it	eq
 8004ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bfc4      	itt	gt
 8004ee8:	1a9b      	subgt	r3, r3, r2
 8004eea:	18ed      	addgt	r5, r5, r3
 8004eec:	42b5      	cmp	r5, r6
 8004eee:	d11a      	bne.n	8004f26 <_printf_common+0xd2>
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	e008      	b.n	8004f06 <_printf_common+0xb2>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4652      	mov	r2, sl
 8004ef8:	4641      	mov	r1, r8
 8004efa:	4638      	mov	r0, r7
 8004efc:	47c8      	blx	r9
 8004efe:	3001      	adds	r0, #1
 8004f00:	d103      	bne.n	8004f0a <_printf_common+0xb6>
 8004f02:	f04f 30ff 	mov.w	r0, #4294967295
 8004f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0a:	3501      	adds	r5, #1
 8004f0c:	e7c1      	b.n	8004e92 <_printf_common+0x3e>
 8004f0e:	2030      	movs	r0, #48	@ 0x30
 8004f10:	18e1      	adds	r1, r4, r3
 8004f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f1c:	4422      	add	r2, r4
 8004f1e:	3302      	adds	r3, #2
 8004f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f24:	e7c2      	b.n	8004eac <_printf_common+0x58>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4622      	mov	r2, r4
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	47c8      	blx	r9
 8004f30:	3001      	adds	r0, #1
 8004f32:	d0e6      	beq.n	8004f02 <_printf_common+0xae>
 8004f34:	3601      	adds	r6, #1
 8004f36:	e7d9      	b.n	8004eec <_printf_common+0x98>

08004f38 <_printf_i>:
 8004f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f3c:	7e0f      	ldrb	r7, [r1, #24]
 8004f3e:	4691      	mov	r9, r2
 8004f40:	2f78      	cmp	r7, #120	@ 0x78
 8004f42:	4680      	mov	r8, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	469a      	mov	sl, r3
 8004f48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f4e:	d807      	bhi.n	8004f60 <_printf_i+0x28>
 8004f50:	2f62      	cmp	r7, #98	@ 0x62
 8004f52:	d80a      	bhi.n	8004f6a <_printf_i+0x32>
 8004f54:	2f00      	cmp	r7, #0
 8004f56:	f000 80d3 	beq.w	8005100 <_printf_i+0x1c8>
 8004f5a:	2f58      	cmp	r7, #88	@ 0x58
 8004f5c:	f000 80ba 	beq.w	80050d4 <_printf_i+0x19c>
 8004f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f68:	e03a      	b.n	8004fe0 <_printf_i+0xa8>
 8004f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f6e:	2b15      	cmp	r3, #21
 8004f70:	d8f6      	bhi.n	8004f60 <_printf_i+0x28>
 8004f72:	a101      	add	r1, pc, #4	@ (adr r1, 8004f78 <_printf_i+0x40>)
 8004f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f78:	08004fd1 	.word	0x08004fd1
 8004f7c:	08004fe5 	.word	0x08004fe5
 8004f80:	08004f61 	.word	0x08004f61
 8004f84:	08004f61 	.word	0x08004f61
 8004f88:	08004f61 	.word	0x08004f61
 8004f8c:	08004f61 	.word	0x08004f61
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004f61 	.word	0x08004f61
 8004f98:	08004f61 	.word	0x08004f61
 8004f9c:	08004f61 	.word	0x08004f61
 8004fa0:	08004f61 	.word	0x08004f61
 8004fa4:	080050e7 	.word	0x080050e7
 8004fa8:	0800500f 	.word	0x0800500f
 8004fac:	080050a1 	.word	0x080050a1
 8004fb0:	08004f61 	.word	0x08004f61
 8004fb4:	08004f61 	.word	0x08004f61
 8004fb8:	08005109 	.word	0x08005109
 8004fbc:	08004f61 	.word	0x08004f61
 8004fc0:	0800500f 	.word	0x0800500f
 8004fc4:	08004f61 	.word	0x08004f61
 8004fc8:	08004f61 	.word	0x08004f61
 8004fcc:	080050a9 	.word	0x080050a9
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6032      	str	r2, [r6, #0]
 8004fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e09e      	b.n	8005122 <_printf_i+0x1ea>
 8004fe4:	6833      	ldr	r3, [r6, #0]
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	1d19      	adds	r1, r3, #4
 8004fea:	6031      	str	r1, [r6, #0]
 8004fec:	0606      	lsls	r6, r0, #24
 8004fee:	d501      	bpl.n	8004ff4 <_printf_i+0xbc>
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	e003      	b.n	8004ffc <_printf_i+0xc4>
 8004ff4:	0645      	lsls	r5, r0, #25
 8004ff6:	d5fb      	bpl.n	8004ff0 <_printf_i+0xb8>
 8004ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	da03      	bge.n	8005008 <_printf_i+0xd0>
 8005000:	232d      	movs	r3, #45	@ 0x2d
 8005002:	426d      	negs	r5, r5
 8005004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005008:	230a      	movs	r3, #10
 800500a:	4859      	ldr	r0, [pc, #356]	@ (8005170 <_printf_i+0x238>)
 800500c:	e011      	b.n	8005032 <_printf_i+0xfa>
 800500e:	6821      	ldr	r1, [r4, #0]
 8005010:	6833      	ldr	r3, [r6, #0]
 8005012:	0608      	lsls	r0, r1, #24
 8005014:	f853 5b04 	ldr.w	r5, [r3], #4
 8005018:	d402      	bmi.n	8005020 <_printf_i+0xe8>
 800501a:	0649      	lsls	r1, r1, #25
 800501c:	bf48      	it	mi
 800501e:	b2ad      	uxthmi	r5, r5
 8005020:	2f6f      	cmp	r7, #111	@ 0x6f
 8005022:	6033      	str	r3, [r6, #0]
 8005024:	bf14      	ite	ne
 8005026:	230a      	movne	r3, #10
 8005028:	2308      	moveq	r3, #8
 800502a:	4851      	ldr	r0, [pc, #324]	@ (8005170 <_printf_i+0x238>)
 800502c:	2100      	movs	r1, #0
 800502e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005032:	6866      	ldr	r6, [r4, #4]
 8005034:	2e00      	cmp	r6, #0
 8005036:	bfa8      	it	ge
 8005038:	6821      	ldrge	r1, [r4, #0]
 800503a:	60a6      	str	r6, [r4, #8]
 800503c:	bfa4      	itt	ge
 800503e:	f021 0104 	bicge.w	r1, r1, #4
 8005042:	6021      	strge	r1, [r4, #0]
 8005044:	b90d      	cbnz	r5, 800504a <_printf_i+0x112>
 8005046:	2e00      	cmp	r6, #0
 8005048:	d04b      	beq.n	80050e2 <_printf_i+0x1aa>
 800504a:	4616      	mov	r6, r2
 800504c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005050:	fb03 5711 	mls	r7, r3, r1, r5
 8005054:	5dc7      	ldrb	r7, [r0, r7]
 8005056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800505a:	462f      	mov	r7, r5
 800505c:	42bb      	cmp	r3, r7
 800505e:	460d      	mov	r5, r1
 8005060:	d9f4      	bls.n	800504c <_printf_i+0x114>
 8005062:	2b08      	cmp	r3, #8
 8005064:	d10b      	bne.n	800507e <_printf_i+0x146>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	07df      	lsls	r7, r3, #31
 800506a:	d508      	bpl.n	800507e <_printf_i+0x146>
 800506c:	6923      	ldr	r3, [r4, #16]
 800506e:	6861      	ldr	r1, [r4, #4]
 8005070:	4299      	cmp	r1, r3
 8005072:	bfde      	ittt	le
 8005074:	2330      	movle	r3, #48	@ 0x30
 8005076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800507a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800507e:	1b92      	subs	r2, r2, r6
 8005080:	6122      	str	r2, [r4, #16]
 8005082:	464b      	mov	r3, r9
 8005084:	4621      	mov	r1, r4
 8005086:	4640      	mov	r0, r8
 8005088:	f8cd a000 	str.w	sl, [sp]
 800508c:	aa03      	add	r2, sp, #12
 800508e:	f7ff fee1 	bl	8004e54 <_printf_common>
 8005092:	3001      	adds	r0, #1
 8005094:	d14a      	bne.n	800512c <_printf_i+0x1f4>
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	b004      	add	sp, #16
 800509c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	f043 0320 	orr.w	r3, r3, #32
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	2778      	movs	r7, #120	@ 0x78
 80050aa:	4832      	ldr	r0, [pc, #200]	@ (8005174 <_printf_i+0x23c>)
 80050ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	6831      	ldr	r1, [r6, #0]
 80050b4:	061f      	lsls	r7, r3, #24
 80050b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80050ba:	d402      	bmi.n	80050c2 <_printf_i+0x18a>
 80050bc:	065f      	lsls	r7, r3, #25
 80050be:	bf48      	it	mi
 80050c0:	b2ad      	uxthmi	r5, r5
 80050c2:	6031      	str	r1, [r6, #0]
 80050c4:	07d9      	lsls	r1, r3, #31
 80050c6:	bf44      	itt	mi
 80050c8:	f043 0320 	orrmi.w	r3, r3, #32
 80050cc:	6023      	strmi	r3, [r4, #0]
 80050ce:	b11d      	cbz	r5, 80050d8 <_printf_i+0x1a0>
 80050d0:	2310      	movs	r3, #16
 80050d2:	e7ab      	b.n	800502c <_printf_i+0xf4>
 80050d4:	4826      	ldr	r0, [pc, #152]	@ (8005170 <_printf_i+0x238>)
 80050d6:	e7e9      	b.n	80050ac <_printf_i+0x174>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f023 0320 	bic.w	r3, r3, #32
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	e7f6      	b.n	80050d0 <_printf_i+0x198>
 80050e2:	4616      	mov	r6, r2
 80050e4:	e7bd      	b.n	8005062 <_printf_i+0x12a>
 80050e6:	6833      	ldr	r3, [r6, #0]
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	1d18      	adds	r0, r3, #4
 80050ec:	6961      	ldr	r1, [r4, #20]
 80050ee:	6030      	str	r0, [r6, #0]
 80050f0:	062e      	lsls	r6, r5, #24
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	d501      	bpl.n	80050fa <_printf_i+0x1c2>
 80050f6:	6019      	str	r1, [r3, #0]
 80050f8:	e002      	b.n	8005100 <_printf_i+0x1c8>
 80050fa:	0668      	lsls	r0, r5, #25
 80050fc:	d5fb      	bpl.n	80050f6 <_printf_i+0x1be>
 80050fe:	8019      	strh	r1, [r3, #0]
 8005100:	2300      	movs	r3, #0
 8005102:	4616      	mov	r6, r2
 8005104:	6123      	str	r3, [r4, #16]
 8005106:	e7bc      	b.n	8005082 <_printf_i+0x14a>
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	2100      	movs	r1, #0
 800510c:	1d1a      	adds	r2, r3, #4
 800510e:	6032      	str	r2, [r6, #0]
 8005110:	681e      	ldr	r6, [r3, #0]
 8005112:	6862      	ldr	r2, [r4, #4]
 8005114:	4630      	mov	r0, r6
 8005116:	f000 f9ee 	bl	80054f6 <memchr>
 800511a:	b108      	cbz	r0, 8005120 <_printf_i+0x1e8>
 800511c:	1b80      	subs	r0, r0, r6
 800511e:	6060      	str	r0, [r4, #4]
 8005120:	6863      	ldr	r3, [r4, #4]
 8005122:	6123      	str	r3, [r4, #16]
 8005124:	2300      	movs	r3, #0
 8005126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800512a:	e7aa      	b.n	8005082 <_printf_i+0x14a>
 800512c:	4632      	mov	r2, r6
 800512e:	4649      	mov	r1, r9
 8005130:	4640      	mov	r0, r8
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	47d0      	blx	sl
 8005136:	3001      	adds	r0, #1
 8005138:	d0ad      	beq.n	8005096 <_printf_i+0x15e>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	079b      	lsls	r3, r3, #30
 800513e:	d413      	bmi.n	8005168 <_printf_i+0x230>
 8005140:	68e0      	ldr	r0, [r4, #12]
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	4298      	cmp	r0, r3
 8005146:	bfb8      	it	lt
 8005148:	4618      	movlt	r0, r3
 800514a:	e7a6      	b.n	800509a <_printf_i+0x162>
 800514c:	2301      	movs	r3, #1
 800514e:	4632      	mov	r2, r6
 8005150:	4649      	mov	r1, r9
 8005152:	4640      	mov	r0, r8
 8005154:	47d0      	blx	sl
 8005156:	3001      	adds	r0, #1
 8005158:	d09d      	beq.n	8005096 <_printf_i+0x15e>
 800515a:	3501      	adds	r5, #1
 800515c:	68e3      	ldr	r3, [r4, #12]
 800515e:	9903      	ldr	r1, [sp, #12]
 8005160:	1a5b      	subs	r3, r3, r1
 8005162:	42ab      	cmp	r3, r5
 8005164:	dcf2      	bgt.n	800514c <_printf_i+0x214>
 8005166:	e7eb      	b.n	8005140 <_printf_i+0x208>
 8005168:	2500      	movs	r5, #0
 800516a:	f104 0619 	add.w	r6, r4, #25
 800516e:	e7f5      	b.n	800515c <_printf_i+0x224>
 8005170:	080075e4 	.word	0x080075e4
 8005174:	080075f5 	.word	0x080075f5

08005178 <std>:
 8005178:	2300      	movs	r3, #0
 800517a:	b510      	push	{r4, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	e9c0 3300 	strd	r3, r3, [r0]
 8005182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005186:	6083      	str	r3, [r0, #8]
 8005188:	8181      	strh	r1, [r0, #12]
 800518a:	6643      	str	r3, [r0, #100]	@ 0x64
 800518c:	81c2      	strh	r2, [r0, #14]
 800518e:	6183      	str	r3, [r0, #24]
 8005190:	4619      	mov	r1, r3
 8005192:	2208      	movs	r2, #8
 8005194:	305c      	adds	r0, #92	@ 0x5c
 8005196:	f000 f92e 	bl	80053f6 <memset>
 800519a:	4b0d      	ldr	r3, [pc, #52]	@ (80051d0 <std+0x58>)
 800519c:	6224      	str	r4, [r4, #32]
 800519e:	6263      	str	r3, [r4, #36]	@ 0x24
 80051a0:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <std+0x5c>)
 80051a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051a4:	4b0c      	ldr	r3, [pc, #48]	@ (80051d8 <std+0x60>)
 80051a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051a8:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <std+0x64>)
 80051aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ac:	4b0c      	ldr	r3, [pc, #48]	@ (80051e0 <std+0x68>)
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d006      	beq.n	80051c0 <std+0x48>
 80051b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051b6:	4294      	cmp	r4, r2
 80051b8:	d002      	beq.n	80051c0 <std+0x48>
 80051ba:	33d0      	adds	r3, #208	@ 0xd0
 80051bc:	429c      	cmp	r4, r3
 80051be:	d105      	bne.n	80051cc <std+0x54>
 80051c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	f000 b992 	b.w	80054f0 <__retarget_lock_init_recursive>
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	0800533d 	.word	0x0800533d
 80051d4:	0800535f 	.word	0x0800535f
 80051d8:	08005397 	.word	0x08005397
 80051dc:	080053bb 	.word	0x080053bb
 80051e0:	200002fc 	.word	0x200002fc

080051e4 <stdio_exit_handler>:
 80051e4:	4a02      	ldr	r2, [pc, #8]	@ (80051f0 <stdio_exit_handler+0xc>)
 80051e6:	4903      	ldr	r1, [pc, #12]	@ (80051f4 <stdio_exit_handler+0x10>)
 80051e8:	4803      	ldr	r0, [pc, #12]	@ (80051f8 <stdio_exit_handler+0x14>)
 80051ea:	f000 b869 	b.w	80052c0 <_fwalk_sglue>
 80051ee:	bf00      	nop
 80051f0:	20000010 	.word	0x20000010
 80051f4:	08006e65 	.word	0x08006e65
 80051f8:	20000020 	.word	0x20000020

080051fc <cleanup_stdio>:
 80051fc:	6841      	ldr	r1, [r0, #4]
 80051fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <cleanup_stdio+0x34>)
 8005200:	b510      	push	{r4, lr}
 8005202:	4299      	cmp	r1, r3
 8005204:	4604      	mov	r4, r0
 8005206:	d001      	beq.n	800520c <cleanup_stdio+0x10>
 8005208:	f001 fe2c 	bl	8006e64 <_fflush_r>
 800520c:	68a1      	ldr	r1, [r4, #8]
 800520e:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <cleanup_stdio+0x38>)
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <cleanup_stdio+0x1e>
 8005214:	4620      	mov	r0, r4
 8005216:	f001 fe25 	bl	8006e64 <_fflush_r>
 800521a:	68e1      	ldr	r1, [r4, #12]
 800521c:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <cleanup_stdio+0x3c>)
 800521e:	4299      	cmp	r1, r3
 8005220:	d004      	beq.n	800522c <cleanup_stdio+0x30>
 8005222:	4620      	mov	r0, r4
 8005224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005228:	f001 be1c 	b.w	8006e64 <_fflush_r>
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop
 8005230:	200002fc 	.word	0x200002fc
 8005234:	20000364 	.word	0x20000364
 8005238:	200003cc 	.word	0x200003cc

0800523c <global_stdio_init.part.0>:
 800523c:	b510      	push	{r4, lr}
 800523e:	4b0b      	ldr	r3, [pc, #44]	@ (800526c <global_stdio_init.part.0+0x30>)
 8005240:	4c0b      	ldr	r4, [pc, #44]	@ (8005270 <global_stdio_init.part.0+0x34>)
 8005242:	4a0c      	ldr	r2, [pc, #48]	@ (8005274 <global_stdio_init.part.0+0x38>)
 8005244:	4620      	mov	r0, r4
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	2104      	movs	r1, #4
 800524a:	2200      	movs	r2, #0
 800524c:	f7ff ff94 	bl	8005178 <std>
 8005250:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005254:	2201      	movs	r2, #1
 8005256:	2109      	movs	r1, #9
 8005258:	f7ff ff8e 	bl	8005178 <std>
 800525c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005260:	2202      	movs	r2, #2
 8005262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005266:	2112      	movs	r1, #18
 8005268:	f7ff bf86 	b.w	8005178 <std>
 800526c:	20000434 	.word	0x20000434
 8005270:	200002fc 	.word	0x200002fc
 8005274:	080051e5 	.word	0x080051e5

08005278 <__sfp_lock_acquire>:
 8005278:	4801      	ldr	r0, [pc, #4]	@ (8005280 <__sfp_lock_acquire+0x8>)
 800527a:	f000 b93a 	b.w	80054f2 <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	2000043d 	.word	0x2000043d

08005284 <__sfp_lock_release>:
 8005284:	4801      	ldr	r0, [pc, #4]	@ (800528c <__sfp_lock_release+0x8>)
 8005286:	f000 b935 	b.w	80054f4 <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	2000043d 	.word	0x2000043d

08005290 <__sinit>:
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
 8005294:	f7ff fff0 	bl	8005278 <__sfp_lock_acquire>
 8005298:	6a23      	ldr	r3, [r4, #32]
 800529a:	b11b      	cbz	r3, 80052a4 <__sinit+0x14>
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f7ff bff0 	b.w	8005284 <__sfp_lock_release>
 80052a4:	4b04      	ldr	r3, [pc, #16]	@ (80052b8 <__sinit+0x28>)
 80052a6:	6223      	str	r3, [r4, #32]
 80052a8:	4b04      	ldr	r3, [pc, #16]	@ (80052bc <__sinit+0x2c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f5      	bne.n	800529c <__sinit+0xc>
 80052b0:	f7ff ffc4 	bl	800523c <global_stdio_init.part.0>
 80052b4:	e7f2      	b.n	800529c <__sinit+0xc>
 80052b6:	bf00      	nop
 80052b8:	080051fd 	.word	0x080051fd
 80052bc:	20000434 	.word	0x20000434

080052c0 <_fwalk_sglue>:
 80052c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c4:	4607      	mov	r7, r0
 80052c6:	4688      	mov	r8, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	2600      	movs	r6, #0
 80052cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052d0:	f1b9 0901 	subs.w	r9, r9, #1
 80052d4:	d505      	bpl.n	80052e2 <_fwalk_sglue+0x22>
 80052d6:	6824      	ldr	r4, [r4, #0]
 80052d8:	2c00      	cmp	r4, #0
 80052da:	d1f7      	bne.n	80052cc <_fwalk_sglue+0xc>
 80052dc:	4630      	mov	r0, r6
 80052de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e2:	89ab      	ldrh	r3, [r5, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d907      	bls.n	80052f8 <_fwalk_sglue+0x38>
 80052e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ec:	3301      	adds	r3, #1
 80052ee:	d003      	beq.n	80052f8 <_fwalk_sglue+0x38>
 80052f0:	4629      	mov	r1, r5
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	4306      	orrs	r6, r0
 80052f8:	3568      	adds	r5, #104	@ 0x68
 80052fa:	e7e9      	b.n	80052d0 <_fwalk_sglue+0x10>

080052fc <siprintf>:
 80052fc:	b40e      	push	{r1, r2, r3}
 80052fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005302:	b500      	push	{lr}
 8005304:	b09c      	sub	sp, #112	@ 0x70
 8005306:	ab1d      	add	r3, sp, #116	@ 0x74
 8005308:	9002      	str	r0, [sp, #8]
 800530a:	9006      	str	r0, [sp, #24]
 800530c:	9107      	str	r1, [sp, #28]
 800530e:	9104      	str	r1, [sp, #16]
 8005310:	4808      	ldr	r0, [pc, #32]	@ (8005334 <siprintf+0x38>)
 8005312:	4909      	ldr	r1, [pc, #36]	@ (8005338 <siprintf+0x3c>)
 8005314:	f853 2b04 	ldr.w	r2, [r3], #4
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	a902      	add	r1, sp, #8
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	f001 fc24 	bl	8006b6c <_svfiprintf_r>
 8005324:	2200      	movs	r2, #0
 8005326:	9b02      	ldr	r3, [sp, #8]
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	b01c      	add	sp, #112	@ 0x70
 800532c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005330:	b003      	add	sp, #12
 8005332:	4770      	bx	lr
 8005334:	2000001c 	.word	0x2000001c
 8005338:	ffff0208 	.word	0xffff0208

0800533c <__sread>:
 800533c:	b510      	push	{r4, lr}
 800533e:	460c      	mov	r4, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	f000 f886 	bl	8005454 <_read_r>
 8005348:	2800      	cmp	r0, #0
 800534a:	bfab      	itete	ge
 800534c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800534e:	89a3      	ldrhlt	r3, [r4, #12]
 8005350:	181b      	addge	r3, r3, r0
 8005352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005356:	bfac      	ite	ge
 8005358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800535a:	81a3      	strhlt	r3, [r4, #12]
 800535c:	bd10      	pop	{r4, pc}

0800535e <__swrite>:
 800535e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	461f      	mov	r7, r3
 8005364:	898b      	ldrh	r3, [r1, #12]
 8005366:	4605      	mov	r5, r0
 8005368:	05db      	lsls	r3, r3, #23
 800536a:	460c      	mov	r4, r1
 800536c:	4616      	mov	r6, r2
 800536e:	d505      	bpl.n	800537c <__swrite+0x1e>
 8005370:	2302      	movs	r3, #2
 8005372:	2200      	movs	r2, #0
 8005374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005378:	f000 f85a 	bl	8005430 <_lseek_r>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	4632      	mov	r2, r6
 8005380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	4628      	mov	r0, r5
 8005388:	463b      	mov	r3, r7
 800538a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	f000 b871 	b.w	8005478 <_write_r>

08005396 <__sseek>:
 8005396:	b510      	push	{r4, lr}
 8005398:	460c      	mov	r4, r1
 800539a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539e:	f000 f847 	bl	8005430 <_lseek_r>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	bf15      	itete	ne
 80053a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053b2:	81a3      	strheq	r3, [r4, #12]
 80053b4:	bf18      	it	ne
 80053b6:	81a3      	strhne	r3, [r4, #12]
 80053b8:	bd10      	pop	{r4, pc}

080053ba <__sclose>:
 80053ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053be:	f000 b827 	b.w	8005410 <_close_r>

080053c2 <memmove>:
 80053c2:	4288      	cmp	r0, r1
 80053c4:	b510      	push	{r4, lr}
 80053c6:	eb01 0402 	add.w	r4, r1, r2
 80053ca:	d902      	bls.n	80053d2 <memmove+0x10>
 80053cc:	4284      	cmp	r4, r0
 80053ce:	4623      	mov	r3, r4
 80053d0:	d807      	bhi.n	80053e2 <memmove+0x20>
 80053d2:	1e43      	subs	r3, r0, #1
 80053d4:	42a1      	cmp	r1, r4
 80053d6:	d008      	beq.n	80053ea <memmove+0x28>
 80053d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053e0:	e7f8      	b.n	80053d4 <memmove+0x12>
 80053e2:	4601      	mov	r1, r0
 80053e4:	4402      	add	r2, r0
 80053e6:	428a      	cmp	r2, r1
 80053e8:	d100      	bne.n	80053ec <memmove+0x2a>
 80053ea:	bd10      	pop	{r4, pc}
 80053ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053f4:	e7f7      	b.n	80053e6 <memmove+0x24>

080053f6 <memset>:
 80053f6:	4603      	mov	r3, r0
 80053f8:	4402      	add	r2, r0
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d100      	bne.n	8005400 <memset+0xa>
 80053fe:	4770      	bx	lr
 8005400:	f803 1b01 	strb.w	r1, [r3], #1
 8005404:	e7f9      	b.n	80053fa <memset+0x4>
	...

08005408 <_localeconv_r>:
 8005408:	4800      	ldr	r0, [pc, #0]	@ (800540c <_localeconv_r+0x4>)
 800540a:	4770      	bx	lr
 800540c:	2000015c 	.word	0x2000015c

08005410 <_close_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	2300      	movs	r3, #0
 8005414:	4d05      	ldr	r5, [pc, #20]	@ (800542c <_close_r+0x1c>)
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	f7fc fbe9 	bl	8001bf2 <_close>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_close_r+0x1a>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_close_r+0x1a>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	20000438 	.word	0x20000438

08005430 <_lseek_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	2200      	movs	r2, #0
 800543a:	4d05      	ldr	r5, [pc, #20]	@ (8005450 <_lseek_r+0x20>)
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fc fbfb 	bl	8001c3a <_lseek>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_lseek_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_lseek_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	20000438 	.word	0x20000438

08005454 <_read_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	2200      	movs	r2, #0
 800545e:	4d05      	ldr	r5, [pc, #20]	@ (8005474 <_read_r+0x20>)
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fc fb8c 	bl	8001b80 <_read>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_read_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_read_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000438 	.word	0x20000438

08005478 <_write_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	4611      	mov	r1, r2
 8005480:	2200      	movs	r2, #0
 8005482:	4d05      	ldr	r5, [pc, #20]	@ (8005498 <_write_r+0x20>)
 8005484:	602a      	str	r2, [r5, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	f7fc fb97 	bl	8001bba <_write>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_write_r+0x1e>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_write_r+0x1e>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20000438 	.word	0x20000438

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	@ (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000001c 	.word	0x2000001c

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	2600      	movs	r6, #0
 80054ac:	4d0c      	ldr	r5, [pc, #48]	@ (80054e0 <__libc_init_array+0x38>)
 80054ae:	4c0d      	ldr	r4, [pc, #52]	@ (80054e4 <__libc_init_array+0x3c>)
 80054b0:	1b64      	subs	r4, r4, r5
 80054b2:	10a4      	asrs	r4, r4, #2
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	f002 f856 	bl	8007568 <_init>
 80054bc:	2600      	movs	r6, #0
 80054be:	4d0a      	ldr	r5, [pc, #40]	@ (80054e8 <__libc_init_array+0x40>)
 80054c0:	4c0a      	ldr	r4, [pc, #40]	@ (80054ec <__libc_init_array+0x44>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08007948 	.word	0x08007948
 80054e4:	08007948 	.word	0x08007948
 80054e8:	08007948 	.word	0x08007948
 80054ec:	0800794c 	.word	0x0800794c

080054f0 <__retarget_lock_init_recursive>:
 80054f0:	4770      	bx	lr

080054f2 <__retarget_lock_acquire_recursive>:
 80054f2:	4770      	bx	lr

080054f4 <__retarget_lock_release_recursive>:
 80054f4:	4770      	bx	lr

080054f6 <memchr>:
 80054f6:	4603      	mov	r3, r0
 80054f8:	b510      	push	{r4, lr}
 80054fa:	b2c9      	uxtb	r1, r1
 80054fc:	4402      	add	r2, r0
 80054fe:	4293      	cmp	r3, r2
 8005500:	4618      	mov	r0, r3
 8005502:	d101      	bne.n	8005508 <memchr+0x12>
 8005504:	2000      	movs	r0, #0
 8005506:	e003      	b.n	8005510 <memchr+0x1a>
 8005508:	7804      	ldrb	r4, [r0, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	428c      	cmp	r4, r1
 800550e:	d1f6      	bne.n	80054fe <memchr+0x8>
 8005510:	bd10      	pop	{r4, pc}

08005512 <quorem>:
 8005512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005516:	6903      	ldr	r3, [r0, #16]
 8005518:	690c      	ldr	r4, [r1, #16]
 800551a:	4607      	mov	r7, r0
 800551c:	42a3      	cmp	r3, r4
 800551e:	db7e      	blt.n	800561e <quorem+0x10c>
 8005520:	3c01      	subs	r4, #1
 8005522:	00a3      	lsls	r3, r4, #2
 8005524:	f100 0514 	add.w	r5, r0, #20
 8005528:	f101 0814 	add.w	r8, r1, #20
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800553c:	3301      	adds	r3, #1
 800553e:	429a      	cmp	r2, r3
 8005540:	fbb2 f6f3 	udiv	r6, r2, r3
 8005544:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005548:	d32e      	bcc.n	80055a8 <quorem+0x96>
 800554a:	f04f 0a00 	mov.w	sl, #0
 800554e:	46c4      	mov	ip, r8
 8005550:	46ae      	mov	lr, r5
 8005552:	46d3      	mov	fp, sl
 8005554:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005558:	b298      	uxth	r0, r3
 800555a:	fb06 a000 	mla	r0, r6, r0, sl
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	0c02      	lsrs	r2, r0, #16
 8005562:	fb06 2303 	mla	r3, r6, r3, r2
 8005566:	f8de 2000 	ldr.w	r2, [lr]
 800556a:	b280      	uxth	r0, r0
 800556c:	b292      	uxth	r2, r2
 800556e:	1a12      	subs	r2, r2, r0
 8005570:	445a      	add	r2, fp
 8005572:	f8de 0000 	ldr.w	r0, [lr]
 8005576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800557a:	b29b      	uxth	r3, r3
 800557c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005580:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005584:	b292      	uxth	r2, r2
 8005586:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800558a:	45e1      	cmp	r9, ip
 800558c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005590:	f84e 2b04 	str.w	r2, [lr], #4
 8005594:	d2de      	bcs.n	8005554 <quorem+0x42>
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	58eb      	ldr	r3, [r5, r3]
 800559a:	b92b      	cbnz	r3, 80055a8 <quorem+0x96>
 800559c:	9b01      	ldr	r3, [sp, #4]
 800559e:	3b04      	subs	r3, #4
 80055a0:	429d      	cmp	r5, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	d32f      	bcc.n	8005606 <quorem+0xf4>
 80055a6:	613c      	str	r4, [r7, #16]
 80055a8:	4638      	mov	r0, r7
 80055aa:	f001 f97b 	bl	80068a4 <__mcmp>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	db25      	blt.n	80055fe <quorem+0xec>
 80055b2:	4629      	mov	r1, r5
 80055b4:	2000      	movs	r0, #0
 80055b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80055ba:	f8d1 c000 	ldr.w	ip, [r1]
 80055be:	fa1f fe82 	uxth.w	lr, r2
 80055c2:	fa1f f38c 	uxth.w	r3, ip
 80055c6:	eba3 030e 	sub.w	r3, r3, lr
 80055ca:	4403      	add	r3, r0
 80055cc:	0c12      	lsrs	r2, r2, #16
 80055ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055dc:	45c1      	cmp	r9, r8
 80055de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055e2:	f841 3b04 	str.w	r3, [r1], #4
 80055e6:	d2e6      	bcs.n	80055b6 <quorem+0xa4>
 80055e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055f0:	b922      	cbnz	r2, 80055fc <quorem+0xea>
 80055f2:	3b04      	subs	r3, #4
 80055f4:	429d      	cmp	r5, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	d30b      	bcc.n	8005612 <quorem+0x100>
 80055fa:	613c      	str	r4, [r7, #16]
 80055fc:	3601      	adds	r6, #1
 80055fe:	4630      	mov	r0, r6
 8005600:	b003      	add	sp, #12
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	3b04      	subs	r3, #4
 800560a:	2a00      	cmp	r2, #0
 800560c:	d1cb      	bne.n	80055a6 <quorem+0x94>
 800560e:	3c01      	subs	r4, #1
 8005610:	e7c6      	b.n	80055a0 <quorem+0x8e>
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	3b04      	subs	r3, #4
 8005616:	2a00      	cmp	r2, #0
 8005618:	d1ef      	bne.n	80055fa <quorem+0xe8>
 800561a:	3c01      	subs	r4, #1
 800561c:	e7ea      	b.n	80055f4 <quorem+0xe2>
 800561e:	2000      	movs	r0, #0
 8005620:	e7ee      	b.n	8005600 <quorem+0xee>
 8005622:	0000      	movs	r0, r0
 8005624:	0000      	movs	r0, r0
	...

08005628 <_dtoa_r>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	69c7      	ldr	r7, [r0, #28]
 8005632:	b097      	sub	sp, #92	@ 0x5c
 8005634:	4683      	mov	fp, r0
 8005636:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800563a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800563c:	b97f      	cbnz	r7, 800565e <_dtoa_r+0x36>
 800563e:	2010      	movs	r0, #16
 8005640:	f000 fe02 	bl	8006248 <malloc>
 8005644:	4602      	mov	r2, r0
 8005646:	f8cb 001c 	str.w	r0, [fp, #28]
 800564a:	b920      	cbnz	r0, 8005656 <_dtoa_r+0x2e>
 800564c:	21ef      	movs	r1, #239	@ 0xef
 800564e:	4ba8      	ldr	r3, [pc, #672]	@ (80058f0 <_dtoa_r+0x2c8>)
 8005650:	48a8      	ldr	r0, [pc, #672]	@ (80058f4 <_dtoa_r+0x2cc>)
 8005652:	f001 fc4d 	bl	8006ef0 <__assert_func>
 8005656:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800565a:	6007      	str	r7, [r0, #0]
 800565c:	60c7      	str	r7, [r0, #12]
 800565e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	b159      	cbz	r1, 800567e <_dtoa_r+0x56>
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	2301      	movs	r3, #1
 800566a:	4093      	lsls	r3, r2
 800566c:	604a      	str	r2, [r1, #4]
 800566e:	608b      	str	r3, [r1, #8]
 8005670:	4658      	mov	r0, fp
 8005672:	f000 fedf 	bl	8006434 <_Bfree>
 8005676:	2200      	movs	r2, #0
 8005678:	f8db 301c 	ldr.w	r3, [fp, #28]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	1e2b      	subs	r3, r5, #0
 8005680:	bfaf      	iteee	ge
 8005682:	2300      	movge	r3, #0
 8005684:	2201      	movlt	r2, #1
 8005686:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800568a:	9303      	strlt	r3, [sp, #12]
 800568c:	bfa8      	it	ge
 800568e:	6033      	strge	r3, [r6, #0]
 8005690:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005694:	4b98      	ldr	r3, [pc, #608]	@ (80058f8 <_dtoa_r+0x2d0>)
 8005696:	bfb8      	it	lt
 8005698:	6032      	strlt	r2, [r6, #0]
 800569a:	ea33 0308 	bics.w	r3, r3, r8
 800569e:	d112      	bne.n	80056c6 <_dtoa_r+0x9e>
 80056a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80056ac:	4323      	orrs	r3, r4
 80056ae:	f000 8550 	beq.w	8006152 <_dtoa_r+0xb2a>
 80056b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80058fc <_dtoa_r+0x2d4>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8552 	beq.w	8006162 <_dtoa_r+0xb3a>
 80056be:	f10a 0303 	add.w	r3, sl, #3
 80056c2:	f000 bd4c 	b.w	800615e <_dtoa_r+0xb36>
 80056c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80056ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	f7fb f967 	bl	80009a8 <__aeabi_dcmpeq>
 80056da:	4607      	mov	r7, r0
 80056dc:	b158      	cbz	r0, 80056f6 <_dtoa_r+0xce>
 80056de:	2301      	movs	r3, #1
 80056e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056e6:	b113      	cbz	r3, 80056ee <_dtoa_r+0xc6>
 80056e8:	4b85      	ldr	r3, [pc, #532]	@ (8005900 <_dtoa_r+0x2d8>)
 80056ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005904 <_dtoa_r+0x2dc>
 80056f2:	f000 bd36 	b.w	8006162 <_dtoa_r+0xb3a>
 80056f6:	ab14      	add	r3, sp, #80	@ 0x50
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	ab15      	add	r3, sp, #84	@ 0x54
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	4658      	mov	r0, fp
 8005700:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005704:	f001 f97e 	bl	8006a04 <__d2b>
 8005708:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800570c:	4681      	mov	r9, r0
 800570e:	2e00      	cmp	r6, #0
 8005710:	d077      	beq.n	8005802 <_dtoa_r+0x1da>
 8005712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005718:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800571c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005720:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005724:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005728:	9712      	str	r7, [sp, #72]	@ 0x48
 800572a:	4619      	mov	r1, r3
 800572c:	2200      	movs	r2, #0
 800572e:	4b76      	ldr	r3, [pc, #472]	@ (8005908 <_dtoa_r+0x2e0>)
 8005730:	f7fa fd1a 	bl	8000168 <__aeabi_dsub>
 8005734:	a368      	add	r3, pc, #416	@ (adr r3, 80058d8 <_dtoa_r+0x2b0>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fa fecd 	bl	80004d8 <__aeabi_dmul>
 800573e:	a368      	add	r3, pc, #416	@ (adr r3, 80058e0 <_dtoa_r+0x2b8>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa fd12 	bl	800016c <__adddf3>
 8005748:	4604      	mov	r4, r0
 800574a:	4630      	mov	r0, r6
 800574c:	460d      	mov	r5, r1
 800574e:	f7fa fe59 	bl	8000404 <__aeabi_i2d>
 8005752:	a365      	add	r3, pc, #404	@ (adr r3, 80058e8 <_dtoa_r+0x2c0>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	f7fa febe 	bl	80004d8 <__aeabi_dmul>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4620      	mov	r0, r4
 8005762:	4629      	mov	r1, r5
 8005764:	f7fa fd02 	bl	800016c <__adddf3>
 8005768:	4604      	mov	r4, r0
 800576a:	460d      	mov	r5, r1
 800576c:	f7fb f964 	bl	8000a38 <__aeabi_d2iz>
 8005770:	2200      	movs	r2, #0
 8005772:	4607      	mov	r7, r0
 8005774:	2300      	movs	r3, #0
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fb f91f 	bl	80009bc <__aeabi_dcmplt>
 800577e:	b140      	cbz	r0, 8005792 <_dtoa_r+0x16a>
 8005780:	4638      	mov	r0, r7
 8005782:	f7fa fe3f 	bl	8000404 <__aeabi_i2d>
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	f7fb f90d 	bl	80009a8 <__aeabi_dcmpeq>
 800578e:	b900      	cbnz	r0, 8005792 <_dtoa_r+0x16a>
 8005790:	3f01      	subs	r7, #1
 8005792:	2f16      	cmp	r7, #22
 8005794:	d853      	bhi.n	800583e <_dtoa_r+0x216>
 8005796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800579a:	4b5c      	ldr	r3, [pc, #368]	@ (800590c <_dtoa_r+0x2e4>)
 800579c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f7fb f90a 	bl	80009bc <__aeabi_dcmplt>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d04a      	beq.n	8005842 <_dtoa_r+0x21a>
 80057ac:	2300      	movs	r3, #0
 80057ae:	3f01      	subs	r7, #1
 80057b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80057b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057b4:	1b9b      	subs	r3, r3, r6
 80057b6:	1e5a      	subs	r2, r3, #1
 80057b8:	bf46      	itte	mi
 80057ba:	f1c3 0801 	rsbmi	r8, r3, #1
 80057be:	2300      	movmi	r3, #0
 80057c0:	f04f 0800 	movpl.w	r8, #0
 80057c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80057c6:	bf48      	it	mi
 80057c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80057ca:	2f00      	cmp	r7, #0
 80057cc:	db3b      	blt.n	8005846 <_dtoa_r+0x21e>
 80057ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d0:	970e      	str	r7, [sp, #56]	@ 0x38
 80057d2:	443b      	add	r3, r7
 80057d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d6:	2300      	movs	r3, #0
 80057d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057dc:	2b09      	cmp	r3, #9
 80057de:	d866      	bhi.n	80058ae <_dtoa_r+0x286>
 80057e0:	2b05      	cmp	r3, #5
 80057e2:	bfc4      	itt	gt
 80057e4:	3b04      	subgt	r3, #4
 80057e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80057e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057ea:	bfc8      	it	gt
 80057ec:	2400      	movgt	r4, #0
 80057ee:	f1a3 0302 	sub.w	r3, r3, #2
 80057f2:	bfd8      	it	le
 80057f4:	2401      	movle	r4, #1
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d864      	bhi.n	80058c4 <_dtoa_r+0x29c>
 80057fa:	e8df f003 	tbb	[pc, r3]
 80057fe:	382b      	.short	0x382b
 8005800:	5636      	.short	0x5636
 8005802:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005806:	441e      	add	r6, r3
 8005808:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800580c:	2b20      	cmp	r3, #32
 800580e:	bfc1      	itttt	gt
 8005810:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005814:	fa08 f803 	lslgt.w	r8, r8, r3
 8005818:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800581c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005820:	bfd6      	itet	le
 8005822:	f1c3 0320 	rsble	r3, r3, #32
 8005826:	ea48 0003 	orrgt.w	r0, r8, r3
 800582a:	fa04 f003 	lslle.w	r0, r4, r3
 800582e:	f7fa fdd9 	bl	80003e4 <__aeabi_ui2d>
 8005832:	2201      	movs	r2, #1
 8005834:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005838:	3e01      	subs	r6, #1
 800583a:	9212      	str	r2, [sp, #72]	@ 0x48
 800583c:	e775      	b.n	800572a <_dtoa_r+0x102>
 800583e:	2301      	movs	r3, #1
 8005840:	e7b6      	b.n	80057b0 <_dtoa_r+0x188>
 8005842:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005844:	e7b5      	b.n	80057b2 <_dtoa_r+0x18a>
 8005846:	427b      	negs	r3, r7
 8005848:	930a      	str	r3, [sp, #40]	@ 0x28
 800584a:	2300      	movs	r3, #0
 800584c:	eba8 0807 	sub.w	r8, r8, r7
 8005850:	930e      	str	r3, [sp, #56]	@ 0x38
 8005852:	e7c2      	b.n	80057da <_dtoa_r+0x1b2>
 8005854:	2300      	movs	r3, #0
 8005856:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005858:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800585a:	2b00      	cmp	r3, #0
 800585c:	dc35      	bgt.n	80058ca <_dtoa_r+0x2a2>
 800585e:	2301      	movs	r3, #1
 8005860:	461a      	mov	r2, r3
 8005862:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005866:	9221      	str	r2, [sp, #132]	@ 0x84
 8005868:	e00b      	b.n	8005882 <_dtoa_r+0x25a>
 800586a:	2301      	movs	r3, #1
 800586c:	e7f3      	b.n	8005856 <_dtoa_r+0x22e>
 800586e:	2300      	movs	r3, #0
 8005870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005872:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	9308      	str	r3, [sp, #32]
 8005878:	3301      	adds	r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	9307      	str	r3, [sp, #28]
 800587e:	bfb8      	it	lt
 8005880:	2301      	movlt	r3, #1
 8005882:	2100      	movs	r1, #0
 8005884:	2204      	movs	r2, #4
 8005886:	f8db 001c 	ldr.w	r0, [fp, #28]
 800588a:	f102 0514 	add.w	r5, r2, #20
 800588e:	429d      	cmp	r5, r3
 8005890:	d91f      	bls.n	80058d2 <_dtoa_r+0x2aa>
 8005892:	6041      	str	r1, [r0, #4]
 8005894:	4658      	mov	r0, fp
 8005896:	f000 fd8d 	bl	80063b4 <_Balloc>
 800589a:	4682      	mov	sl, r0
 800589c:	2800      	cmp	r0, #0
 800589e:	d139      	bne.n	8005914 <_dtoa_r+0x2ec>
 80058a0:	4602      	mov	r2, r0
 80058a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80058a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005910 <_dtoa_r+0x2e8>)
 80058a8:	e6d2      	b.n	8005650 <_dtoa_r+0x28>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e7e0      	b.n	8005870 <_dtoa_r+0x248>
 80058ae:	2401      	movs	r4, #1
 80058b0:	2300      	movs	r3, #0
 80058b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	2200      	movs	r2, #0
 80058bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80058c0:	2312      	movs	r3, #18
 80058c2:	e7d0      	b.n	8005866 <_dtoa_r+0x23e>
 80058c4:	2301      	movs	r3, #1
 80058c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058c8:	e7f5      	b.n	80058b6 <_dtoa_r+0x28e>
 80058ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80058d0:	e7d7      	b.n	8005882 <_dtoa_r+0x25a>
 80058d2:	3101      	adds	r1, #1
 80058d4:	0052      	lsls	r2, r2, #1
 80058d6:	e7d8      	b.n	800588a <_dtoa_r+0x262>
 80058d8:	636f4361 	.word	0x636f4361
 80058dc:	3fd287a7 	.word	0x3fd287a7
 80058e0:	8b60c8b3 	.word	0x8b60c8b3
 80058e4:	3fc68a28 	.word	0x3fc68a28
 80058e8:	509f79fb 	.word	0x509f79fb
 80058ec:	3fd34413 	.word	0x3fd34413
 80058f0:	08007613 	.word	0x08007613
 80058f4:	0800762a 	.word	0x0800762a
 80058f8:	7ff00000 	.word	0x7ff00000
 80058fc:	0800760f 	.word	0x0800760f
 8005900:	080075e3 	.word	0x080075e3
 8005904:	080075e2 	.word	0x080075e2
 8005908:	3ff80000 	.word	0x3ff80000
 800590c:	08007720 	.word	0x08007720
 8005910:	08007682 	.word	0x08007682
 8005914:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005918:	6018      	str	r0, [r3, #0]
 800591a:	9b07      	ldr	r3, [sp, #28]
 800591c:	2b0e      	cmp	r3, #14
 800591e:	f200 80a4 	bhi.w	8005a6a <_dtoa_r+0x442>
 8005922:	2c00      	cmp	r4, #0
 8005924:	f000 80a1 	beq.w	8005a6a <_dtoa_r+0x442>
 8005928:	2f00      	cmp	r7, #0
 800592a:	dd33      	ble.n	8005994 <_dtoa_r+0x36c>
 800592c:	4b86      	ldr	r3, [pc, #536]	@ (8005b48 <_dtoa_r+0x520>)
 800592e:	f007 020f 	and.w	r2, r7, #15
 8005932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005936:	05f8      	lsls	r0, r7, #23
 8005938:	e9d3 3400 	ldrd	r3, r4, [r3]
 800593c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005940:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005944:	d516      	bpl.n	8005974 <_dtoa_r+0x34c>
 8005946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800594a:	4b80      	ldr	r3, [pc, #512]	@ (8005b4c <_dtoa_r+0x524>)
 800594c:	2603      	movs	r6, #3
 800594e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005952:	f7fa feeb 	bl	800072c <__aeabi_ddiv>
 8005956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800595a:	f004 040f 	and.w	r4, r4, #15
 800595e:	4d7b      	ldr	r5, [pc, #492]	@ (8005b4c <_dtoa_r+0x524>)
 8005960:	b954      	cbnz	r4, 8005978 <_dtoa_r+0x350>
 8005962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800596a:	f7fa fedf 	bl	800072c <__aeabi_ddiv>
 800596e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005972:	e028      	b.n	80059c6 <_dtoa_r+0x39e>
 8005974:	2602      	movs	r6, #2
 8005976:	e7f2      	b.n	800595e <_dtoa_r+0x336>
 8005978:	07e1      	lsls	r1, r4, #31
 800597a:	d508      	bpl.n	800598e <_dtoa_r+0x366>
 800597c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005980:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005984:	f7fa fda8 	bl	80004d8 <__aeabi_dmul>
 8005988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800598c:	3601      	adds	r6, #1
 800598e:	1064      	asrs	r4, r4, #1
 8005990:	3508      	adds	r5, #8
 8005992:	e7e5      	b.n	8005960 <_dtoa_r+0x338>
 8005994:	f000 80d2 	beq.w	8005b3c <_dtoa_r+0x514>
 8005998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800599c:	427c      	negs	r4, r7
 800599e:	4b6a      	ldr	r3, [pc, #424]	@ (8005b48 <_dtoa_r+0x520>)
 80059a0:	f004 020f 	and.w	r2, r4, #15
 80059a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f7fa fd94 	bl	80004d8 <__aeabi_dmul>
 80059b0:	2602      	movs	r6, #2
 80059b2:	2300      	movs	r3, #0
 80059b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b8:	4d64      	ldr	r5, [pc, #400]	@ (8005b4c <_dtoa_r+0x524>)
 80059ba:	1124      	asrs	r4, r4, #4
 80059bc:	2c00      	cmp	r4, #0
 80059be:	f040 80b2 	bne.w	8005b26 <_dtoa_r+0x4fe>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1d3      	bne.n	800596e <_dtoa_r+0x346>
 80059c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80059ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80b7 	beq.w	8005b40 <_dtoa_r+0x518>
 80059d2:	2200      	movs	r2, #0
 80059d4:	4620      	mov	r0, r4
 80059d6:	4629      	mov	r1, r5
 80059d8:	4b5d      	ldr	r3, [pc, #372]	@ (8005b50 <_dtoa_r+0x528>)
 80059da:	f7fa ffef 	bl	80009bc <__aeabi_dcmplt>
 80059de:	2800      	cmp	r0, #0
 80059e0:	f000 80ae 	beq.w	8005b40 <_dtoa_r+0x518>
 80059e4:	9b07      	ldr	r3, [sp, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80aa 	beq.w	8005b40 <_dtoa_r+0x518>
 80059ec:	9b08      	ldr	r3, [sp, #32]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dd37      	ble.n	8005a62 <_dtoa_r+0x43a>
 80059f2:	1e7b      	subs	r3, r7, #1
 80059f4:	4620      	mov	r0, r4
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	2200      	movs	r2, #0
 80059fa:	4629      	mov	r1, r5
 80059fc:	4b55      	ldr	r3, [pc, #340]	@ (8005b54 <_dtoa_r+0x52c>)
 80059fe:	f7fa fd6b 	bl	80004d8 <__aeabi_dmul>
 8005a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a06:	9c08      	ldr	r4, [sp, #32]
 8005a08:	3601      	adds	r6, #1
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f7fa fcfa 	bl	8000404 <__aeabi_i2d>
 8005a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a14:	f7fa fd60 	bl	80004d8 <__aeabi_dmul>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b58 <_dtoa_r+0x530>)
 8005a1c:	f7fa fba6 	bl	800016c <__adddf3>
 8005a20:	4605      	mov	r5, r0
 8005a22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	f040 809a 	bne.w	8005b60 <_dtoa_r+0x538>
 8005a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a30:	2200      	movs	r2, #0
 8005a32:	4b4a      	ldr	r3, [pc, #296]	@ (8005b5c <_dtoa_r+0x534>)
 8005a34:	f7fa fb98 	bl	8000168 <__aeabi_dsub>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4633      	mov	r3, r6
 8005a44:	f7fa ffd8 	bl	80009f8 <__aeabi_dcmpgt>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	f040 828e 	bne.w	8005f6a <_dtoa_r+0x942>
 8005a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a52:	462a      	mov	r2, r5
 8005a54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a58:	f7fa ffb0 	bl	80009bc <__aeabi_dcmplt>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	f040 8127 	bne.w	8005cb0 <_dtoa_r+0x688>
 8005a62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005a6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f2c0 8163 	blt.w	8005d38 <_dtoa_r+0x710>
 8005a72:	2f0e      	cmp	r7, #14
 8005a74:	f300 8160 	bgt.w	8005d38 <_dtoa_r+0x710>
 8005a78:	4b33      	ldr	r3, [pc, #204]	@ (8005b48 <_dtoa_r+0x520>)
 8005a7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a82:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da03      	bge.n	8005a94 <_dtoa_r+0x46c>
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f340 8100 	ble.w	8005c94 <_dtoa_r+0x66c>
 8005a94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a98:	4656      	mov	r6, sl
 8005a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fa fe43 	bl	800072c <__aeabi_ddiv>
 8005aa6:	f7fa ffc7 	bl	8000a38 <__aeabi_d2iz>
 8005aaa:	4680      	mov	r8, r0
 8005aac:	f7fa fcaa 	bl	8000404 <__aeabi_i2d>
 8005ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab4:	f7fa fd10 	bl	80004d8 <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4620      	mov	r0, r4
 8005abe:	4629      	mov	r1, r5
 8005ac0:	f7fa fb52 	bl	8000168 <__aeabi_dsub>
 8005ac4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ac8:	9d07      	ldr	r5, [sp, #28]
 8005aca:	f806 4b01 	strb.w	r4, [r6], #1
 8005ace:	eba6 040a 	sub.w	r4, r6, sl
 8005ad2:	42a5      	cmp	r5, r4
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	f040 8116 	bne.w	8005d08 <_dtoa_r+0x6e0>
 8005adc:	f7fa fb46 	bl	800016c <__adddf3>
 8005ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	f7fa ff86 	bl	80009f8 <__aeabi_dcmpgt>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f040 80f8 	bne.w	8005ce2 <_dtoa_r+0x6ba>
 8005af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fa ff55 	bl	80009a8 <__aeabi_dcmpeq>
 8005afe:	b118      	cbz	r0, 8005b08 <_dtoa_r+0x4e0>
 8005b00:	f018 0f01 	tst.w	r8, #1
 8005b04:	f040 80ed 	bne.w	8005ce2 <_dtoa_r+0x6ba>
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4658      	mov	r0, fp
 8005b0c:	f000 fc92 	bl	8006434 <_Bfree>
 8005b10:	2300      	movs	r3, #0
 8005b12:	7033      	strb	r3, [r6, #0]
 8005b14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005b16:	3701      	adds	r7, #1
 8005b18:	601f      	str	r7, [r3, #0]
 8005b1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8320 	beq.w	8006162 <_dtoa_r+0xb3a>
 8005b22:	601e      	str	r6, [r3, #0]
 8005b24:	e31d      	b.n	8006162 <_dtoa_r+0xb3a>
 8005b26:	07e2      	lsls	r2, r4, #31
 8005b28:	d505      	bpl.n	8005b36 <_dtoa_r+0x50e>
 8005b2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b2e:	f7fa fcd3 	bl	80004d8 <__aeabi_dmul>
 8005b32:	2301      	movs	r3, #1
 8005b34:	3601      	adds	r6, #1
 8005b36:	1064      	asrs	r4, r4, #1
 8005b38:	3508      	adds	r5, #8
 8005b3a:	e73f      	b.n	80059bc <_dtoa_r+0x394>
 8005b3c:	2602      	movs	r6, #2
 8005b3e:	e742      	b.n	80059c6 <_dtoa_r+0x39e>
 8005b40:	9c07      	ldr	r4, [sp, #28]
 8005b42:	9704      	str	r7, [sp, #16]
 8005b44:	e761      	b.n	8005a0a <_dtoa_r+0x3e2>
 8005b46:	bf00      	nop
 8005b48:	08007720 	.word	0x08007720
 8005b4c:	080076f8 	.word	0x080076f8
 8005b50:	3ff00000 	.word	0x3ff00000
 8005b54:	40240000 	.word	0x40240000
 8005b58:	401c0000 	.word	0x401c0000
 8005b5c:	40140000 	.word	0x40140000
 8005b60:	4b70      	ldr	r3, [pc, #448]	@ (8005d24 <_dtoa_r+0x6fc>)
 8005b62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b6c:	4454      	add	r4, sl
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d045      	beq.n	8005bfe <_dtoa_r+0x5d6>
 8005b72:	2000      	movs	r0, #0
 8005b74:	496c      	ldr	r1, [pc, #432]	@ (8005d28 <_dtoa_r+0x700>)
 8005b76:	f7fa fdd9 	bl	800072c <__aeabi_ddiv>
 8005b7a:	4633      	mov	r3, r6
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	f7fa faf3 	bl	8000168 <__aeabi_dsub>
 8005b82:	4656      	mov	r6, sl
 8005b84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b8c:	f7fa ff54 	bl	8000a38 <__aeabi_d2iz>
 8005b90:	4605      	mov	r5, r0
 8005b92:	f7fa fc37 	bl	8000404 <__aeabi_i2d>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9e:	f7fa fae3 	bl	8000168 <__aeabi_dsub>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	3530      	adds	r5, #48	@ 0x30
 8005ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bb0:	f806 5b01 	strb.w	r5, [r6], #1
 8005bb4:	f7fa ff02 	bl	80009bc <__aeabi_dcmplt>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d163      	bne.n	8005c84 <_dtoa_r+0x65c>
 8005bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	495a      	ldr	r1, [pc, #360]	@ (8005d2c <_dtoa_r+0x704>)
 8005bc4:	f7fa fad0 	bl	8000168 <__aeabi_dsub>
 8005bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bcc:	f7fa fef6 	bl	80009bc <__aeabi_dcmplt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f040 8087 	bne.w	8005ce4 <_dtoa_r+0x6bc>
 8005bd6:	42a6      	cmp	r6, r4
 8005bd8:	f43f af43 	beq.w	8005a62 <_dtoa_r+0x43a>
 8005bdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005be0:	2200      	movs	r2, #0
 8005be2:	4b53      	ldr	r3, [pc, #332]	@ (8005d30 <_dtoa_r+0x708>)
 8005be4:	f7fa fc78 	bl	80004d8 <__aeabi_dmul>
 8005be8:	2200      	movs	r2, #0
 8005bea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8005d30 <_dtoa_r+0x708>)
 8005bf4:	f7fa fc70 	bl	80004d8 <__aeabi_dmul>
 8005bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bfc:	e7c4      	b.n	8005b88 <_dtoa_r+0x560>
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	f7fa fc69 	bl	80004d8 <__aeabi_dmul>
 8005c06:	4656      	mov	r6, sl
 8005c08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c0c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c12:	f7fa ff11 	bl	8000a38 <__aeabi_d2iz>
 8005c16:	4605      	mov	r5, r0
 8005c18:	f7fa fbf4 	bl	8000404 <__aeabi_i2d>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c24:	f7fa faa0 	bl	8000168 <__aeabi_dsub>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	3530      	adds	r5, #48	@ 0x30
 8005c2e:	f806 5b01 	strb.w	r5, [r6], #1
 8005c32:	42a6      	cmp	r6, r4
 8005c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	d124      	bne.n	8005c88 <_dtoa_r+0x660>
 8005c3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c42:	4b39      	ldr	r3, [pc, #228]	@ (8005d28 <_dtoa_r+0x700>)
 8005c44:	f7fa fa92 	bl	800016c <__adddf3>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c50:	f7fa fed2 	bl	80009f8 <__aeabi_dcmpgt>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d145      	bne.n	8005ce4 <_dtoa_r+0x6bc>
 8005c58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	4932      	ldr	r1, [pc, #200]	@ (8005d28 <_dtoa_r+0x700>)
 8005c60:	f7fa fa82 	bl	8000168 <__aeabi_dsub>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6c:	f7fa fea6 	bl	80009bc <__aeabi_dcmplt>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f43f aef6 	beq.w	8005a62 <_dtoa_r+0x43a>
 8005c76:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c78:	1e73      	subs	r3, r6, #1
 8005c7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c80:	2b30      	cmp	r3, #48	@ 0x30
 8005c82:	d0f8      	beq.n	8005c76 <_dtoa_r+0x64e>
 8005c84:	9f04      	ldr	r7, [sp, #16]
 8005c86:	e73f      	b.n	8005b08 <_dtoa_r+0x4e0>
 8005c88:	4b29      	ldr	r3, [pc, #164]	@ (8005d30 <_dtoa_r+0x708>)
 8005c8a:	f7fa fc25 	bl	80004d8 <__aeabi_dmul>
 8005c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c92:	e7bc      	b.n	8005c0e <_dtoa_r+0x5e6>
 8005c94:	d10c      	bne.n	8005cb0 <_dtoa_r+0x688>
 8005c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4b25      	ldr	r3, [pc, #148]	@ (8005d34 <_dtoa_r+0x70c>)
 8005c9e:	f7fa fc1b 	bl	80004d8 <__aeabi_dmul>
 8005ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ca6:	f7fa fe9d 	bl	80009e4 <__aeabi_dcmpge>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f000 815b 	beq.w	8005f66 <_dtoa_r+0x93e>
 8005cb0:	2400      	movs	r4, #0
 8005cb2:	4625      	mov	r5, r4
 8005cb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cb6:	4656      	mov	r6, sl
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	2700      	movs	r7, #0
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4658      	mov	r0, fp
 8005cc2:	f000 fbb7 	bl	8006434 <_Bfree>
 8005cc6:	2d00      	cmp	r5, #0
 8005cc8:	d0dc      	beq.n	8005c84 <_dtoa_r+0x65c>
 8005cca:	b12f      	cbz	r7, 8005cd8 <_dtoa_r+0x6b0>
 8005ccc:	42af      	cmp	r7, r5
 8005cce:	d003      	beq.n	8005cd8 <_dtoa_r+0x6b0>
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	4658      	mov	r0, fp
 8005cd4:	f000 fbae 	bl	8006434 <_Bfree>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4658      	mov	r0, fp
 8005cdc:	f000 fbaa 	bl	8006434 <_Bfree>
 8005ce0:	e7d0      	b.n	8005c84 <_dtoa_r+0x65c>
 8005ce2:	9704      	str	r7, [sp, #16]
 8005ce4:	4633      	mov	r3, r6
 8005ce6:	461e      	mov	r6, r3
 8005ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cec:	2a39      	cmp	r2, #57	@ 0x39
 8005cee:	d107      	bne.n	8005d00 <_dtoa_r+0x6d8>
 8005cf0:	459a      	cmp	sl, r3
 8005cf2:	d1f8      	bne.n	8005ce6 <_dtoa_r+0x6be>
 8005cf4:	9a04      	ldr	r2, [sp, #16]
 8005cf6:	3201      	adds	r2, #1
 8005cf8:	9204      	str	r2, [sp, #16]
 8005cfa:	2230      	movs	r2, #48	@ 0x30
 8005cfc:	f88a 2000 	strb.w	r2, [sl]
 8005d00:	781a      	ldrb	r2, [r3, #0]
 8005d02:	3201      	adds	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e7bd      	b.n	8005c84 <_dtoa_r+0x65c>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <_dtoa_r+0x708>)
 8005d0c:	f7fa fbe4 	bl	80004d8 <__aeabi_dmul>
 8005d10:	2200      	movs	r2, #0
 8005d12:	2300      	movs	r3, #0
 8005d14:	4604      	mov	r4, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	f7fa fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f43f aebc 	beq.w	8005a9a <_dtoa_r+0x472>
 8005d22:	e6f1      	b.n	8005b08 <_dtoa_r+0x4e0>
 8005d24:	08007720 	.word	0x08007720
 8005d28:	3fe00000 	.word	0x3fe00000
 8005d2c:	3ff00000 	.word	0x3ff00000
 8005d30:	40240000 	.word	0x40240000
 8005d34:	40140000 	.word	0x40140000
 8005d38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	f000 80db 	beq.w	8005ef6 <_dtoa_r+0x8ce>
 8005d40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d42:	2a01      	cmp	r2, #1
 8005d44:	f300 80bf 	bgt.w	8005ec6 <_dtoa_r+0x89e>
 8005d48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	f000 80b7 	beq.w	8005ebe <_dtoa_r+0x896>
 8005d50:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d54:	4646      	mov	r6, r8
 8005d56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	441a      	add	r2, r3
 8005d5e:	4658      	mov	r0, fp
 8005d60:	4498      	add	r8, r3
 8005d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d64:	f000 fc1a 	bl	800659c <__i2b>
 8005d68:	4605      	mov	r5, r0
 8005d6a:	b15e      	cbz	r6, 8005d84 <_dtoa_r+0x75c>
 8005d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	dd08      	ble.n	8005d84 <_dtoa_r+0x75c>
 8005d72:	42b3      	cmp	r3, r6
 8005d74:	bfa8      	it	ge
 8005d76:	4633      	movge	r3, r6
 8005d78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d7a:	eba8 0803 	sub.w	r8, r8, r3
 8005d7e:	1af6      	subs	r6, r6, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d86:	b1f3      	cbz	r3, 8005dc6 <_dtoa_r+0x79e>
 8005d88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80b7 	beq.w	8005efe <_dtoa_r+0x8d6>
 8005d90:	b18c      	cbz	r4, 8005db6 <_dtoa_r+0x78e>
 8005d92:	4629      	mov	r1, r5
 8005d94:	4622      	mov	r2, r4
 8005d96:	4658      	mov	r0, fp
 8005d98:	f000 fcbe 	bl	8006718 <__pow5mult>
 8005d9c:	464a      	mov	r2, r9
 8005d9e:	4601      	mov	r1, r0
 8005da0:	4605      	mov	r5, r0
 8005da2:	4658      	mov	r0, fp
 8005da4:	f000 fc10 	bl	80065c8 <__multiply>
 8005da8:	4649      	mov	r1, r9
 8005daa:	9004      	str	r0, [sp, #16]
 8005dac:	4658      	mov	r0, fp
 8005dae:	f000 fb41 	bl	8006434 <_Bfree>
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	4699      	mov	r9, r3
 8005db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db8:	1b1a      	subs	r2, r3, r4
 8005dba:	d004      	beq.n	8005dc6 <_dtoa_r+0x79e>
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	4658      	mov	r0, fp
 8005dc0:	f000 fcaa 	bl	8006718 <__pow5mult>
 8005dc4:	4681      	mov	r9, r0
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4658      	mov	r0, fp
 8005dca:	f000 fbe7 	bl	800659c <__i2b>
 8005dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 81c9 	beq.w	800616a <_dtoa_r+0xb42>
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4601      	mov	r1, r0
 8005ddc:	4658      	mov	r0, fp
 8005dde:	f000 fc9b 	bl	8006718 <__pow5mult>
 8005de2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005de4:	4604      	mov	r4, r0
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	f300 808f 	bgt.w	8005f0a <_dtoa_r+0x8e2>
 8005dec:	9b02      	ldr	r3, [sp, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 8087 	bne.w	8005f02 <_dtoa_r+0x8da>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 8083 	bne.w	8005f06 <_dtoa_r+0x8de>
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e06:	0d1b      	lsrs	r3, r3, #20
 8005e08:	051b      	lsls	r3, r3, #20
 8005e0a:	b12b      	cbz	r3, 8005e18 <_dtoa_r+0x7f0>
 8005e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0e:	f108 0801 	add.w	r8, r8, #1
 8005e12:	3301      	adds	r3, #1
 8005e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e16:	2301      	movs	r3, #1
 8005e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 81aa 	beq.w	8006176 <_dtoa_r+0xb4e>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e28:	6918      	ldr	r0, [r3, #16]
 8005e2a:	f000 fb6b 	bl	8006504 <__hi0bits>
 8005e2e:	f1c0 0020 	rsb	r0, r0, #32
 8005e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e34:	4418      	add	r0, r3
 8005e36:	f010 001f 	ands.w	r0, r0, #31
 8005e3a:	d071      	beq.n	8005f20 <_dtoa_r+0x8f8>
 8005e3c:	f1c0 0320 	rsb	r3, r0, #32
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	dd65      	ble.n	8005f10 <_dtoa_r+0x8e8>
 8005e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e46:	f1c0 001c 	rsb	r0, r0, #28
 8005e4a:	4403      	add	r3, r0
 8005e4c:	4480      	add	r8, r0
 8005e4e:	4406      	add	r6, r0
 8005e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e52:	f1b8 0f00 	cmp.w	r8, #0
 8005e56:	dd05      	ble.n	8005e64 <_dtoa_r+0x83c>
 8005e58:	4649      	mov	r1, r9
 8005e5a:	4642      	mov	r2, r8
 8005e5c:	4658      	mov	r0, fp
 8005e5e:	f000 fcb5 	bl	80067cc <__lshift>
 8005e62:	4681      	mov	r9, r0
 8005e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd05      	ble.n	8005e76 <_dtoa_r+0x84e>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f000 fcac 	bl	80067cc <__lshift>
 8005e74:	4604      	mov	r4, r0
 8005e76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d053      	beq.n	8005f24 <_dtoa_r+0x8fc>
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4648      	mov	r0, r9
 8005e80:	f000 fd10 	bl	80068a4 <__mcmp>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	da4d      	bge.n	8005f24 <_dtoa_r+0x8fc>
 8005e88:	1e7b      	subs	r3, r7, #1
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	2300      	movs	r3, #0
 8005e92:	4658      	mov	r0, fp
 8005e94:	f000 faf0 	bl	8006478 <__multadd>
 8005e98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e9a:	4681      	mov	r9, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 816c 	beq.w	800617a <_dtoa_r+0xb52>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	220a      	movs	r2, #10
 8005ea8:	4658      	mov	r0, fp
 8005eaa:	f000 fae5 	bl	8006478 <__multadd>
 8005eae:	9b08      	ldr	r3, [sp, #32]
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dc61      	bgt.n	8005f7a <_dtoa_r+0x952>
 8005eb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	dc3b      	bgt.n	8005f34 <_dtoa_r+0x90c>
 8005ebc:	e05d      	b.n	8005f7a <_dtoa_r+0x952>
 8005ebe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ec0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005ec4:	e746      	b.n	8005d54 <_dtoa_r+0x72c>
 8005ec6:	9b07      	ldr	r3, [sp, #28]
 8005ec8:	1e5c      	subs	r4, r3, #1
 8005eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	bfbf      	itttt	lt
 8005ed0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ed2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005ed4:	1ae3      	sublt	r3, r4, r3
 8005ed6:	18d2      	addlt	r2, r2, r3
 8005ed8:	bfa8      	it	ge
 8005eda:	1b1c      	subge	r4, r3, r4
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	bfbe      	ittt	lt
 8005ee0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005ee2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005ee4:	2400      	movlt	r4, #0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb5      	itete	lt
 8005eea:	eba8 0603 	sublt.w	r6, r8, r3
 8005eee:	4646      	movge	r6, r8
 8005ef0:	2300      	movlt	r3, #0
 8005ef2:	9b07      	ldrge	r3, [sp, #28]
 8005ef4:	e730      	b.n	8005d58 <_dtoa_r+0x730>
 8005ef6:	4646      	mov	r6, r8
 8005ef8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005efa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005efc:	e735      	b.n	8005d6a <_dtoa_r+0x742>
 8005efe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f00:	e75c      	b.n	8005dbc <_dtoa_r+0x794>
 8005f02:	2300      	movs	r3, #0
 8005f04:	e788      	b.n	8005e18 <_dtoa_r+0x7f0>
 8005f06:	9b02      	ldr	r3, [sp, #8]
 8005f08:	e786      	b.n	8005e18 <_dtoa_r+0x7f0>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f0e:	e788      	b.n	8005e22 <_dtoa_r+0x7fa>
 8005f10:	d09f      	beq.n	8005e52 <_dtoa_r+0x82a>
 8005f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f14:	331c      	adds	r3, #28
 8005f16:	441a      	add	r2, r3
 8005f18:	4498      	add	r8, r3
 8005f1a:	441e      	add	r6, r3
 8005f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f1e:	e798      	b.n	8005e52 <_dtoa_r+0x82a>
 8005f20:	4603      	mov	r3, r0
 8005f22:	e7f6      	b.n	8005f12 <_dtoa_r+0x8ea>
 8005f24:	9b07      	ldr	r3, [sp, #28]
 8005f26:	9704      	str	r7, [sp, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc20      	bgt.n	8005f6e <_dtoa_r+0x946>
 8005f2c:	9308      	str	r3, [sp, #32]
 8005f2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	dd1e      	ble.n	8005f72 <_dtoa_r+0x94a>
 8005f34:	9b08      	ldr	r3, [sp, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f47f aebc 	bne.w	8005cb4 <_dtoa_r+0x68c>
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	2205      	movs	r2, #5
 8005f40:	4658      	mov	r0, fp
 8005f42:	f000 fa99 	bl	8006478 <__multadd>
 8005f46:	4601      	mov	r1, r0
 8005f48:	4604      	mov	r4, r0
 8005f4a:	4648      	mov	r0, r9
 8005f4c:	f000 fcaa 	bl	80068a4 <__mcmp>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f77f aeaf 	ble.w	8005cb4 <_dtoa_r+0x68c>
 8005f56:	2331      	movs	r3, #49	@ 0x31
 8005f58:	4656      	mov	r6, sl
 8005f5a:	f806 3b01 	strb.w	r3, [r6], #1
 8005f5e:	9b04      	ldr	r3, [sp, #16]
 8005f60:	3301      	adds	r3, #1
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	e6aa      	b.n	8005cbc <_dtoa_r+0x694>
 8005f66:	9c07      	ldr	r4, [sp, #28]
 8005f68:	9704      	str	r7, [sp, #16]
 8005f6a:	4625      	mov	r5, r4
 8005f6c:	e7f3      	b.n	8005f56 <_dtoa_r+0x92e>
 8005f6e:	9b07      	ldr	r3, [sp, #28]
 8005f70:	9308      	str	r3, [sp, #32]
 8005f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 8104 	beq.w	8006182 <_dtoa_r+0xb5a>
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	dd05      	ble.n	8005f8a <_dtoa_r+0x962>
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4632      	mov	r2, r6
 8005f82:	4658      	mov	r0, fp
 8005f84:	f000 fc22 	bl	80067cc <__lshift>
 8005f88:	4605      	mov	r5, r0
 8005f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05a      	beq.n	8006046 <_dtoa_r+0xa1e>
 8005f90:	4658      	mov	r0, fp
 8005f92:	6869      	ldr	r1, [r5, #4]
 8005f94:	f000 fa0e 	bl	80063b4 <_Balloc>
 8005f98:	4606      	mov	r6, r0
 8005f9a:	b928      	cbnz	r0, 8005fa8 <_dtoa_r+0x980>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fa2:	4b83      	ldr	r3, [pc, #524]	@ (80061b0 <_dtoa_r+0xb88>)
 8005fa4:	f7ff bb54 	b.w	8005650 <_dtoa_r+0x28>
 8005fa8:	692a      	ldr	r2, [r5, #16]
 8005faa:	f105 010c 	add.w	r1, r5, #12
 8005fae:	3202      	adds	r2, #2
 8005fb0:	0092      	lsls	r2, r2, #2
 8005fb2:	300c      	adds	r0, #12
 8005fb4:	f000 ff8e 	bl	8006ed4 <memcpy>
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4658      	mov	r0, fp
 8005fbe:	f000 fc05 	bl	80067cc <__lshift>
 8005fc2:	462f      	mov	r7, r5
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	f10a 0301 	add.w	r3, sl, #1
 8005fca:	9307      	str	r3, [sp, #28]
 8005fcc:	9b08      	ldr	r3, [sp, #32]
 8005fce:	4453      	add	r3, sl
 8005fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fd2:	9b02      	ldr	r3, [sp, #8]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fda:	9b07      	ldr	r3, [sp, #28]
 8005fdc:	4621      	mov	r1, r4
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	4648      	mov	r0, r9
 8005fe2:	9302      	str	r3, [sp, #8]
 8005fe4:	f7ff fa95 	bl	8005512 <quorem>
 8005fe8:	4639      	mov	r1, r7
 8005fea:	9008      	str	r0, [sp, #32]
 8005fec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ff0:	4648      	mov	r0, r9
 8005ff2:	f000 fc57 	bl	80068a4 <__mcmp>
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4658      	mov	r0, fp
 8005ffe:	f000 fc6d 	bl	80068dc <__mdiff>
 8006002:	68c2      	ldr	r2, [r0, #12]
 8006004:	4606      	mov	r6, r0
 8006006:	bb02      	cbnz	r2, 800604a <_dtoa_r+0xa22>
 8006008:	4601      	mov	r1, r0
 800600a:	4648      	mov	r0, r9
 800600c:	f000 fc4a 	bl	80068a4 <__mcmp>
 8006010:	4602      	mov	r2, r0
 8006012:	4631      	mov	r1, r6
 8006014:	4658      	mov	r0, fp
 8006016:	920c      	str	r2, [sp, #48]	@ 0x30
 8006018:	f000 fa0c 	bl	8006434 <_Bfree>
 800601c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800601e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006020:	9e07      	ldr	r6, [sp, #28]
 8006022:	ea43 0102 	orr.w	r1, r3, r2
 8006026:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006028:	4319      	orrs	r1, r3
 800602a:	d110      	bne.n	800604e <_dtoa_r+0xa26>
 800602c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006030:	d029      	beq.n	8006086 <_dtoa_r+0xa5e>
 8006032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd02      	ble.n	800603e <_dtoa_r+0xa16>
 8006038:	9b08      	ldr	r3, [sp, #32]
 800603a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	f883 8000 	strb.w	r8, [r3]
 8006044:	e63b      	b.n	8005cbe <_dtoa_r+0x696>
 8006046:	4628      	mov	r0, r5
 8006048:	e7bb      	b.n	8005fc2 <_dtoa_r+0x99a>
 800604a:	2201      	movs	r2, #1
 800604c:	e7e1      	b.n	8006012 <_dtoa_r+0x9ea>
 800604e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	db04      	blt.n	800605e <_dtoa_r+0xa36>
 8006054:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006056:	430b      	orrs	r3, r1
 8006058:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800605a:	430b      	orrs	r3, r1
 800605c:	d120      	bne.n	80060a0 <_dtoa_r+0xa78>
 800605e:	2a00      	cmp	r2, #0
 8006060:	dded      	ble.n	800603e <_dtoa_r+0xa16>
 8006062:	4649      	mov	r1, r9
 8006064:	2201      	movs	r2, #1
 8006066:	4658      	mov	r0, fp
 8006068:	f000 fbb0 	bl	80067cc <__lshift>
 800606c:	4621      	mov	r1, r4
 800606e:	4681      	mov	r9, r0
 8006070:	f000 fc18 	bl	80068a4 <__mcmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	dc03      	bgt.n	8006080 <_dtoa_r+0xa58>
 8006078:	d1e1      	bne.n	800603e <_dtoa_r+0xa16>
 800607a:	f018 0f01 	tst.w	r8, #1
 800607e:	d0de      	beq.n	800603e <_dtoa_r+0xa16>
 8006080:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006084:	d1d8      	bne.n	8006038 <_dtoa_r+0xa10>
 8006086:	2339      	movs	r3, #57	@ 0x39
 8006088:	9a02      	ldr	r2, [sp, #8]
 800608a:	7013      	strb	r3, [r2, #0]
 800608c:	4633      	mov	r3, r6
 800608e:	461e      	mov	r6, r3
 8006090:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006094:	3b01      	subs	r3, #1
 8006096:	2a39      	cmp	r2, #57	@ 0x39
 8006098:	d052      	beq.n	8006140 <_dtoa_r+0xb18>
 800609a:	3201      	adds	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e60e      	b.n	8005cbe <_dtoa_r+0x696>
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	dd07      	ble.n	80060b4 <_dtoa_r+0xa8c>
 80060a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060a8:	d0ed      	beq.n	8006086 <_dtoa_r+0xa5e>
 80060aa:	9a02      	ldr	r2, [sp, #8]
 80060ac:	f108 0301 	add.w	r3, r8, #1
 80060b0:	7013      	strb	r3, [r2, #0]
 80060b2:	e604      	b.n	8005cbe <_dtoa_r+0x696>
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	9a07      	ldr	r2, [sp, #28]
 80060b8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060be:	4293      	cmp	r3, r2
 80060c0:	d028      	beq.n	8006114 <_dtoa_r+0xaec>
 80060c2:	4649      	mov	r1, r9
 80060c4:	2300      	movs	r3, #0
 80060c6:	220a      	movs	r2, #10
 80060c8:	4658      	mov	r0, fp
 80060ca:	f000 f9d5 	bl	8006478 <__multadd>
 80060ce:	42af      	cmp	r7, r5
 80060d0:	4681      	mov	r9, r0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	f04f 020a 	mov.w	r2, #10
 80060da:	4639      	mov	r1, r7
 80060dc:	4658      	mov	r0, fp
 80060de:	d107      	bne.n	80060f0 <_dtoa_r+0xac8>
 80060e0:	f000 f9ca 	bl	8006478 <__multadd>
 80060e4:	4607      	mov	r7, r0
 80060e6:	4605      	mov	r5, r0
 80060e8:	9b07      	ldr	r3, [sp, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	e774      	b.n	8005fda <_dtoa_r+0x9b2>
 80060f0:	f000 f9c2 	bl	8006478 <__multadd>
 80060f4:	4629      	mov	r1, r5
 80060f6:	4607      	mov	r7, r0
 80060f8:	2300      	movs	r3, #0
 80060fa:	220a      	movs	r2, #10
 80060fc:	4658      	mov	r0, fp
 80060fe:	f000 f9bb 	bl	8006478 <__multadd>
 8006102:	4605      	mov	r5, r0
 8006104:	e7f0      	b.n	80060e8 <_dtoa_r+0xac0>
 8006106:	9b08      	ldr	r3, [sp, #32]
 8006108:	2700      	movs	r7, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	bfcc      	ite	gt
 800610e:	461e      	movgt	r6, r3
 8006110:	2601      	movle	r6, #1
 8006112:	4456      	add	r6, sl
 8006114:	4649      	mov	r1, r9
 8006116:	2201      	movs	r2, #1
 8006118:	4658      	mov	r0, fp
 800611a:	f000 fb57 	bl	80067cc <__lshift>
 800611e:	4621      	mov	r1, r4
 8006120:	4681      	mov	r9, r0
 8006122:	f000 fbbf 	bl	80068a4 <__mcmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	dcb0      	bgt.n	800608c <_dtoa_r+0xa64>
 800612a:	d102      	bne.n	8006132 <_dtoa_r+0xb0a>
 800612c:	f018 0f01 	tst.w	r8, #1
 8006130:	d1ac      	bne.n	800608c <_dtoa_r+0xa64>
 8006132:	4633      	mov	r3, r6
 8006134:	461e      	mov	r6, r3
 8006136:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800613a:	2a30      	cmp	r2, #48	@ 0x30
 800613c:	d0fa      	beq.n	8006134 <_dtoa_r+0xb0c>
 800613e:	e5be      	b.n	8005cbe <_dtoa_r+0x696>
 8006140:	459a      	cmp	sl, r3
 8006142:	d1a4      	bne.n	800608e <_dtoa_r+0xa66>
 8006144:	9b04      	ldr	r3, [sp, #16]
 8006146:	3301      	adds	r3, #1
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	2331      	movs	r3, #49	@ 0x31
 800614c:	f88a 3000 	strb.w	r3, [sl]
 8006150:	e5b5      	b.n	8005cbe <_dtoa_r+0x696>
 8006152:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006154:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061b4 <_dtoa_r+0xb8c>
 8006158:	b11b      	cbz	r3, 8006162 <_dtoa_r+0xb3a>
 800615a:	f10a 0308 	add.w	r3, sl, #8
 800615e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	4650      	mov	r0, sl
 8006164:	b017      	add	sp, #92	@ 0x5c
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800616c:	2b01      	cmp	r3, #1
 800616e:	f77f ae3d 	ble.w	8005dec <_dtoa_r+0x7c4>
 8006172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006174:	930a      	str	r3, [sp, #40]	@ 0x28
 8006176:	2001      	movs	r0, #1
 8006178:	e65b      	b.n	8005e32 <_dtoa_r+0x80a>
 800617a:	9b08      	ldr	r3, [sp, #32]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f77f aed6 	ble.w	8005f2e <_dtoa_r+0x906>
 8006182:	4656      	mov	r6, sl
 8006184:	4621      	mov	r1, r4
 8006186:	4648      	mov	r0, r9
 8006188:	f7ff f9c3 	bl	8005512 <quorem>
 800618c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	f806 8b01 	strb.w	r8, [r6], #1
 8006196:	eba6 020a 	sub.w	r2, r6, sl
 800619a:	4293      	cmp	r3, r2
 800619c:	ddb3      	ble.n	8006106 <_dtoa_r+0xade>
 800619e:	4649      	mov	r1, r9
 80061a0:	2300      	movs	r3, #0
 80061a2:	220a      	movs	r2, #10
 80061a4:	4658      	mov	r0, fp
 80061a6:	f000 f967 	bl	8006478 <__multadd>
 80061aa:	4681      	mov	r9, r0
 80061ac:	e7ea      	b.n	8006184 <_dtoa_r+0xb5c>
 80061ae:	bf00      	nop
 80061b0:	08007682 	.word	0x08007682
 80061b4:	08007606 	.word	0x08007606

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d040      	beq.n	8006242 <_free_r+0x8a>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 f8e6 	bl	800639c <__malloc_lock>
 80061d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006244 <_free_r+0x8c>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x2c>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	4628      	mov	r0, r5
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b8e2 	b.w	80063a8 <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x42>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1809      	addeq	r1, r1, r0
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x1e>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x4c>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x42>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1850      	adds	r0, r2, r1
 8006208:	42a0      	cmp	r0, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x6c>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	4401      	add	r1, r0
 8006210:	1850      	adds	r0, r2, r1
 8006212:	4283      	cmp	r3, r0
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x22>
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4408      	add	r0, r1
 800621e:	6010      	str	r0, [r2, #0]
 8006220:	6053      	str	r3, [r2, #4]
 8006222:	e7da      	b.n	80061da <_free_r+0x22>
 8006224:	d902      	bls.n	800622c <_free_r+0x74>
 8006226:	230c      	movs	r3, #12
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x22>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	1821      	adds	r1, r4, r0
 8006230:	428b      	cmp	r3, r1
 8006232:	bf01      	itttt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	1809      	addeq	r1, r1, r0
 800623a:	6021      	streq	r1, [r4, #0]
 800623c:	6063      	str	r3, [r4, #4]
 800623e:	6054      	str	r4, [r2, #4]
 8006240:	e7cb      	b.n	80061da <_free_r+0x22>
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000444 	.word	0x20000444

08006248 <malloc>:
 8006248:	4b02      	ldr	r3, [pc, #8]	@ (8006254 <malloc+0xc>)
 800624a:	4601      	mov	r1, r0
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	f000 b825 	b.w	800629c <_malloc_r>
 8006252:	bf00      	nop
 8006254:	2000001c 	.word	0x2000001c

08006258 <sbrk_aligned>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4e0f      	ldr	r6, [pc, #60]	@ (8006298 <sbrk_aligned+0x40>)
 800625c:	460c      	mov	r4, r1
 800625e:	6831      	ldr	r1, [r6, #0]
 8006260:	4605      	mov	r5, r0
 8006262:	b911      	cbnz	r1, 800626a <sbrk_aligned+0x12>
 8006264:	f000 fe26 	bl	8006eb4 <_sbrk_r>
 8006268:	6030      	str	r0, [r6, #0]
 800626a:	4621      	mov	r1, r4
 800626c:	4628      	mov	r0, r5
 800626e:	f000 fe21 	bl	8006eb4 <_sbrk_r>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	d103      	bne.n	800627e <sbrk_aligned+0x26>
 8006276:	f04f 34ff 	mov.w	r4, #4294967295
 800627a:	4620      	mov	r0, r4
 800627c:	bd70      	pop	{r4, r5, r6, pc}
 800627e:	1cc4      	adds	r4, r0, #3
 8006280:	f024 0403 	bic.w	r4, r4, #3
 8006284:	42a0      	cmp	r0, r4
 8006286:	d0f8      	beq.n	800627a <sbrk_aligned+0x22>
 8006288:	1a21      	subs	r1, r4, r0
 800628a:	4628      	mov	r0, r5
 800628c:	f000 fe12 	bl	8006eb4 <_sbrk_r>
 8006290:	3001      	adds	r0, #1
 8006292:	d1f2      	bne.n	800627a <sbrk_aligned+0x22>
 8006294:	e7ef      	b.n	8006276 <sbrk_aligned+0x1e>
 8006296:	bf00      	nop
 8006298:	20000440 	.word	0x20000440

0800629c <_malloc_r>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	1ccd      	adds	r5, r1, #3
 80062a2:	f025 0503 	bic.w	r5, r5, #3
 80062a6:	3508      	adds	r5, #8
 80062a8:	2d0c      	cmp	r5, #12
 80062aa:	bf38      	it	cc
 80062ac:	250c      	movcc	r5, #12
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	4606      	mov	r6, r0
 80062b2:	db01      	blt.n	80062b8 <_malloc_r+0x1c>
 80062b4:	42a9      	cmp	r1, r5
 80062b6:	d904      	bls.n	80062c2 <_malloc_r+0x26>
 80062b8:	230c      	movs	r3, #12
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	2000      	movs	r0, #0
 80062be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006398 <_malloc_r+0xfc>
 80062c6:	f000 f869 	bl	800639c <__malloc_lock>
 80062ca:	f8d8 3000 	ldr.w	r3, [r8]
 80062ce:	461c      	mov	r4, r3
 80062d0:	bb44      	cbnz	r4, 8006324 <_malloc_r+0x88>
 80062d2:	4629      	mov	r1, r5
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff ffbf 	bl	8006258 <sbrk_aligned>
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	4604      	mov	r4, r0
 80062de:	d158      	bne.n	8006392 <_malloc_r+0xf6>
 80062e0:	f8d8 4000 	ldr.w	r4, [r8]
 80062e4:	4627      	mov	r7, r4
 80062e6:	2f00      	cmp	r7, #0
 80062e8:	d143      	bne.n	8006372 <_malloc_r+0xd6>
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	d04b      	beq.n	8006386 <_malloc_r+0xea>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	4639      	mov	r1, r7
 80062f2:	4630      	mov	r0, r6
 80062f4:	eb04 0903 	add.w	r9, r4, r3
 80062f8:	f000 fddc 	bl	8006eb4 <_sbrk_r>
 80062fc:	4581      	cmp	r9, r0
 80062fe:	d142      	bne.n	8006386 <_malloc_r+0xea>
 8006300:	6821      	ldr	r1, [r4, #0]
 8006302:	4630      	mov	r0, r6
 8006304:	1a6d      	subs	r5, r5, r1
 8006306:	4629      	mov	r1, r5
 8006308:	f7ff ffa6 	bl	8006258 <sbrk_aligned>
 800630c:	3001      	adds	r0, #1
 800630e:	d03a      	beq.n	8006386 <_malloc_r+0xea>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	442b      	add	r3, r5
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	f8d8 3000 	ldr.w	r3, [r8]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	bb62      	cbnz	r2, 8006378 <_malloc_r+0xdc>
 800631e:	f8c8 7000 	str.w	r7, [r8]
 8006322:	e00f      	b.n	8006344 <_malloc_r+0xa8>
 8006324:	6822      	ldr	r2, [r4, #0]
 8006326:	1b52      	subs	r2, r2, r5
 8006328:	d420      	bmi.n	800636c <_malloc_r+0xd0>
 800632a:	2a0b      	cmp	r2, #11
 800632c:	d917      	bls.n	800635e <_malloc_r+0xc2>
 800632e:	1961      	adds	r1, r4, r5
 8006330:	42a3      	cmp	r3, r4
 8006332:	6025      	str	r5, [r4, #0]
 8006334:	bf18      	it	ne
 8006336:	6059      	strne	r1, [r3, #4]
 8006338:	6863      	ldr	r3, [r4, #4]
 800633a:	bf08      	it	eq
 800633c:	f8c8 1000 	streq.w	r1, [r8]
 8006340:	5162      	str	r2, [r4, r5]
 8006342:	604b      	str	r3, [r1, #4]
 8006344:	4630      	mov	r0, r6
 8006346:	f000 f82f 	bl	80063a8 <__malloc_unlock>
 800634a:	f104 000b 	add.w	r0, r4, #11
 800634e:	1d23      	adds	r3, r4, #4
 8006350:	f020 0007 	bic.w	r0, r0, #7
 8006354:	1ac2      	subs	r2, r0, r3
 8006356:	bf1c      	itt	ne
 8006358:	1a1b      	subne	r3, r3, r0
 800635a:	50a3      	strne	r3, [r4, r2]
 800635c:	e7af      	b.n	80062be <_malloc_r+0x22>
 800635e:	6862      	ldr	r2, [r4, #4]
 8006360:	42a3      	cmp	r3, r4
 8006362:	bf0c      	ite	eq
 8006364:	f8c8 2000 	streq.w	r2, [r8]
 8006368:	605a      	strne	r2, [r3, #4]
 800636a:	e7eb      	b.n	8006344 <_malloc_r+0xa8>
 800636c:	4623      	mov	r3, r4
 800636e:	6864      	ldr	r4, [r4, #4]
 8006370:	e7ae      	b.n	80062d0 <_malloc_r+0x34>
 8006372:	463c      	mov	r4, r7
 8006374:	687f      	ldr	r7, [r7, #4]
 8006376:	e7b6      	b.n	80062e6 <_malloc_r+0x4a>
 8006378:	461a      	mov	r2, r3
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	42a3      	cmp	r3, r4
 800637e:	d1fb      	bne.n	8006378 <_malloc_r+0xdc>
 8006380:	2300      	movs	r3, #0
 8006382:	6053      	str	r3, [r2, #4]
 8006384:	e7de      	b.n	8006344 <_malloc_r+0xa8>
 8006386:	230c      	movs	r3, #12
 8006388:	4630      	mov	r0, r6
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f000 f80c 	bl	80063a8 <__malloc_unlock>
 8006390:	e794      	b.n	80062bc <_malloc_r+0x20>
 8006392:	6005      	str	r5, [r0, #0]
 8006394:	e7d6      	b.n	8006344 <_malloc_r+0xa8>
 8006396:	bf00      	nop
 8006398:	20000444 	.word	0x20000444

0800639c <__malloc_lock>:
 800639c:	4801      	ldr	r0, [pc, #4]	@ (80063a4 <__malloc_lock+0x8>)
 800639e:	f7ff b8a8 	b.w	80054f2 <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	2000043c 	.word	0x2000043c

080063a8 <__malloc_unlock>:
 80063a8:	4801      	ldr	r0, [pc, #4]	@ (80063b0 <__malloc_unlock+0x8>)
 80063aa:	f7ff b8a3 	b.w	80054f4 <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	2000043c 	.word	0x2000043c

080063b4 <_Balloc>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	69c6      	ldr	r6, [r0, #28]
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	b976      	cbnz	r6, 80063dc <_Balloc+0x28>
 80063be:	2010      	movs	r0, #16
 80063c0:	f7ff ff42 	bl	8006248 <malloc>
 80063c4:	4602      	mov	r2, r0
 80063c6:	61e0      	str	r0, [r4, #28]
 80063c8:	b920      	cbnz	r0, 80063d4 <_Balloc+0x20>
 80063ca:	216b      	movs	r1, #107	@ 0x6b
 80063cc:	4b17      	ldr	r3, [pc, #92]	@ (800642c <_Balloc+0x78>)
 80063ce:	4818      	ldr	r0, [pc, #96]	@ (8006430 <_Balloc+0x7c>)
 80063d0:	f000 fd8e 	bl	8006ef0 <__assert_func>
 80063d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d8:	6006      	str	r6, [r0, #0]
 80063da:	60c6      	str	r6, [r0, #12]
 80063dc:	69e6      	ldr	r6, [r4, #28]
 80063de:	68f3      	ldr	r3, [r6, #12]
 80063e0:	b183      	cbz	r3, 8006404 <_Balloc+0x50>
 80063e2:	69e3      	ldr	r3, [r4, #28]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ea:	b9b8      	cbnz	r0, 800641c <_Balloc+0x68>
 80063ec:	2101      	movs	r1, #1
 80063ee:	fa01 f605 	lsl.w	r6, r1, r5
 80063f2:	1d72      	adds	r2, r6, #5
 80063f4:	4620      	mov	r0, r4
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	f000 fd98 	bl	8006f2c <_calloc_r>
 80063fc:	b160      	cbz	r0, 8006418 <_Balloc+0x64>
 80063fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006402:	e00e      	b.n	8006422 <_Balloc+0x6e>
 8006404:	2221      	movs	r2, #33	@ 0x21
 8006406:	2104      	movs	r1, #4
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fd8f 	bl	8006f2c <_calloc_r>
 800640e:	69e3      	ldr	r3, [r4, #28]
 8006410:	60f0      	str	r0, [r6, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <_Balloc+0x2e>
 8006418:	2000      	movs	r0, #0
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	6802      	ldr	r2, [r0, #0]
 800641e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006422:	2300      	movs	r3, #0
 8006424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006428:	e7f7      	b.n	800641a <_Balloc+0x66>
 800642a:	bf00      	nop
 800642c:	08007613 	.word	0x08007613
 8006430:	08007693 	.word	0x08007693

08006434 <_Bfree>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	69c6      	ldr	r6, [r0, #28]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b976      	cbnz	r6, 800645c <_Bfree+0x28>
 800643e:	2010      	movs	r0, #16
 8006440:	f7ff ff02 	bl	8006248 <malloc>
 8006444:	4602      	mov	r2, r0
 8006446:	61e8      	str	r0, [r5, #28]
 8006448:	b920      	cbnz	r0, 8006454 <_Bfree+0x20>
 800644a:	218f      	movs	r1, #143	@ 0x8f
 800644c:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <_Bfree+0x3c>)
 800644e:	4809      	ldr	r0, [pc, #36]	@ (8006474 <_Bfree+0x40>)
 8006450:	f000 fd4e 	bl	8006ef0 <__assert_func>
 8006454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006458:	6006      	str	r6, [r0, #0]
 800645a:	60c6      	str	r6, [r0, #12]
 800645c:	b13c      	cbz	r4, 800646e <_Bfree+0x3a>
 800645e:	69eb      	ldr	r3, [r5, #28]
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006468:	6021      	str	r1, [r4, #0]
 800646a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	08007613 	.word	0x08007613
 8006474:	08007693 	.word	0x08007693

08006478 <__multadd>:
 8006478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647c:	4607      	mov	r7, r0
 800647e:	460c      	mov	r4, r1
 8006480:	461e      	mov	r6, r3
 8006482:	2000      	movs	r0, #0
 8006484:	690d      	ldr	r5, [r1, #16]
 8006486:	f101 0c14 	add.w	ip, r1, #20
 800648a:	f8dc 3000 	ldr.w	r3, [ip]
 800648e:	3001      	adds	r0, #1
 8006490:	b299      	uxth	r1, r3
 8006492:	fb02 6101 	mla	r1, r2, r1, r6
 8006496:	0c1e      	lsrs	r6, r3, #16
 8006498:	0c0b      	lsrs	r3, r1, #16
 800649a:	fb02 3306 	mla	r3, r2, r6, r3
 800649e:	b289      	uxth	r1, r1
 80064a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064a4:	4285      	cmp	r5, r0
 80064a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064aa:	f84c 1b04 	str.w	r1, [ip], #4
 80064ae:	dcec      	bgt.n	800648a <__multadd+0x12>
 80064b0:	b30e      	cbz	r6, 80064f6 <__multadd+0x7e>
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dc19      	bgt.n	80064ec <__multadd+0x74>
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	4638      	mov	r0, r7
 80064bc:	3101      	adds	r1, #1
 80064be:	f7ff ff79 	bl	80063b4 <_Balloc>
 80064c2:	4680      	mov	r8, r0
 80064c4:	b928      	cbnz	r0, 80064d2 <__multadd+0x5a>
 80064c6:	4602      	mov	r2, r0
 80064c8:	21ba      	movs	r1, #186	@ 0xba
 80064ca:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <__multadd+0x84>)
 80064cc:	480c      	ldr	r0, [pc, #48]	@ (8006500 <__multadd+0x88>)
 80064ce:	f000 fd0f 	bl	8006ef0 <__assert_func>
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	f104 010c 	add.w	r1, r4, #12
 80064d8:	3202      	adds	r2, #2
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	300c      	adds	r0, #12
 80064de:	f000 fcf9 	bl	8006ed4 <memcpy>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff ffa5 	bl	8006434 <_Bfree>
 80064ea:	4644      	mov	r4, r8
 80064ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064f0:	3501      	adds	r5, #1
 80064f2:	615e      	str	r6, [r3, #20]
 80064f4:	6125      	str	r5, [r4, #16]
 80064f6:	4620      	mov	r0, r4
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	08007682 	.word	0x08007682
 8006500:	08007693 	.word	0x08007693

08006504 <__hi0bits>:
 8006504:	4603      	mov	r3, r0
 8006506:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800650a:	bf3a      	itte	cc
 800650c:	0403      	lslcc	r3, r0, #16
 800650e:	2010      	movcc	r0, #16
 8006510:	2000      	movcs	r0, #0
 8006512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006516:	bf3c      	itt	cc
 8006518:	021b      	lslcc	r3, r3, #8
 800651a:	3008      	addcc	r0, #8
 800651c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006520:	bf3c      	itt	cc
 8006522:	011b      	lslcc	r3, r3, #4
 8006524:	3004      	addcc	r0, #4
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652a:	bf3c      	itt	cc
 800652c:	009b      	lslcc	r3, r3, #2
 800652e:	3002      	addcc	r0, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	db05      	blt.n	8006540 <__hi0bits+0x3c>
 8006534:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006538:	f100 0001 	add.w	r0, r0, #1
 800653c:	bf08      	it	eq
 800653e:	2020      	moveq	r0, #32
 8006540:	4770      	bx	lr

08006542 <__lo0bits>:
 8006542:	6803      	ldr	r3, [r0, #0]
 8006544:	4602      	mov	r2, r0
 8006546:	f013 0007 	ands.w	r0, r3, #7
 800654a:	d00b      	beq.n	8006564 <__lo0bits+0x22>
 800654c:	07d9      	lsls	r1, r3, #31
 800654e:	d421      	bmi.n	8006594 <__lo0bits+0x52>
 8006550:	0798      	lsls	r0, r3, #30
 8006552:	bf49      	itett	mi
 8006554:	085b      	lsrmi	r3, r3, #1
 8006556:	089b      	lsrpl	r3, r3, #2
 8006558:	2001      	movmi	r0, #1
 800655a:	6013      	strmi	r3, [r2, #0]
 800655c:	bf5c      	itt	pl
 800655e:	2002      	movpl	r0, #2
 8006560:	6013      	strpl	r3, [r2, #0]
 8006562:	4770      	bx	lr
 8006564:	b299      	uxth	r1, r3
 8006566:	b909      	cbnz	r1, 800656c <__lo0bits+0x2a>
 8006568:	2010      	movs	r0, #16
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	b2d9      	uxtb	r1, r3
 800656e:	b909      	cbnz	r1, 8006574 <__lo0bits+0x32>
 8006570:	3008      	adds	r0, #8
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	0719      	lsls	r1, r3, #28
 8006576:	bf04      	itt	eq
 8006578:	091b      	lsreq	r3, r3, #4
 800657a:	3004      	addeq	r0, #4
 800657c:	0799      	lsls	r1, r3, #30
 800657e:	bf04      	itt	eq
 8006580:	089b      	lsreq	r3, r3, #2
 8006582:	3002      	addeq	r0, #2
 8006584:	07d9      	lsls	r1, r3, #31
 8006586:	d403      	bmi.n	8006590 <__lo0bits+0x4e>
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	f100 0001 	add.w	r0, r0, #1
 800658e:	d003      	beq.n	8006598 <__lo0bits+0x56>
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	4770      	bx	lr
 8006594:	2000      	movs	r0, #0
 8006596:	4770      	bx	lr
 8006598:	2020      	movs	r0, #32
 800659a:	4770      	bx	lr

0800659c <__i2b>:
 800659c:	b510      	push	{r4, lr}
 800659e:	460c      	mov	r4, r1
 80065a0:	2101      	movs	r1, #1
 80065a2:	f7ff ff07 	bl	80063b4 <_Balloc>
 80065a6:	4602      	mov	r2, r0
 80065a8:	b928      	cbnz	r0, 80065b6 <__i2b+0x1a>
 80065aa:	f240 1145 	movw	r1, #325	@ 0x145
 80065ae:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <__i2b+0x24>)
 80065b0:	4804      	ldr	r0, [pc, #16]	@ (80065c4 <__i2b+0x28>)
 80065b2:	f000 fc9d 	bl	8006ef0 <__assert_func>
 80065b6:	2301      	movs	r3, #1
 80065b8:	6144      	str	r4, [r0, #20]
 80065ba:	6103      	str	r3, [r0, #16]
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	bf00      	nop
 80065c0:	08007682 	.word	0x08007682
 80065c4:	08007693 	.word	0x08007693

080065c8 <__multiply>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	4614      	mov	r4, r2
 80065ce:	690a      	ldr	r2, [r1, #16]
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	460f      	mov	r7, r1
 80065d4:	429a      	cmp	r2, r3
 80065d6:	bfa2      	ittt	ge
 80065d8:	4623      	movge	r3, r4
 80065da:	460c      	movge	r4, r1
 80065dc:	461f      	movge	r7, r3
 80065de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80065e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	6861      	ldr	r1, [r4, #4]
 80065ea:	eb0a 0609 	add.w	r6, sl, r9
 80065ee:	42b3      	cmp	r3, r6
 80065f0:	b085      	sub	sp, #20
 80065f2:	bfb8      	it	lt
 80065f4:	3101      	addlt	r1, #1
 80065f6:	f7ff fedd 	bl	80063b4 <_Balloc>
 80065fa:	b930      	cbnz	r0, 800660a <__multiply+0x42>
 80065fc:	4602      	mov	r2, r0
 80065fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006602:	4b43      	ldr	r3, [pc, #268]	@ (8006710 <__multiply+0x148>)
 8006604:	4843      	ldr	r0, [pc, #268]	@ (8006714 <__multiply+0x14c>)
 8006606:	f000 fc73 	bl	8006ef0 <__assert_func>
 800660a:	f100 0514 	add.w	r5, r0, #20
 800660e:	462b      	mov	r3, r5
 8006610:	2200      	movs	r2, #0
 8006612:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006616:	4543      	cmp	r3, r8
 8006618:	d321      	bcc.n	800665e <__multiply+0x96>
 800661a:	f107 0114 	add.w	r1, r7, #20
 800661e:	f104 0214 	add.w	r2, r4, #20
 8006622:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006626:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800662a:	9302      	str	r3, [sp, #8]
 800662c:	1b13      	subs	r3, r2, r4
 800662e:	3b15      	subs	r3, #21
 8006630:	f023 0303 	bic.w	r3, r3, #3
 8006634:	3304      	adds	r3, #4
 8006636:	f104 0715 	add.w	r7, r4, #21
 800663a:	42ba      	cmp	r2, r7
 800663c:	bf38      	it	cc
 800663e:	2304      	movcc	r3, #4
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	9103      	str	r1, [sp, #12]
 8006646:	428b      	cmp	r3, r1
 8006648:	d80c      	bhi.n	8006664 <__multiply+0x9c>
 800664a:	2e00      	cmp	r6, #0
 800664c:	dd03      	ble.n	8006656 <__multiply+0x8e>
 800664e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006652:	2b00      	cmp	r3, #0
 8006654:	d05a      	beq.n	800670c <__multiply+0x144>
 8006656:	6106      	str	r6, [r0, #16]
 8006658:	b005      	add	sp, #20
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	f843 2b04 	str.w	r2, [r3], #4
 8006662:	e7d8      	b.n	8006616 <__multiply+0x4e>
 8006664:	f8b1 a000 	ldrh.w	sl, [r1]
 8006668:	f1ba 0f00 	cmp.w	sl, #0
 800666c:	d023      	beq.n	80066b6 <__multiply+0xee>
 800666e:	46a9      	mov	r9, r5
 8006670:	f04f 0c00 	mov.w	ip, #0
 8006674:	f104 0e14 	add.w	lr, r4, #20
 8006678:	f85e 7b04 	ldr.w	r7, [lr], #4
 800667c:	f8d9 3000 	ldr.w	r3, [r9]
 8006680:	fa1f fb87 	uxth.w	fp, r7
 8006684:	b29b      	uxth	r3, r3
 8006686:	fb0a 330b 	mla	r3, sl, fp, r3
 800668a:	4463      	add	r3, ip
 800668c:	f8d9 c000 	ldr.w	ip, [r9]
 8006690:	0c3f      	lsrs	r7, r7, #16
 8006692:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006696:	fb0a c707 	mla	r7, sl, r7, ip
 800669a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066a4:	4572      	cmp	r2, lr
 80066a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066aa:	f849 3b04 	str.w	r3, [r9], #4
 80066ae:	d8e3      	bhi.n	8006678 <__multiply+0xb0>
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	f845 c003 	str.w	ip, [r5, r3]
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	3104      	adds	r1, #4
 80066ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066be:	f1b9 0f00 	cmp.w	r9, #0
 80066c2:	d021      	beq.n	8006708 <__multiply+0x140>
 80066c4:	46ae      	mov	lr, r5
 80066c6:	f04f 0a00 	mov.w	sl, #0
 80066ca:	682b      	ldr	r3, [r5, #0]
 80066cc:	f104 0c14 	add.w	ip, r4, #20
 80066d0:	f8bc b000 	ldrh.w	fp, [ip]
 80066d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	fb09 770b 	mla	r7, r9, fp, r7
 80066de:	4457      	add	r7, sl
 80066e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066e4:	f84e 3b04 	str.w	r3, [lr], #4
 80066e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066f0:	f8be 3000 	ldrh.w	r3, [lr]
 80066f4:	4562      	cmp	r2, ip
 80066f6:	fb09 330a 	mla	r3, r9, sl, r3
 80066fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80066fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006702:	d8e5      	bhi.n	80066d0 <__multiply+0x108>
 8006704:	9f01      	ldr	r7, [sp, #4]
 8006706:	51eb      	str	r3, [r5, r7]
 8006708:	3504      	adds	r5, #4
 800670a:	e79a      	b.n	8006642 <__multiply+0x7a>
 800670c:	3e01      	subs	r6, #1
 800670e:	e79c      	b.n	800664a <__multiply+0x82>
 8006710:	08007682 	.word	0x08007682
 8006714:	08007693 	.word	0x08007693

08006718 <__pow5mult>:
 8006718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800671c:	4615      	mov	r5, r2
 800671e:	f012 0203 	ands.w	r2, r2, #3
 8006722:	4607      	mov	r7, r0
 8006724:	460e      	mov	r6, r1
 8006726:	d007      	beq.n	8006738 <__pow5mult+0x20>
 8006728:	4c25      	ldr	r4, [pc, #148]	@ (80067c0 <__pow5mult+0xa8>)
 800672a:	3a01      	subs	r2, #1
 800672c:	2300      	movs	r3, #0
 800672e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006732:	f7ff fea1 	bl	8006478 <__multadd>
 8006736:	4606      	mov	r6, r0
 8006738:	10ad      	asrs	r5, r5, #2
 800673a:	d03d      	beq.n	80067b8 <__pow5mult+0xa0>
 800673c:	69fc      	ldr	r4, [r7, #28]
 800673e:	b97c      	cbnz	r4, 8006760 <__pow5mult+0x48>
 8006740:	2010      	movs	r0, #16
 8006742:	f7ff fd81 	bl	8006248 <malloc>
 8006746:	4602      	mov	r2, r0
 8006748:	61f8      	str	r0, [r7, #28]
 800674a:	b928      	cbnz	r0, 8006758 <__pow5mult+0x40>
 800674c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006750:	4b1c      	ldr	r3, [pc, #112]	@ (80067c4 <__pow5mult+0xac>)
 8006752:	481d      	ldr	r0, [pc, #116]	@ (80067c8 <__pow5mult+0xb0>)
 8006754:	f000 fbcc 	bl	8006ef0 <__assert_func>
 8006758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800675c:	6004      	str	r4, [r0, #0]
 800675e:	60c4      	str	r4, [r0, #12]
 8006760:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006768:	b94c      	cbnz	r4, 800677e <__pow5mult+0x66>
 800676a:	f240 2171 	movw	r1, #625	@ 0x271
 800676e:	4638      	mov	r0, r7
 8006770:	f7ff ff14 	bl	800659c <__i2b>
 8006774:	2300      	movs	r3, #0
 8006776:	4604      	mov	r4, r0
 8006778:	f8c8 0008 	str.w	r0, [r8, #8]
 800677c:	6003      	str	r3, [r0, #0]
 800677e:	f04f 0900 	mov.w	r9, #0
 8006782:	07eb      	lsls	r3, r5, #31
 8006784:	d50a      	bpl.n	800679c <__pow5mult+0x84>
 8006786:	4631      	mov	r1, r6
 8006788:	4622      	mov	r2, r4
 800678a:	4638      	mov	r0, r7
 800678c:	f7ff ff1c 	bl	80065c8 <__multiply>
 8006790:	4680      	mov	r8, r0
 8006792:	4631      	mov	r1, r6
 8006794:	4638      	mov	r0, r7
 8006796:	f7ff fe4d 	bl	8006434 <_Bfree>
 800679a:	4646      	mov	r6, r8
 800679c:	106d      	asrs	r5, r5, #1
 800679e:	d00b      	beq.n	80067b8 <__pow5mult+0xa0>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	b938      	cbnz	r0, 80067b4 <__pow5mult+0x9c>
 80067a4:	4622      	mov	r2, r4
 80067a6:	4621      	mov	r1, r4
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff ff0d 	bl	80065c8 <__multiply>
 80067ae:	6020      	str	r0, [r4, #0]
 80067b0:	f8c0 9000 	str.w	r9, [r0]
 80067b4:	4604      	mov	r4, r0
 80067b6:	e7e4      	b.n	8006782 <__pow5mult+0x6a>
 80067b8:	4630      	mov	r0, r6
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	bf00      	nop
 80067c0:	080076ec 	.word	0x080076ec
 80067c4:	08007613 	.word	0x08007613
 80067c8:	08007693 	.word	0x08007693

080067cc <__lshift>:
 80067cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	460c      	mov	r4, r1
 80067d2:	4607      	mov	r7, r0
 80067d4:	4691      	mov	r9, r2
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	6849      	ldr	r1, [r1, #4]
 80067da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067de:	68a3      	ldr	r3, [r4, #8]
 80067e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067e4:	f108 0601 	add.w	r6, r8, #1
 80067e8:	42b3      	cmp	r3, r6
 80067ea:	db0b      	blt.n	8006804 <__lshift+0x38>
 80067ec:	4638      	mov	r0, r7
 80067ee:	f7ff fde1 	bl	80063b4 <_Balloc>
 80067f2:	4605      	mov	r5, r0
 80067f4:	b948      	cbnz	r0, 800680a <__lshift+0x3e>
 80067f6:	4602      	mov	r2, r0
 80067f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067fc:	4b27      	ldr	r3, [pc, #156]	@ (800689c <__lshift+0xd0>)
 80067fe:	4828      	ldr	r0, [pc, #160]	@ (80068a0 <__lshift+0xd4>)
 8006800:	f000 fb76 	bl	8006ef0 <__assert_func>
 8006804:	3101      	adds	r1, #1
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	e7ee      	b.n	80067e8 <__lshift+0x1c>
 800680a:	2300      	movs	r3, #0
 800680c:	f100 0114 	add.w	r1, r0, #20
 8006810:	f100 0210 	add.w	r2, r0, #16
 8006814:	4618      	mov	r0, r3
 8006816:	4553      	cmp	r3, sl
 8006818:	db33      	blt.n	8006882 <__lshift+0xb6>
 800681a:	6920      	ldr	r0, [r4, #16]
 800681c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006820:	f104 0314 	add.w	r3, r4, #20
 8006824:	f019 091f 	ands.w	r9, r9, #31
 8006828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800682c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006830:	d02b      	beq.n	800688a <__lshift+0xbe>
 8006832:	468a      	mov	sl, r1
 8006834:	2200      	movs	r2, #0
 8006836:	f1c9 0e20 	rsb	lr, r9, #32
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	fa00 f009 	lsl.w	r0, r0, r9
 8006840:	4310      	orrs	r0, r2
 8006842:	f84a 0b04 	str.w	r0, [sl], #4
 8006846:	f853 2b04 	ldr.w	r2, [r3], #4
 800684a:	459c      	cmp	ip, r3
 800684c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006850:	d8f3      	bhi.n	800683a <__lshift+0x6e>
 8006852:	ebac 0304 	sub.w	r3, ip, r4
 8006856:	3b15      	subs	r3, #21
 8006858:	f023 0303 	bic.w	r3, r3, #3
 800685c:	3304      	adds	r3, #4
 800685e:	f104 0015 	add.w	r0, r4, #21
 8006862:	4584      	cmp	ip, r0
 8006864:	bf38      	it	cc
 8006866:	2304      	movcc	r3, #4
 8006868:	50ca      	str	r2, [r1, r3]
 800686a:	b10a      	cbz	r2, 8006870 <__lshift+0xa4>
 800686c:	f108 0602 	add.w	r6, r8, #2
 8006870:	3e01      	subs	r6, #1
 8006872:	4638      	mov	r0, r7
 8006874:	4621      	mov	r1, r4
 8006876:	612e      	str	r6, [r5, #16]
 8006878:	f7ff fddc 	bl	8006434 <_Bfree>
 800687c:	4628      	mov	r0, r5
 800687e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006882:	f842 0f04 	str.w	r0, [r2, #4]!
 8006886:	3301      	adds	r3, #1
 8006888:	e7c5      	b.n	8006816 <__lshift+0x4a>
 800688a:	3904      	subs	r1, #4
 800688c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006890:	459c      	cmp	ip, r3
 8006892:	f841 2f04 	str.w	r2, [r1, #4]!
 8006896:	d8f9      	bhi.n	800688c <__lshift+0xc0>
 8006898:	e7ea      	b.n	8006870 <__lshift+0xa4>
 800689a:	bf00      	nop
 800689c:	08007682 	.word	0x08007682
 80068a0:	08007693 	.word	0x08007693

080068a4 <__mcmp>:
 80068a4:	4603      	mov	r3, r0
 80068a6:	690a      	ldr	r2, [r1, #16]
 80068a8:	6900      	ldr	r0, [r0, #16]
 80068aa:	b530      	push	{r4, r5, lr}
 80068ac:	1a80      	subs	r0, r0, r2
 80068ae:	d10e      	bne.n	80068ce <__mcmp+0x2a>
 80068b0:	3314      	adds	r3, #20
 80068b2:	3114      	adds	r1, #20
 80068b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068c4:	4295      	cmp	r5, r2
 80068c6:	d003      	beq.n	80068d0 <__mcmp+0x2c>
 80068c8:	d205      	bcs.n	80068d6 <__mcmp+0x32>
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	bd30      	pop	{r4, r5, pc}
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d3f3      	bcc.n	80068bc <__mcmp+0x18>
 80068d4:	e7fb      	b.n	80068ce <__mcmp+0x2a>
 80068d6:	2001      	movs	r0, #1
 80068d8:	e7f9      	b.n	80068ce <__mcmp+0x2a>
	...

080068dc <__mdiff>:
 80068dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e0:	4689      	mov	r9, r1
 80068e2:	4606      	mov	r6, r0
 80068e4:	4611      	mov	r1, r2
 80068e6:	4648      	mov	r0, r9
 80068e8:	4614      	mov	r4, r2
 80068ea:	f7ff ffdb 	bl	80068a4 <__mcmp>
 80068ee:	1e05      	subs	r5, r0, #0
 80068f0:	d112      	bne.n	8006918 <__mdiff+0x3c>
 80068f2:	4629      	mov	r1, r5
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff fd5d 	bl	80063b4 <_Balloc>
 80068fa:	4602      	mov	r2, r0
 80068fc:	b928      	cbnz	r0, 800690a <__mdiff+0x2e>
 80068fe:	f240 2137 	movw	r1, #567	@ 0x237
 8006902:	4b3e      	ldr	r3, [pc, #248]	@ (80069fc <__mdiff+0x120>)
 8006904:	483e      	ldr	r0, [pc, #248]	@ (8006a00 <__mdiff+0x124>)
 8006906:	f000 faf3 	bl	8006ef0 <__assert_func>
 800690a:	2301      	movs	r3, #1
 800690c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006910:	4610      	mov	r0, r2
 8006912:	b003      	add	sp, #12
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	bfbc      	itt	lt
 800691a:	464b      	movlt	r3, r9
 800691c:	46a1      	movlt	r9, r4
 800691e:	4630      	mov	r0, r6
 8006920:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006924:	bfba      	itte	lt
 8006926:	461c      	movlt	r4, r3
 8006928:	2501      	movlt	r5, #1
 800692a:	2500      	movge	r5, #0
 800692c:	f7ff fd42 	bl	80063b4 <_Balloc>
 8006930:	4602      	mov	r2, r0
 8006932:	b918      	cbnz	r0, 800693c <__mdiff+0x60>
 8006934:	f240 2145 	movw	r1, #581	@ 0x245
 8006938:	4b30      	ldr	r3, [pc, #192]	@ (80069fc <__mdiff+0x120>)
 800693a:	e7e3      	b.n	8006904 <__mdiff+0x28>
 800693c:	f100 0b14 	add.w	fp, r0, #20
 8006940:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006944:	f109 0310 	add.w	r3, r9, #16
 8006948:	60c5      	str	r5, [r0, #12]
 800694a:	f04f 0c00 	mov.w	ip, #0
 800694e:	f109 0514 	add.w	r5, r9, #20
 8006952:	46d9      	mov	r9, fp
 8006954:	6926      	ldr	r6, [r4, #16]
 8006956:	f104 0e14 	add.w	lr, r4, #20
 800695a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800695e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	9b01      	ldr	r3, [sp, #4]
 8006966:	f85e 0b04 	ldr.w	r0, [lr], #4
 800696a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800696e:	b281      	uxth	r1, r0
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	fa1f f38a 	uxth.w	r3, sl
 8006976:	1a5b      	subs	r3, r3, r1
 8006978:	0c00      	lsrs	r0, r0, #16
 800697a:	4463      	add	r3, ip
 800697c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006980:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006984:	b29b      	uxth	r3, r3
 8006986:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800698a:	4576      	cmp	r6, lr
 800698c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006990:	f849 3b04 	str.w	r3, [r9], #4
 8006994:	d8e6      	bhi.n	8006964 <__mdiff+0x88>
 8006996:	1b33      	subs	r3, r6, r4
 8006998:	3b15      	subs	r3, #21
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	3415      	adds	r4, #21
 80069a0:	3304      	adds	r3, #4
 80069a2:	42a6      	cmp	r6, r4
 80069a4:	bf38      	it	cc
 80069a6:	2304      	movcc	r3, #4
 80069a8:	441d      	add	r5, r3
 80069aa:	445b      	add	r3, fp
 80069ac:	461e      	mov	r6, r3
 80069ae:	462c      	mov	r4, r5
 80069b0:	4544      	cmp	r4, r8
 80069b2:	d30e      	bcc.n	80069d2 <__mdiff+0xf6>
 80069b4:	f108 0103 	add.w	r1, r8, #3
 80069b8:	1b49      	subs	r1, r1, r5
 80069ba:	f021 0103 	bic.w	r1, r1, #3
 80069be:	3d03      	subs	r5, #3
 80069c0:	45a8      	cmp	r8, r5
 80069c2:	bf38      	it	cc
 80069c4:	2100      	movcc	r1, #0
 80069c6:	440b      	add	r3, r1
 80069c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069cc:	b199      	cbz	r1, 80069f6 <__mdiff+0x11a>
 80069ce:	6117      	str	r7, [r2, #16]
 80069d0:	e79e      	b.n	8006910 <__mdiff+0x34>
 80069d2:	46e6      	mov	lr, ip
 80069d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80069d8:	fa1f fc81 	uxth.w	ip, r1
 80069dc:	44f4      	add	ip, lr
 80069de:	0c08      	lsrs	r0, r1, #16
 80069e0:	4471      	add	r1, lr
 80069e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069e6:	b289      	uxth	r1, r1
 80069e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069f0:	f846 1b04 	str.w	r1, [r6], #4
 80069f4:	e7dc      	b.n	80069b0 <__mdiff+0xd4>
 80069f6:	3f01      	subs	r7, #1
 80069f8:	e7e6      	b.n	80069c8 <__mdiff+0xec>
 80069fa:	bf00      	nop
 80069fc:	08007682 	.word	0x08007682
 8006a00:	08007693 	.word	0x08007693

08006a04 <__d2b>:
 8006a04:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4690      	mov	r8, r2
 8006a0c:	4699      	mov	r9, r3
 8006a0e:	9e08      	ldr	r6, [sp, #32]
 8006a10:	f7ff fcd0 	bl	80063b4 <_Balloc>
 8006a14:	4604      	mov	r4, r0
 8006a16:	b930      	cbnz	r0, 8006a26 <__d2b+0x22>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a1e:	4b23      	ldr	r3, [pc, #140]	@ (8006aac <__d2b+0xa8>)
 8006a20:	4823      	ldr	r0, [pc, #140]	@ (8006ab0 <__d2b+0xac>)
 8006a22:	f000 fa65 	bl	8006ef0 <__assert_func>
 8006a26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a2e:	b10d      	cbz	r5, 8006a34 <__d2b+0x30>
 8006a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	f1b8 0300 	subs.w	r3, r8, #0
 8006a3a:	d024      	beq.n	8006a86 <__d2b+0x82>
 8006a3c:	4668      	mov	r0, sp
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	f7ff fd7f 	bl	8006542 <__lo0bits>
 8006a44:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a48:	b1d8      	cbz	r0, 8006a82 <__d2b+0x7e>
 8006a4a:	f1c0 0320 	rsb	r3, r0, #32
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	430b      	orrs	r3, r1
 8006a54:	40c2      	lsrs	r2, r0
 8006a56:	6163      	str	r3, [r4, #20]
 8006a58:	9201      	str	r2, [sp, #4]
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bf0c      	ite	eq
 8006a60:	2201      	moveq	r2, #1
 8006a62:	2202      	movne	r2, #2
 8006a64:	61a3      	str	r3, [r4, #24]
 8006a66:	6122      	str	r2, [r4, #16]
 8006a68:	b1ad      	cbz	r5, 8006a96 <__d2b+0x92>
 8006a6a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a6e:	4405      	add	r5, r0
 8006a70:	6035      	str	r5, [r6, #0]
 8006a72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a78:	6018      	str	r0, [r3, #0]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	b002      	add	sp, #8
 8006a7e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006a82:	6161      	str	r1, [r4, #20]
 8006a84:	e7e9      	b.n	8006a5a <__d2b+0x56>
 8006a86:	a801      	add	r0, sp, #4
 8006a88:	f7ff fd5b 	bl	8006542 <__lo0bits>
 8006a8c:	9b01      	ldr	r3, [sp, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	6163      	str	r3, [r4, #20]
 8006a92:	3020      	adds	r0, #32
 8006a94:	e7e7      	b.n	8006a66 <__d2b+0x62>
 8006a96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a9e:	6030      	str	r0, [r6, #0]
 8006aa0:	6918      	ldr	r0, [r3, #16]
 8006aa2:	f7ff fd2f 	bl	8006504 <__hi0bits>
 8006aa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aaa:	e7e4      	b.n	8006a76 <__d2b+0x72>
 8006aac:	08007682 	.word	0x08007682
 8006ab0:	08007693 	.word	0x08007693

08006ab4 <__ssputs_r>:
 8006ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	461f      	mov	r7, r3
 8006aba:	688e      	ldr	r6, [r1, #8]
 8006abc:	4682      	mov	sl, r0
 8006abe:	42be      	cmp	r6, r7
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	4690      	mov	r8, r2
 8006ac4:	680b      	ldr	r3, [r1, #0]
 8006ac6:	d82d      	bhi.n	8006b24 <__ssputs_r+0x70>
 8006ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006acc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ad0:	d026      	beq.n	8006b20 <__ssputs_r+0x6c>
 8006ad2:	6965      	ldr	r5, [r4, #20]
 8006ad4:	6909      	ldr	r1, [r1, #16]
 8006ad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ada:	eba3 0901 	sub.w	r9, r3, r1
 8006ade:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ae2:	1c7b      	adds	r3, r7, #1
 8006ae4:	444b      	add	r3, r9
 8006ae6:	106d      	asrs	r5, r5, #1
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	bf38      	it	cc
 8006aec:	461d      	movcc	r5, r3
 8006aee:	0553      	lsls	r3, r2, #21
 8006af0:	d527      	bpl.n	8006b42 <__ssputs_r+0x8e>
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7ff fbd2 	bl	800629c <_malloc_r>
 8006af8:	4606      	mov	r6, r0
 8006afa:	b360      	cbz	r0, 8006b56 <__ssputs_r+0xa2>
 8006afc:	464a      	mov	r2, r9
 8006afe:	6921      	ldr	r1, [r4, #16]
 8006b00:	f000 f9e8 	bl	8006ed4 <memcpy>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	6126      	str	r6, [r4, #16]
 8006b12:	444e      	add	r6, r9
 8006b14:	6026      	str	r6, [r4, #0]
 8006b16:	463e      	mov	r6, r7
 8006b18:	6165      	str	r5, [r4, #20]
 8006b1a:	eba5 0509 	sub.w	r5, r5, r9
 8006b1e:	60a5      	str	r5, [r4, #8]
 8006b20:	42be      	cmp	r6, r7
 8006b22:	d900      	bls.n	8006b26 <__ssputs_r+0x72>
 8006b24:	463e      	mov	r6, r7
 8006b26:	4632      	mov	r2, r6
 8006b28:	4641      	mov	r1, r8
 8006b2a:	6820      	ldr	r0, [r4, #0]
 8006b2c:	f7fe fc49 	bl	80053c2 <memmove>
 8006b30:	2000      	movs	r0, #0
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	1b9b      	subs	r3, r3, r6
 8006b36:	60a3      	str	r3, [r4, #8]
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	4433      	add	r3, r6
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b42:	462a      	mov	r2, r5
 8006b44:	f000 fa18 	bl	8006f78 <_realloc_r>
 8006b48:	4606      	mov	r6, r0
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d1e0      	bne.n	8006b10 <__ssputs_r+0x5c>
 8006b4e:	4650      	mov	r0, sl
 8006b50:	6921      	ldr	r1, [r4, #16]
 8006b52:	f7ff fb31 	bl	80061b8 <_free_r>
 8006b56:	230c      	movs	r3, #12
 8006b58:	f8ca 3000 	str.w	r3, [sl]
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	e7e9      	b.n	8006b3e <__ssputs_r+0x8a>
	...

08006b6c <_svfiprintf_r>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	4698      	mov	r8, r3
 8006b72:	898b      	ldrh	r3, [r1, #12]
 8006b74:	4607      	mov	r7, r0
 8006b76:	061b      	lsls	r3, r3, #24
 8006b78:	460d      	mov	r5, r1
 8006b7a:	4614      	mov	r4, r2
 8006b7c:	b09d      	sub	sp, #116	@ 0x74
 8006b7e:	d510      	bpl.n	8006ba2 <_svfiprintf_r+0x36>
 8006b80:	690b      	ldr	r3, [r1, #16]
 8006b82:	b973      	cbnz	r3, 8006ba2 <_svfiprintf_r+0x36>
 8006b84:	2140      	movs	r1, #64	@ 0x40
 8006b86:	f7ff fb89 	bl	800629c <_malloc_r>
 8006b8a:	6028      	str	r0, [r5, #0]
 8006b8c:	6128      	str	r0, [r5, #16]
 8006b8e:	b930      	cbnz	r0, 8006b9e <_svfiprintf_r+0x32>
 8006b90:	230c      	movs	r3, #12
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	b01d      	add	sp, #116	@ 0x74
 8006b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9e:	2340      	movs	r3, #64	@ 0x40
 8006ba0:	616b      	str	r3, [r5, #20]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba6:	2320      	movs	r3, #32
 8006ba8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bac:	2330      	movs	r3, #48	@ 0x30
 8006bae:	f04f 0901 	mov.w	r9, #1
 8006bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006d50 <_svfiprintf_r+0x1e4>
 8006bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bbe:	4623      	mov	r3, r4
 8006bc0:	469a      	mov	sl, r3
 8006bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bc6:	b10a      	cbz	r2, 8006bcc <_svfiprintf_r+0x60>
 8006bc8:	2a25      	cmp	r2, #37	@ 0x25
 8006bca:	d1f9      	bne.n	8006bc0 <_svfiprintf_r+0x54>
 8006bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8006bd0:	d00b      	beq.n	8006bea <_svfiprintf_r+0x7e>
 8006bd2:	465b      	mov	r3, fp
 8006bd4:	4622      	mov	r2, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff ff6b 	bl	8006ab4 <__ssputs_r>
 8006bde:	3001      	adds	r0, #1
 8006be0:	f000 80a7 	beq.w	8006d32 <_svfiprintf_r+0x1c6>
 8006be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006be6:	445a      	add	r2, fp
 8006be8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bea:	f89a 3000 	ldrb.w	r3, [sl]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 809f 	beq.w	8006d32 <_svfiprintf_r+0x1c6>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bfe:	f10a 0a01 	add.w	sl, sl, #1
 8006c02:	9304      	str	r3, [sp, #16]
 8006c04:	9307      	str	r3, [sp, #28]
 8006c06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c0c:	4654      	mov	r4, sl
 8006c0e:	2205      	movs	r2, #5
 8006c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c14:	484e      	ldr	r0, [pc, #312]	@ (8006d50 <_svfiprintf_r+0x1e4>)
 8006c16:	f7fe fc6e 	bl	80054f6 <memchr>
 8006c1a:	9a04      	ldr	r2, [sp, #16]
 8006c1c:	b9d8      	cbnz	r0, 8006c56 <_svfiprintf_r+0xea>
 8006c1e:	06d0      	lsls	r0, r2, #27
 8006c20:	bf44      	itt	mi
 8006c22:	2320      	movmi	r3, #32
 8006c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c28:	0711      	lsls	r1, r2, #28
 8006c2a:	bf44      	itt	mi
 8006c2c:	232b      	movmi	r3, #43	@ 0x2b
 8006c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c32:	f89a 3000 	ldrb.w	r3, [sl]
 8006c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c38:	d015      	beq.n	8006c66 <_svfiprintf_r+0xfa>
 8006c3a:	4654      	mov	r4, sl
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	f04f 0c0a 	mov.w	ip, #10
 8006c42:	9a07      	ldr	r2, [sp, #28]
 8006c44:	4621      	mov	r1, r4
 8006c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c4a:	3b30      	subs	r3, #48	@ 0x30
 8006c4c:	2b09      	cmp	r3, #9
 8006c4e:	d94b      	bls.n	8006ce8 <_svfiprintf_r+0x17c>
 8006c50:	b1b0      	cbz	r0, 8006c80 <_svfiprintf_r+0x114>
 8006c52:	9207      	str	r2, [sp, #28]
 8006c54:	e014      	b.n	8006c80 <_svfiprintf_r+0x114>
 8006c56:	eba0 0308 	sub.w	r3, r0, r8
 8006c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	46a2      	mov	sl, r4
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	e7d2      	b.n	8006c0c <_svfiprintf_r+0xa0>
 8006c66:	9b03      	ldr	r3, [sp, #12]
 8006c68:	1d19      	adds	r1, r3, #4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	9103      	str	r1, [sp, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bfbb      	ittet	lt
 8006c72:	425b      	neglt	r3, r3
 8006c74:	f042 0202 	orrlt.w	r2, r2, #2
 8006c78:	9307      	strge	r3, [sp, #28]
 8006c7a:	9307      	strlt	r3, [sp, #28]
 8006c7c:	bfb8      	it	lt
 8006c7e:	9204      	strlt	r2, [sp, #16]
 8006c80:	7823      	ldrb	r3, [r4, #0]
 8006c82:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c84:	d10a      	bne.n	8006c9c <_svfiprintf_r+0x130>
 8006c86:	7863      	ldrb	r3, [r4, #1]
 8006c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c8a:	d132      	bne.n	8006cf2 <_svfiprintf_r+0x186>
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	3402      	adds	r4, #2
 8006c90:	1d1a      	adds	r2, r3, #4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	9203      	str	r2, [sp, #12]
 8006c96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c9a:	9305      	str	r3, [sp, #20]
 8006c9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006d54 <_svfiprintf_r+0x1e8>
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	7821      	ldrb	r1, [r4, #0]
 8006ca6:	f7fe fc26 	bl	80054f6 <memchr>
 8006caa:	b138      	cbz	r0, 8006cbc <_svfiprintf_r+0x150>
 8006cac:	2240      	movs	r2, #64	@ 0x40
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	eba0 000a 	sub.w	r0, r0, sl
 8006cb4:	4082      	lsls	r2, r0
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	3401      	adds	r4, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc0:	2206      	movs	r2, #6
 8006cc2:	4825      	ldr	r0, [pc, #148]	@ (8006d58 <_svfiprintf_r+0x1ec>)
 8006cc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cc8:	f7fe fc15 	bl	80054f6 <memchr>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d036      	beq.n	8006d3e <_svfiprintf_r+0x1d2>
 8006cd0:	4b22      	ldr	r3, [pc, #136]	@ (8006d5c <_svfiprintf_r+0x1f0>)
 8006cd2:	bb1b      	cbnz	r3, 8006d1c <_svfiprintf_r+0x1b0>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	3307      	adds	r3, #7
 8006cd8:	f023 0307 	bic.w	r3, r3, #7
 8006cdc:	3308      	adds	r3, #8
 8006cde:	9303      	str	r3, [sp, #12]
 8006ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce2:	4433      	add	r3, r6
 8006ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce6:	e76a      	b.n	8006bbe <_svfiprintf_r+0x52>
 8006ce8:	460c      	mov	r4, r1
 8006cea:	2001      	movs	r0, #1
 8006cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cf0:	e7a8      	b.n	8006c44 <_svfiprintf_r+0xd8>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f04f 0c0a 	mov.w	ip, #10
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	3401      	adds	r4, #1
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d04:	3a30      	subs	r2, #48	@ 0x30
 8006d06:	2a09      	cmp	r2, #9
 8006d08:	d903      	bls.n	8006d12 <_svfiprintf_r+0x1a6>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0c6      	beq.n	8006c9c <_svfiprintf_r+0x130>
 8006d0e:	9105      	str	r1, [sp, #20]
 8006d10:	e7c4      	b.n	8006c9c <_svfiprintf_r+0x130>
 8006d12:	4604      	mov	r4, r0
 8006d14:	2301      	movs	r3, #1
 8006d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d1a:	e7f0      	b.n	8006cfe <_svfiprintf_r+0x192>
 8006d1c:	ab03      	add	r3, sp, #12
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	462a      	mov	r2, r5
 8006d22:	4638      	mov	r0, r7
 8006d24:	4b0e      	ldr	r3, [pc, #56]	@ (8006d60 <_svfiprintf_r+0x1f4>)
 8006d26:	a904      	add	r1, sp, #16
 8006d28:	f7fd fe68 	bl	80049fc <_printf_float>
 8006d2c:	1c42      	adds	r2, r0, #1
 8006d2e:	4606      	mov	r6, r0
 8006d30:	d1d6      	bne.n	8006ce0 <_svfiprintf_r+0x174>
 8006d32:	89ab      	ldrh	r3, [r5, #12]
 8006d34:	065b      	lsls	r3, r3, #25
 8006d36:	f53f af2d 	bmi.w	8006b94 <_svfiprintf_r+0x28>
 8006d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d3c:	e72c      	b.n	8006b98 <_svfiprintf_r+0x2c>
 8006d3e:	ab03      	add	r3, sp, #12
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	462a      	mov	r2, r5
 8006d44:	4638      	mov	r0, r7
 8006d46:	4b06      	ldr	r3, [pc, #24]	@ (8006d60 <_svfiprintf_r+0x1f4>)
 8006d48:	a904      	add	r1, sp, #16
 8006d4a:	f7fe f8f5 	bl	8004f38 <_printf_i>
 8006d4e:	e7ed      	b.n	8006d2c <_svfiprintf_r+0x1c0>
 8006d50:	080077e8 	.word	0x080077e8
 8006d54:	080077ee 	.word	0x080077ee
 8006d58:	080077f2 	.word	0x080077f2
 8006d5c:	080049fd 	.word	0x080049fd
 8006d60:	08006ab5 	.word	0x08006ab5

08006d64 <__sflush_r>:
 8006d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	0716      	lsls	r6, r2, #28
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	d454      	bmi.n	8006e1c <__sflush_r+0xb8>
 8006d72:	684b      	ldr	r3, [r1, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dc02      	bgt.n	8006d7e <__sflush_r+0x1a>
 8006d78:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dd48      	ble.n	8006e10 <__sflush_r+0xac>
 8006d7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d80:	2e00      	cmp	r6, #0
 8006d82:	d045      	beq.n	8006e10 <__sflush_r+0xac>
 8006d84:	2300      	movs	r3, #0
 8006d86:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d8a:	682f      	ldr	r7, [r5, #0]
 8006d8c:	6a21      	ldr	r1, [r4, #32]
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	d030      	beq.n	8006df4 <__sflush_r+0x90>
 8006d92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	0759      	lsls	r1, r3, #29
 8006d98:	d505      	bpl.n	8006da6 <__sflush_r+0x42>
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	1ad2      	subs	r2, r2, r3
 8006d9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006da0:	b10b      	cbz	r3, 8006da6 <__sflush_r+0x42>
 8006da2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006da4:	1ad2      	subs	r2, r2, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	4628      	mov	r0, r5
 8006daa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dac:	6a21      	ldr	r1, [r4, #32]
 8006dae:	47b0      	blx	r6
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	d106      	bne.n	8006dc4 <__sflush_r+0x60>
 8006db6:	6829      	ldr	r1, [r5, #0]
 8006db8:	291d      	cmp	r1, #29
 8006dba:	d82b      	bhi.n	8006e14 <__sflush_r+0xb0>
 8006dbc:	4a28      	ldr	r2, [pc, #160]	@ (8006e60 <__sflush_r+0xfc>)
 8006dbe:	410a      	asrs	r2, r1
 8006dc0:	07d6      	lsls	r6, r2, #31
 8006dc2:	d427      	bmi.n	8006e14 <__sflush_r+0xb0>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	6062      	str	r2, [r4, #4]
 8006dc8:	6922      	ldr	r2, [r4, #16]
 8006dca:	04d9      	lsls	r1, r3, #19
 8006dcc:	6022      	str	r2, [r4, #0]
 8006dce:	d504      	bpl.n	8006dda <__sflush_r+0x76>
 8006dd0:	1c42      	adds	r2, r0, #1
 8006dd2:	d101      	bne.n	8006dd8 <__sflush_r+0x74>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b903      	cbnz	r3, 8006dda <__sflush_r+0x76>
 8006dd8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006dda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ddc:	602f      	str	r7, [r5, #0]
 8006dde:	b1b9      	cbz	r1, 8006e10 <__sflush_r+0xac>
 8006de0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006de4:	4299      	cmp	r1, r3
 8006de6:	d002      	beq.n	8006dee <__sflush_r+0x8a>
 8006de8:	4628      	mov	r0, r5
 8006dea:	f7ff f9e5 	bl	80061b8 <_free_r>
 8006dee:	2300      	movs	r3, #0
 8006df0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006df2:	e00d      	b.n	8006e10 <__sflush_r+0xac>
 8006df4:	2301      	movs	r3, #1
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b0      	blx	r6
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	1c50      	adds	r0, r2, #1
 8006dfe:	d1c9      	bne.n	8006d94 <__sflush_r+0x30>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0c6      	beq.n	8006d94 <__sflush_r+0x30>
 8006e06:	2b1d      	cmp	r3, #29
 8006e08:	d001      	beq.n	8006e0e <__sflush_r+0xaa>
 8006e0a:	2b16      	cmp	r3, #22
 8006e0c:	d11d      	bne.n	8006e4a <__sflush_r+0xe6>
 8006e0e:	602f      	str	r7, [r5, #0]
 8006e10:	2000      	movs	r0, #0
 8006e12:	e021      	b.n	8006e58 <__sflush_r+0xf4>
 8006e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e18:	b21b      	sxth	r3, r3
 8006e1a:	e01a      	b.n	8006e52 <__sflush_r+0xee>
 8006e1c:	690f      	ldr	r7, [r1, #16]
 8006e1e:	2f00      	cmp	r7, #0
 8006e20:	d0f6      	beq.n	8006e10 <__sflush_r+0xac>
 8006e22:	0793      	lsls	r3, r2, #30
 8006e24:	bf18      	it	ne
 8006e26:	2300      	movne	r3, #0
 8006e28:	680e      	ldr	r6, [r1, #0]
 8006e2a:	bf08      	it	eq
 8006e2c:	694b      	ldreq	r3, [r1, #20]
 8006e2e:	1bf6      	subs	r6, r6, r7
 8006e30:	600f      	str	r7, [r1, #0]
 8006e32:	608b      	str	r3, [r1, #8]
 8006e34:	2e00      	cmp	r6, #0
 8006e36:	ddeb      	ble.n	8006e10 <__sflush_r+0xac>
 8006e38:	4633      	mov	r3, r6
 8006e3a:	463a      	mov	r2, r7
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	6a21      	ldr	r1, [r4, #32]
 8006e40:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006e44:	47e0      	blx	ip
 8006e46:	2800      	cmp	r0, #0
 8006e48:	dc07      	bgt.n	8006e5a <__sflush_r+0xf6>
 8006e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5a:	4407      	add	r7, r0
 8006e5c:	1a36      	subs	r6, r6, r0
 8006e5e:	e7e9      	b.n	8006e34 <__sflush_r+0xd0>
 8006e60:	dfbffffe 	.word	0xdfbffffe

08006e64 <_fflush_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	690b      	ldr	r3, [r1, #16]
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	b913      	cbnz	r3, 8006e74 <_fflush_r+0x10>
 8006e6e:	2500      	movs	r5, #0
 8006e70:	4628      	mov	r0, r5
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	b118      	cbz	r0, 8006e7e <_fflush_r+0x1a>
 8006e76:	6a03      	ldr	r3, [r0, #32]
 8006e78:	b90b      	cbnz	r3, 8006e7e <_fflush_r+0x1a>
 8006e7a:	f7fe fa09 	bl	8005290 <__sinit>
 8006e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0f3      	beq.n	8006e6e <_fflush_r+0xa>
 8006e86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e88:	07d0      	lsls	r0, r2, #31
 8006e8a:	d404      	bmi.n	8006e96 <_fflush_r+0x32>
 8006e8c:	0599      	lsls	r1, r3, #22
 8006e8e:	d402      	bmi.n	8006e96 <_fflush_r+0x32>
 8006e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e92:	f7fe fb2e 	bl	80054f2 <__retarget_lock_acquire_recursive>
 8006e96:	4628      	mov	r0, r5
 8006e98:	4621      	mov	r1, r4
 8006e9a:	f7ff ff63 	bl	8006d64 <__sflush_r>
 8006e9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	07da      	lsls	r2, r3, #31
 8006ea4:	d4e4      	bmi.n	8006e70 <_fflush_r+0xc>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	059b      	lsls	r3, r3, #22
 8006eaa:	d4e1      	bmi.n	8006e70 <_fflush_r+0xc>
 8006eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eae:	f7fe fb21 	bl	80054f4 <__retarget_lock_release_recursive>
 8006eb2:	e7dd      	b.n	8006e70 <_fflush_r+0xc>

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4d05      	ldr	r5, [pc, #20]	@ (8006ed0 <_sbrk_r+0x1c>)
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fa fec8 	bl	8001c54 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	20000438 	.word	0x20000438

08006ed4 <memcpy>:
 8006ed4:	440a      	add	r2, r1
 8006ed6:	4291      	cmp	r1, r2
 8006ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006edc:	d100      	bne.n	8006ee0 <memcpy+0xc>
 8006ede:	4770      	bx	lr
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eec:	d1f9      	bne.n	8006ee2 <memcpy+0xe>
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <__assert_func>:
 8006ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <__assert_func+0x2c>)
 8006ef8:	4605      	mov	r5, r0
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68d8      	ldr	r0, [r3, #12]
 8006efe:	b954      	cbnz	r4, 8006f16 <__assert_func+0x26>
 8006f00:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <__assert_func+0x30>)
 8006f02:	461c      	mov	r4, r3
 8006f04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f08:	9100      	str	r1, [sp, #0]
 8006f0a:	462b      	mov	r3, r5
 8006f0c:	4905      	ldr	r1, [pc, #20]	@ (8006f24 <__assert_func+0x34>)
 8006f0e:	f000 f86f 	bl	8006ff0 <fiprintf>
 8006f12:	f000 f87f 	bl	8007014 <abort>
 8006f16:	4b04      	ldr	r3, [pc, #16]	@ (8006f28 <__assert_func+0x38>)
 8006f18:	e7f4      	b.n	8006f04 <__assert_func+0x14>
 8006f1a:	bf00      	nop
 8006f1c:	2000001c 	.word	0x2000001c
 8006f20:	0800783e 	.word	0x0800783e
 8006f24:	08007810 	.word	0x08007810
 8006f28:	08007803 	.word	0x08007803

08006f2c <_calloc_r>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	fba1 5402 	umull	r5, r4, r1, r2
 8006f32:	b93c      	cbnz	r4, 8006f44 <_calloc_r+0x18>
 8006f34:	4629      	mov	r1, r5
 8006f36:	f7ff f9b1 	bl	800629c <_malloc_r>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	b928      	cbnz	r0, 8006f4a <_calloc_r+0x1e>
 8006f3e:	2600      	movs	r6, #0
 8006f40:	4630      	mov	r0, r6
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	220c      	movs	r2, #12
 8006f46:	6002      	str	r2, [r0, #0]
 8006f48:	e7f9      	b.n	8006f3e <_calloc_r+0x12>
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f7fe fa52 	bl	80053f6 <memset>
 8006f52:	e7f5      	b.n	8006f40 <_calloc_r+0x14>

08006f54 <__ascii_mbtowc>:
 8006f54:	b082      	sub	sp, #8
 8006f56:	b901      	cbnz	r1, 8006f5a <__ascii_mbtowc+0x6>
 8006f58:	a901      	add	r1, sp, #4
 8006f5a:	b142      	cbz	r2, 8006f6e <__ascii_mbtowc+0x1a>
 8006f5c:	b14b      	cbz	r3, 8006f72 <__ascii_mbtowc+0x1e>
 8006f5e:	7813      	ldrb	r3, [r2, #0]
 8006f60:	600b      	str	r3, [r1, #0]
 8006f62:	7812      	ldrb	r2, [r2, #0]
 8006f64:	1e10      	subs	r0, r2, #0
 8006f66:	bf18      	it	ne
 8006f68:	2001      	movne	r0, #1
 8006f6a:	b002      	add	sp, #8
 8006f6c:	4770      	bx	lr
 8006f6e:	4610      	mov	r0, r2
 8006f70:	e7fb      	b.n	8006f6a <__ascii_mbtowc+0x16>
 8006f72:	f06f 0001 	mvn.w	r0, #1
 8006f76:	e7f8      	b.n	8006f6a <__ascii_mbtowc+0x16>

08006f78 <_realloc_r>:
 8006f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4615      	mov	r5, r2
 8006f80:	460c      	mov	r4, r1
 8006f82:	b921      	cbnz	r1, 8006f8e <_realloc_r+0x16>
 8006f84:	4611      	mov	r1, r2
 8006f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8a:	f7ff b987 	b.w	800629c <_malloc_r>
 8006f8e:	b92a      	cbnz	r2, 8006f9c <_realloc_r+0x24>
 8006f90:	f7ff f912 	bl	80061b8 <_free_r>
 8006f94:	2400      	movs	r4, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f9c:	f000 f841 	bl	8007022 <_malloc_usable_size_r>
 8006fa0:	4285      	cmp	r5, r0
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	d802      	bhi.n	8006fac <_realloc_r+0x34>
 8006fa6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006faa:	d8f4      	bhi.n	8006f96 <_realloc_r+0x1e>
 8006fac:	4629      	mov	r1, r5
 8006fae:	4640      	mov	r0, r8
 8006fb0:	f7ff f974 	bl	800629c <_malloc_r>
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d0ec      	beq.n	8006f94 <_realloc_r+0x1c>
 8006fba:	42b5      	cmp	r5, r6
 8006fbc:	462a      	mov	r2, r5
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	bf28      	it	cs
 8006fc2:	4632      	movcs	r2, r6
 8006fc4:	f7ff ff86 	bl	8006ed4 <memcpy>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7ff f8f4 	bl	80061b8 <_free_r>
 8006fd0:	463c      	mov	r4, r7
 8006fd2:	e7e0      	b.n	8006f96 <_realloc_r+0x1e>

08006fd4 <__ascii_wctomb>:
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	b141      	cbz	r1, 8006fec <__ascii_wctomb+0x18>
 8006fda:	2aff      	cmp	r2, #255	@ 0xff
 8006fdc:	d904      	bls.n	8006fe8 <__ascii_wctomb+0x14>
 8006fde:	228a      	movs	r2, #138	@ 0x8a
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	4770      	bx	lr
 8006fe8:	2001      	movs	r0, #1
 8006fea:	700a      	strb	r2, [r1, #0]
 8006fec:	4770      	bx	lr
	...

08006ff0 <fiprintf>:
 8006ff0:	b40e      	push	{r1, r2, r3}
 8006ff2:	b503      	push	{r0, r1, lr}
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	ab03      	add	r3, sp, #12
 8006ff8:	4805      	ldr	r0, [pc, #20]	@ (8007010 <fiprintf+0x20>)
 8006ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	f000 f83d 	bl	8007080 <_vfiprintf_r>
 8007006:	b002      	add	sp, #8
 8007008:	f85d eb04 	ldr.w	lr, [sp], #4
 800700c:	b003      	add	sp, #12
 800700e:	4770      	bx	lr
 8007010:	2000001c 	.word	0x2000001c

08007014 <abort>:
 8007014:	2006      	movs	r0, #6
 8007016:	b508      	push	{r3, lr}
 8007018:	f000 fa06 	bl	8007428 <raise>
 800701c:	2001      	movs	r0, #1
 800701e:	f7fa fda4 	bl	8001b6a <_exit>

08007022 <_malloc_usable_size_r>:
 8007022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007026:	1f18      	subs	r0, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	bfbc      	itt	lt
 800702c:	580b      	ldrlt	r3, [r1, r0]
 800702e:	18c0      	addlt	r0, r0, r3
 8007030:	4770      	bx	lr

08007032 <__sfputc_r>:
 8007032:	6893      	ldr	r3, [r2, #8]
 8007034:	b410      	push	{r4}
 8007036:	3b01      	subs	r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	6093      	str	r3, [r2, #8]
 800703c:	da07      	bge.n	800704e <__sfputc_r+0x1c>
 800703e:	6994      	ldr	r4, [r2, #24]
 8007040:	42a3      	cmp	r3, r4
 8007042:	db01      	blt.n	8007048 <__sfputc_r+0x16>
 8007044:	290a      	cmp	r1, #10
 8007046:	d102      	bne.n	800704e <__sfputc_r+0x1c>
 8007048:	bc10      	pop	{r4}
 800704a:	f000 b931 	b.w	80072b0 <__swbuf_r>
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	1c58      	adds	r0, r3, #1
 8007052:	6010      	str	r0, [r2, #0]
 8007054:	7019      	strb	r1, [r3, #0]
 8007056:	4608      	mov	r0, r1
 8007058:	bc10      	pop	{r4}
 800705a:	4770      	bx	lr

0800705c <__sfputs_r>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	4606      	mov	r6, r0
 8007060:	460f      	mov	r7, r1
 8007062:	4614      	mov	r4, r2
 8007064:	18d5      	adds	r5, r2, r3
 8007066:	42ac      	cmp	r4, r5
 8007068:	d101      	bne.n	800706e <__sfputs_r+0x12>
 800706a:	2000      	movs	r0, #0
 800706c:	e007      	b.n	800707e <__sfputs_r+0x22>
 800706e:	463a      	mov	r2, r7
 8007070:	4630      	mov	r0, r6
 8007072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007076:	f7ff ffdc 	bl	8007032 <__sfputc_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d1f3      	bne.n	8007066 <__sfputs_r+0xa>
 800707e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007080 <_vfiprintf_r>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	460d      	mov	r5, r1
 8007086:	4614      	mov	r4, r2
 8007088:	4698      	mov	r8, r3
 800708a:	4606      	mov	r6, r0
 800708c:	b09d      	sub	sp, #116	@ 0x74
 800708e:	b118      	cbz	r0, 8007098 <_vfiprintf_r+0x18>
 8007090:	6a03      	ldr	r3, [r0, #32]
 8007092:	b90b      	cbnz	r3, 8007098 <_vfiprintf_r+0x18>
 8007094:	f7fe f8fc 	bl	8005290 <__sinit>
 8007098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800709a:	07d9      	lsls	r1, r3, #31
 800709c:	d405      	bmi.n	80070aa <_vfiprintf_r+0x2a>
 800709e:	89ab      	ldrh	r3, [r5, #12]
 80070a0:	059a      	lsls	r2, r3, #22
 80070a2:	d402      	bmi.n	80070aa <_vfiprintf_r+0x2a>
 80070a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070a6:	f7fe fa24 	bl	80054f2 <__retarget_lock_acquire_recursive>
 80070aa:	89ab      	ldrh	r3, [r5, #12]
 80070ac:	071b      	lsls	r3, r3, #28
 80070ae:	d501      	bpl.n	80070b4 <_vfiprintf_r+0x34>
 80070b0:	692b      	ldr	r3, [r5, #16]
 80070b2:	b99b      	cbnz	r3, 80070dc <_vfiprintf_r+0x5c>
 80070b4:	4629      	mov	r1, r5
 80070b6:	4630      	mov	r0, r6
 80070b8:	f000 f938 	bl	800732c <__swsetup_r>
 80070bc:	b170      	cbz	r0, 80070dc <_vfiprintf_r+0x5c>
 80070be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070c0:	07dc      	lsls	r4, r3, #31
 80070c2:	d504      	bpl.n	80070ce <_vfiprintf_r+0x4e>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	b01d      	add	sp, #116	@ 0x74
 80070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	0598      	lsls	r0, r3, #22
 80070d2:	d4f7      	bmi.n	80070c4 <_vfiprintf_r+0x44>
 80070d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070d6:	f7fe fa0d 	bl	80054f4 <__retarget_lock_release_recursive>
 80070da:	e7f3      	b.n	80070c4 <_vfiprintf_r+0x44>
 80070dc:	2300      	movs	r3, #0
 80070de:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e0:	2320      	movs	r3, #32
 80070e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070e6:	2330      	movs	r3, #48	@ 0x30
 80070e8:	f04f 0901 	mov.w	r9, #1
 80070ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80070f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800729c <_vfiprintf_r+0x21c>
 80070f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070f8:	4623      	mov	r3, r4
 80070fa:	469a      	mov	sl, r3
 80070fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007100:	b10a      	cbz	r2, 8007106 <_vfiprintf_r+0x86>
 8007102:	2a25      	cmp	r2, #37	@ 0x25
 8007104:	d1f9      	bne.n	80070fa <_vfiprintf_r+0x7a>
 8007106:	ebba 0b04 	subs.w	fp, sl, r4
 800710a:	d00b      	beq.n	8007124 <_vfiprintf_r+0xa4>
 800710c:	465b      	mov	r3, fp
 800710e:	4622      	mov	r2, r4
 8007110:	4629      	mov	r1, r5
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ffa2 	bl	800705c <__sfputs_r>
 8007118:	3001      	adds	r0, #1
 800711a:	f000 80a7 	beq.w	800726c <_vfiprintf_r+0x1ec>
 800711e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007120:	445a      	add	r2, fp
 8007122:	9209      	str	r2, [sp, #36]	@ 0x24
 8007124:	f89a 3000 	ldrb.w	r3, [sl]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 809f 	beq.w	800726c <_vfiprintf_r+0x1ec>
 800712e:	2300      	movs	r3, #0
 8007130:	f04f 32ff 	mov.w	r2, #4294967295
 8007134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007138:	f10a 0a01 	add.w	sl, sl, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	9307      	str	r3, [sp, #28]
 8007140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007144:	931a      	str	r3, [sp, #104]	@ 0x68
 8007146:	4654      	mov	r4, sl
 8007148:	2205      	movs	r2, #5
 800714a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714e:	4853      	ldr	r0, [pc, #332]	@ (800729c <_vfiprintf_r+0x21c>)
 8007150:	f7fe f9d1 	bl	80054f6 <memchr>
 8007154:	9a04      	ldr	r2, [sp, #16]
 8007156:	b9d8      	cbnz	r0, 8007190 <_vfiprintf_r+0x110>
 8007158:	06d1      	lsls	r1, r2, #27
 800715a:	bf44      	itt	mi
 800715c:	2320      	movmi	r3, #32
 800715e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007162:	0713      	lsls	r3, r2, #28
 8007164:	bf44      	itt	mi
 8007166:	232b      	movmi	r3, #43	@ 0x2b
 8007168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800716c:	f89a 3000 	ldrb.w	r3, [sl]
 8007170:	2b2a      	cmp	r3, #42	@ 0x2a
 8007172:	d015      	beq.n	80071a0 <_vfiprintf_r+0x120>
 8007174:	4654      	mov	r4, sl
 8007176:	2000      	movs	r0, #0
 8007178:	f04f 0c0a 	mov.w	ip, #10
 800717c:	9a07      	ldr	r2, [sp, #28]
 800717e:	4621      	mov	r1, r4
 8007180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007184:	3b30      	subs	r3, #48	@ 0x30
 8007186:	2b09      	cmp	r3, #9
 8007188:	d94b      	bls.n	8007222 <_vfiprintf_r+0x1a2>
 800718a:	b1b0      	cbz	r0, 80071ba <_vfiprintf_r+0x13a>
 800718c:	9207      	str	r2, [sp, #28]
 800718e:	e014      	b.n	80071ba <_vfiprintf_r+0x13a>
 8007190:	eba0 0308 	sub.w	r3, r0, r8
 8007194:	fa09 f303 	lsl.w	r3, r9, r3
 8007198:	4313      	orrs	r3, r2
 800719a:	46a2      	mov	sl, r4
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	e7d2      	b.n	8007146 <_vfiprintf_r+0xc6>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	1d19      	adds	r1, r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bfbb      	ittet	lt
 80071ac:	425b      	neglt	r3, r3
 80071ae:	f042 0202 	orrlt.w	r2, r2, #2
 80071b2:	9307      	strge	r3, [sp, #28]
 80071b4:	9307      	strlt	r3, [sp, #28]
 80071b6:	bfb8      	it	lt
 80071b8:	9204      	strlt	r2, [sp, #16]
 80071ba:	7823      	ldrb	r3, [r4, #0]
 80071bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80071be:	d10a      	bne.n	80071d6 <_vfiprintf_r+0x156>
 80071c0:	7863      	ldrb	r3, [r4, #1]
 80071c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80071c4:	d132      	bne.n	800722c <_vfiprintf_r+0x1ac>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	3402      	adds	r4, #2
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	9203      	str	r2, [sp, #12]
 80071d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80072a0 <_vfiprintf_r+0x220>
 80071da:	2203      	movs	r2, #3
 80071dc:	4650      	mov	r0, sl
 80071de:	7821      	ldrb	r1, [r4, #0]
 80071e0:	f7fe f989 	bl	80054f6 <memchr>
 80071e4:	b138      	cbz	r0, 80071f6 <_vfiprintf_r+0x176>
 80071e6:	2240      	movs	r2, #64	@ 0x40
 80071e8:	9b04      	ldr	r3, [sp, #16]
 80071ea:	eba0 000a 	sub.w	r0, r0, sl
 80071ee:	4082      	lsls	r2, r0
 80071f0:	4313      	orrs	r3, r2
 80071f2:	3401      	adds	r4, #1
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	2206      	movs	r2, #6
 80071fc:	4829      	ldr	r0, [pc, #164]	@ (80072a4 <_vfiprintf_r+0x224>)
 80071fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007202:	f7fe f978 	bl	80054f6 <memchr>
 8007206:	2800      	cmp	r0, #0
 8007208:	d03f      	beq.n	800728a <_vfiprintf_r+0x20a>
 800720a:	4b27      	ldr	r3, [pc, #156]	@ (80072a8 <_vfiprintf_r+0x228>)
 800720c:	bb1b      	cbnz	r3, 8007256 <_vfiprintf_r+0x1d6>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	3307      	adds	r3, #7
 8007212:	f023 0307 	bic.w	r3, r3, #7
 8007216:	3308      	adds	r3, #8
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800721c:	443b      	add	r3, r7
 800721e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007220:	e76a      	b.n	80070f8 <_vfiprintf_r+0x78>
 8007222:	460c      	mov	r4, r1
 8007224:	2001      	movs	r0, #1
 8007226:	fb0c 3202 	mla	r2, ip, r2, r3
 800722a:	e7a8      	b.n	800717e <_vfiprintf_r+0xfe>
 800722c:	2300      	movs	r3, #0
 800722e:	f04f 0c0a 	mov.w	ip, #10
 8007232:	4619      	mov	r1, r3
 8007234:	3401      	adds	r4, #1
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	4620      	mov	r0, r4
 800723a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800723e:	3a30      	subs	r2, #48	@ 0x30
 8007240:	2a09      	cmp	r2, #9
 8007242:	d903      	bls.n	800724c <_vfiprintf_r+0x1cc>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0c6      	beq.n	80071d6 <_vfiprintf_r+0x156>
 8007248:	9105      	str	r1, [sp, #20]
 800724a:	e7c4      	b.n	80071d6 <_vfiprintf_r+0x156>
 800724c:	4604      	mov	r4, r0
 800724e:	2301      	movs	r3, #1
 8007250:	fb0c 2101 	mla	r1, ip, r1, r2
 8007254:	e7f0      	b.n	8007238 <_vfiprintf_r+0x1b8>
 8007256:	ab03      	add	r3, sp, #12
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	462a      	mov	r2, r5
 800725c:	4630      	mov	r0, r6
 800725e:	4b13      	ldr	r3, [pc, #76]	@ (80072ac <_vfiprintf_r+0x22c>)
 8007260:	a904      	add	r1, sp, #16
 8007262:	f7fd fbcb 	bl	80049fc <_printf_float>
 8007266:	4607      	mov	r7, r0
 8007268:	1c78      	adds	r0, r7, #1
 800726a:	d1d6      	bne.n	800721a <_vfiprintf_r+0x19a>
 800726c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800726e:	07d9      	lsls	r1, r3, #31
 8007270:	d405      	bmi.n	800727e <_vfiprintf_r+0x1fe>
 8007272:	89ab      	ldrh	r3, [r5, #12]
 8007274:	059a      	lsls	r2, r3, #22
 8007276:	d402      	bmi.n	800727e <_vfiprintf_r+0x1fe>
 8007278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800727a:	f7fe f93b 	bl	80054f4 <__retarget_lock_release_recursive>
 800727e:	89ab      	ldrh	r3, [r5, #12]
 8007280:	065b      	lsls	r3, r3, #25
 8007282:	f53f af1f 	bmi.w	80070c4 <_vfiprintf_r+0x44>
 8007286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007288:	e71e      	b.n	80070c8 <_vfiprintf_r+0x48>
 800728a:	ab03      	add	r3, sp, #12
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462a      	mov	r2, r5
 8007290:	4630      	mov	r0, r6
 8007292:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <_vfiprintf_r+0x22c>)
 8007294:	a904      	add	r1, sp, #16
 8007296:	f7fd fe4f 	bl	8004f38 <_printf_i>
 800729a:	e7e4      	b.n	8007266 <_vfiprintf_r+0x1e6>
 800729c:	080077e8 	.word	0x080077e8
 80072a0:	080077ee 	.word	0x080077ee
 80072a4:	080077f2 	.word	0x080077f2
 80072a8:	080049fd 	.word	0x080049fd
 80072ac:	0800705d 	.word	0x0800705d

080072b0 <__swbuf_r>:
 80072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b2:	460e      	mov	r6, r1
 80072b4:	4614      	mov	r4, r2
 80072b6:	4605      	mov	r5, r0
 80072b8:	b118      	cbz	r0, 80072c2 <__swbuf_r+0x12>
 80072ba:	6a03      	ldr	r3, [r0, #32]
 80072bc:	b90b      	cbnz	r3, 80072c2 <__swbuf_r+0x12>
 80072be:	f7fd ffe7 	bl	8005290 <__sinit>
 80072c2:	69a3      	ldr	r3, [r4, #24]
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	071a      	lsls	r2, r3, #28
 80072ca:	d501      	bpl.n	80072d0 <__swbuf_r+0x20>
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	b943      	cbnz	r3, 80072e2 <__swbuf_r+0x32>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 f82a 	bl	800732c <__swsetup_r>
 80072d8:	b118      	cbz	r0, 80072e2 <__swbuf_r+0x32>
 80072da:	f04f 37ff 	mov.w	r7, #4294967295
 80072de:	4638      	mov	r0, r7
 80072e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	6922      	ldr	r2, [r4, #16]
 80072e6:	b2f6      	uxtb	r6, r6
 80072e8:	1a98      	subs	r0, r3, r2
 80072ea:	6963      	ldr	r3, [r4, #20]
 80072ec:	4637      	mov	r7, r6
 80072ee:	4283      	cmp	r3, r0
 80072f0:	dc05      	bgt.n	80072fe <__swbuf_r+0x4e>
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f7ff fdb5 	bl	8006e64 <_fflush_r>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d1ed      	bne.n	80072da <__swbuf_r+0x2a>
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	3b01      	subs	r3, #1
 8007302:	60a3      	str	r3, [r4, #8]
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	6022      	str	r2, [r4, #0]
 800730a:	701e      	strb	r6, [r3, #0]
 800730c:	6962      	ldr	r2, [r4, #20]
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	429a      	cmp	r2, r3
 8007312:	d004      	beq.n	800731e <__swbuf_r+0x6e>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	07db      	lsls	r3, r3, #31
 8007318:	d5e1      	bpl.n	80072de <__swbuf_r+0x2e>
 800731a:	2e0a      	cmp	r6, #10
 800731c:	d1df      	bne.n	80072de <__swbuf_r+0x2e>
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f7ff fd9f 	bl	8006e64 <_fflush_r>
 8007326:	2800      	cmp	r0, #0
 8007328:	d0d9      	beq.n	80072de <__swbuf_r+0x2e>
 800732a:	e7d6      	b.n	80072da <__swbuf_r+0x2a>

0800732c <__swsetup_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4b29      	ldr	r3, [pc, #164]	@ (80073d4 <__swsetup_r+0xa8>)
 8007330:	4605      	mov	r5, r0
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	460c      	mov	r4, r1
 8007336:	b118      	cbz	r0, 8007340 <__swsetup_r+0x14>
 8007338:	6a03      	ldr	r3, [r0, #32]
 800733a:	b90b      	cbnz	r3, 8007340 <__swsetup_r+0x14>
 800733c:	f7fd ffa8 	bl	8005290 <__sinit>
 8007340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007344:	0719      	lsls	r1, r3, #28
 8007346:	d422      	bmi.n	800738e <__swsetup_r+0x62>
 8007348:	06da      	lsls	r2, r3, #27
 800734a:	d407      	bmi.n	800735c <__swsetup_r+0x30>
 800734c:	2209      	movs	r2, #9
 800734e:	602a      	str	r2, [r5, #0]
 8007350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	e033      	b.n	80073c4 <__swsetup_r+0x98>
 800735c:	0758      	lsls	r0, r3, #29
 800735e:	d512      	bpl.n	8007386 <__swsetup_r+0x5a>
 8007360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007362:	b141      	cbz	r1, 8007376 <__swsetup_r+0x4a>
 8007364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007368:	4299      	cmp	r1, r3
 800736a:	d002      	beq.n	8007372 <__swsetup_r+0x46>
 800736c:	4628      	mov	r0, r5
 800736e:	f7fe ff23 	bl	80061b8 <_free_r>
 8007372:	2300      	movs	r3, #0
 8007374:	6363      	str	r3, [r4, #52]	@ 0x34
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	2300      	movs	r3, #0
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f043 0308 	orr.w	r3, r3, #8
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	b94b      	cbnz	r3, 80073a6 <__swsetup_r+0x7a>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800739c:	d003      	beq.n	80073a6 <__swsetup_r+0x7a>
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 f882 	bl	80074aa <__smakebuf_r>
 80073a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073aa:	f013 0201 	ands.w	r2, r3, #1
 80073ae:	d00a      	beq.n	80073c6 <__swsetup_r+0x9a>
 80073b0:	2200      	movs	r2, #0
 80073b2:	60a2      	str	r2, [r4, #8]
 80073b4:	6962      	ldr	r2, [r4, #20]
 80073b6:	4252      	negs	r2, r2
 80073b8:	61a2      	str	r2, [r4, #24]
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	b942      	cbnz	r2, 80073d0 <__swsetup_r+0xa4>
 80073be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073c2:	d1c5      	bne.n	8007350 <__swsetup_r+0x24>
 80073c4:	bd38      	pop	{r3, r4, r5, pc}
 80073c6:	0799      	lsls	r1, r3, #30
 80073c8:	bf58      	it	pl
 80073ca:	6962      	ldrpl	r2, [r4, #20]
 80073cc:	60a2      	str	r2, [r4, #8]
 80073ce:	e7f4      	b.n	80073ba <__swsetup_r+0x8e>
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7f7      	b.n	80073c4 <__swsetup_r+0x98>
 80073d4:	2000001c 	.word	0x2000001c

080073d8 <_raise_r>:
 80073d8:	291f      	cmp	r1, #31
 80073da:	b538      	push	{r3, r4, r5, lr}
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	d904      	bls.n	80073ec <_raise_r+0x14>
 80073e2:	2316      	movs	r3, #22
 80073e4:	6003      	str	r3, [r0, #0]
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073ee:	b112      	cbz	r2, 80073f6 <_raise_r+0x1e>
 80073f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073f4:	b94b      	cbnz	r3, 800740a <_raise_r+0x32>
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f830 	bl	800745c <_getpid_r>
 80073fc:	4622      	mov	r2, r4
 80073fe:	4601      	mov	r1, r0
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007406:	f000 b817 	b.w	8007438 <_kill_r>
 800740a:	2b01      	cmp	r3, #1
 800740c:	d00a      	beq.n	8007424 <_raise_r+0x4c>
 800740e:	1c59      	adds	r1, r3, #1
 8007410:	d103      	bne.n	800741a <_raise_r+0x42>
 8007412:	2316      	movs	r3, #22
 8007414:	6003      	str	r3, [r0, #0]
 8007416:	2001      	movs	r0, #1
 8007418:	e7e7      	b.n	80073ea <_raise_r+0x12>
 800741a:	2100      	movs	r1, #0
 800741c:	4620      	mov	r0, r4
 800741e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007422:	4798      	blx	r3
 8007424:	2000      	movs	r0, #0
 8007426:	e7e0      	b.n	80073ea <_raise_r+0x12>

08007428 <raise>:
 8007428:	4b02      	ldr	r3, [pc, #8]	@ (8007434 <raise+0xc>)
 800742a:	4601      	mov	r1, r0
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	f7ff bfd3 	b.w	80073d8 <_raise_r>
 8007432:	bf00      	nop
 8007434:	2000001c 	.word	0x2000001c

08007438 <_kill_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	2300      	movs	r3, #0
 800743c:	4d06      	ldr	r5, [pc, #24]	@ (8007458 <_kill_r+0x20>)
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	f7fa fb80 	bl	8001b4a <_kill>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	d102      	bne.n	8007454 <_kill_r+0x1c>
 800744e:	682b      	ldr	r3, [r5, #0]
 8007450:	b103      	cbz	r3, 8007454 <_kill_r+0x1c>
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd38      	pop	{r3, r4, r5, pc}
 8007456:	bf00      	nop
 8007458:	20000438 	.word	0x20000438

0800745c <_getpid_r>:
 800745c:	f7fa bb6e 	b.w	8001b3c <_getpid>

08007460 <__swhatbuf_r>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	460c      	mov	r4, r1
 8007464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007468:	4615      	mov	r5, r2
 800746a:	2900      	cmp	r1, #0
 800746c:	461e      	mov	r6, r3
 800746e:	b096      	sub	sp, #88	@ 0x58
 8007470:	da0c      	bge.n	800748c <__swhatbuf_r+0x2c>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	2100      	movs	r1, #0
 8007476:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800747a:	bf14      	ite	ne
 800747c:	2340      	movne	r3, #64	@ 0x40
 800747e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007482:	2000      	movs	r0, #0
 8007484:	6031      	str	r1, [r6, #0]
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	b016      	add	sp, #88	@ 0x58
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	466a      	mov	r2, sp
 800748e:	f000 f849 	bl	8007524 <_fstat_r>
 8007492:	2800      	cmp	r0, #0
 8007494:	dbed      	blt.n	8007472 <__swhatbuf_r+0x12>
 8007496:	9901      	ldr	r1, [sp, #4]
 8007498:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800749c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074a0:	4259      	negs	r1, r3
 80074a2:	4159      	adcs	r1, r3
 80074a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074a8:	e7eb      	b.n	8007482 <__swhatbuf_r+0x22>

080074aa <__smakebuf_r>:
 80074aa:	898b      	ldrh	r3, [r1, #12]
 80074ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ae:	079d      	lsls	r5, r3, #30
 80074b0:	4606      	mov	r6, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	d507      	bpl.n	80074c6 <__smakebuf_r+0x1c>
 80074b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	2301      	movs	r3, #1
 80074c0:	6163      	str	r3, [r4, #20]
 80074c2:	b003      	add	sp, #12
 80074c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c6:	466a      	mov	r2, sp
 80074c8:	ab01      	add	r3, sp, #4
 80074ca:	f7ff ffc9 	bl	8007460 <__swhatbuf_r>
 80074ce:	9f00      	ldr	r7, [sp, #0]
 80074d0:	4605      	mov	r5, r0
 80074d2:	4639      	mov	r1, r7
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7fe fee1 	bl	800629c <_malloc_r>
 80074da:	b948      	cbnz	r0, 80074f0 <__smakebuf_r+0x46>
 80074dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d4ee      	bmi.n	80074c2 <__smakebuf_r+0x18>
 80074e4:	f023 0303 	bic.w	r3, r3, #3
 80074e8:	f043 0302 	orr.w	r3, r3, #2
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	e7e2      	b.n	80074b6 <__smakebuf_r+0xc>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	9b01      	ldr	r3, [sp, #4]
 80074fe:	6020      	str	r0, [r4, #0]
 8007500:	b15b      	cbz	r3, 800751a <__smakebuf_r+0x70>
 8007502:	4630      	mov	r0, r6
 8007504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007508:	f000 f81e 	bl	8007548 <_isatty_r>
 800750c:	b128      	cbz	r0, 800751a <__smakebuf_r+0x70>
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	431d      	orrs	r5, r3
 800751e:	81a5      	strh	r5, [r4, #12]
 8007520:	e7cf      	b.n	80074c2 <__smakebuf_r+0x18>
	...

08007524 <_fstat_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	2300      	movs	r3, #0
 8007528:	4d06      	ldr	r5, [pc, #24]	@ (8007544 <_fstat_r+0x20>)
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	f7fa fb69 	bl	8001c08 <_fstat>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d102      	bne.n	8007540 <_fstat_r+0x1c>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	b103      	cbz	r3, 8007540 <_fstat_r+0x1c>
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	bd38      	pop	{r3, r4, r5, pc}
 8007542:	bf00      	nop
 8007544:	20000438 	.word	0x20000438

08007548 <_isatty_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	2300      	movs	r3, #0
 800754c:	4d05      	ldr	r5, [pc, #20]	@ (8007564 <_isatty_r+0x1c>)
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	602b      	str	r3, [r5, #0]
 8007554:	f7fa fb67 	bl	8001c26 <_isatty>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_isatty_r+0x1a>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	b103      	cbz	r3, 8007562 <_isatty_r+0x1a>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	20000438 	.word	0x20000438

08007568 <_init>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr

08007574 <_fini>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr
